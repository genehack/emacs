Info file: gnus,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus: (gnus).         The newsreader Gnus.
END-INFO-DIR-ENTRY








File: gnus, Node: Archiving Mail, Next: Web Searches, Prev: Browsing the Web, Up: Browsing the Web

Archiving Mail
--------------

Some of the back ends, notably `nnml', `nnfolder', and `nnmaildir',
now actually store the article marks with each group.  For these
servers, archiving and restoring a group while preserving marks is
fairly simple.

(Preserving the group level and group parameters as well still
requires ritual dancing and sacrifices to the `.newsrc.eld' deity
though.)

To archive an entire `nnml', `nnfolder', or `nnmaildir' server, take a
recursive copy of the server directory.  There is no need to shut down
Gnus, so archiving may be invoked by `cron' or similar.  You restore
the data by restoring the directory tree, and adding a server
definition pointing to that directory in Gnus.  The *Note Article
Backlog::, *Note Asynchronous Fetching:: and other things might
interfere with overwriting data, so you may want to shut down Gnus
before you restore the data.

It is also possible to archive individual `nnml', `nnfolder', or
`nnmaildir' groups, while preserving marks.  For `nnml' or
`nnmaildir', you copy all files in the group's directory.  For
`nnfolder' you need to copy both the base folder file itself (`FOO',
say), and the marks file (`FOO.mrk' in this example).  Restoring the
group is done with `G m' from the Group buffer.  The last step makes
Gnus notice the new directory.  `nnmaildir' notices the new directory
automatically, so `G m' is unnecessary in that case.



File: gnus, Node: Web Searches, Next: Slashdot, Prev: Archiving Mail, Up: Browsing the Web

Web Searches
------------

It's, like, too neat to search the Usenet for articles that match a
string, but it, like, totally *sucks*, like, totally, to use one of
those, like, Web browsers, and you, like, have to, rilly, like, look
at the commercials, so, like, with Gnus you can do *rad*, rilly,
searches without having to use a browser.

The `nnweb' back end allows an easy interface to the mighty search
engine.  You create an `nnweb' group, enter a search pattern, and then
enter the group and read the articles like you would any normal group.
The `G w' command in the group buffer (*Note Foreign Groups::) will do
this in an easy-to-use fashion.

`nnweb' groups don't really lend themselves to being solid
groups--they have a very fleeting idea of article numbers.  In fact,
each time you enter an `nnweb' group (not even changing the search
pattern), you are likely to get the articles ordered in a different
manner.  Not even using duplicate suppression (*Note Duplicate
Suppression::) will help, since `nnweb' doesn't even know the
`Message-ID' of the articles before reading them using some search
engines (Google, for instance).  The only possible way to keep track
of which articles you've read is by scoring on the `Date' header--mark
all articles posted before the last date you read the group as read.

If the search engine changes its output substantially, `nnweb' won't
be able to parse it and will fail.  One could hardly fault the Web
providers if they were to do this--their *raison d'^etre* is to make
money off of advertisements, not to provide services to the community.
Since `nnweb' washes the ads off all the articles, one might think
that the providers might be somewhat miffed.  We'll see.

You must have the `url' and `W3' package or those alternatives (try
`customize-group' on the `mm-url' variable group) installed to be able
to use `nnweb'.

Virtual server variables:

`nnweb-type'
     What search engine type is being used.  The currently supported types
     are `google', `dejanews', and `gmane'.  Note that
     `dejanews' is an alias to `google'.

`nnweb-search'
     The search string to feed to the search engine.

`nnweb-max-hits'
     Advisory maximum number of hits per search to display.  The
     default is 999.

`nnweb-type-definition'
     Type-to-definition alist.  This alist says what `nnweb' should do
     with the various search engine types.  The following elements
     must be present:

     `article'
          Function to decode the article and provide something that
          Gnus understands.

     `map'
          Function to create an article number to message header and
          URL alist.

     `search'
          Function to send the search string to the search engine.

     `address'
          The address the aforementioned function should send the
          search string to.

     `id'
          Format string URL to fetch an article by `Message-ID'.





File: gnus, Node: Slashdot, Next: Ultimate, Prev: Web Searches, Up: Browsing the Web

Slashdot
--------

Slashdot (http://slashdot.org/) is a popular news site, with lively
discussion following the news articles.  `nnslashdot' will let you
read this forum in a convenient manner.

The easiest way to read this source is to put something like the
following in your `~/.gnus.el' file:

     (setq gnus-secondary-select-methods
           '((nnslashdot "")))

This will make Gnus query the `nnslashdot' back end for new comments
and groups.  The `F' command will subscribe each new news article as a
new Gnus group, and you can read the comments by entering these
groups.  (Note that the default subscription method is to subscribe
new groups as zombies.  Other methods are available (*Note
Subscription Methods::).

If you want to remove an old `nnslashdot' group, the `G DEL' command
is the most handy tool (*Note Foreign Groups::).

When following up to `nnslashdot' comments (or posting new
comments), some light HTMLizations will be performed.  In
particular, text quoted with `> ' will be quoted with
`blockquote' instead, and signatures will have `br' added to
the end of each line.  Other than that, you can just write HTML
directly into the message buffer.  Note that Slashdot filters out some
HTML forms.

The following variables can be altered to change its behavior:

`nnslashdot-threaded'
     Whether `nnslashdot' should display threaded groups or not.  The
     default is `t'.  To be able to display threads, `nnslashdot' has
     to retrieve absolutely all comments in a group upon entry.  If a
     threaded display is not required, `nnslashdot' will only retrieve
     the comments that are actually wanted by the user.  Threading is
     nicer, but much, much slower than unthreaded.

`nnslashdot-login-name'
     The login name to use when posting.

`nnslashdot-password'
     The password to use when posting.

`nnslashdot-directory'
     Where `nnslashdot' will store its files.  The default is
     `~/News/slashdot/'.

`nnslashdot-active-url'
     The URL format string that will be used to fetch the
     information on news articles and comments.  The default is
     `http://slashdot.org/search.pl?section=&min=%d'.

`nnslashdot-comments-url'
     The URL format string that will be used to fetch comments.

`nnslashdot-article-url'
     The URL format string that will be used to fetch the news
     article.  The default is
     `http://slashdot.org/article.pl?sid=%s&mode=nocomment'.

`nnslashdot-threshold'
     The score threshold.  The default is -1.

`nnslashdot-group-number'
     The number of old groups, in addition to the ten latest, to keep
     updated.  The default is 0.






File: gnus, Node: Ultimate, Next: Web Archive, Prev: Slashdot, Up: Browsing the Web

Ultimate
--------

The Ultimate Bulletin Board (http://www.ultimatebb.com/) is probably
the most popular Web bulletin board system used.  It has a quite
regular and nice interface, and it's possible to get the information
Gnus needs to keep groups updated.

The easiest way to get started with `nnultimate' is to say something
like the following in the group buffer: `B nnultimate RET
http://www.tcj.com/messboard/ubbcgi/ RET'.  (Substitute the URL (not
including `Ultimate.cgi' or the like at the end) for a forum you're
interested in; there's quite a list of them on the Ultimate web site.)
Then subscribe to the groups you're interested in from the server
buffer, and read them from the group buffer.

The following `nnultimate' variables can be altered:

`nnultimate-directory'
     The directory where `nnultimate' stores its files.  The default is
     `~/News/ultimate/'.




File: gnus, Node: Web Archive, Next: RSS, Prev: Ultimate, Up: Browsing the Web

Web Archive
-----------

Some mailing lists only have archives on Web servers, such as
`http://www.egroups.com/' and `http://www.mail-archive.com/'.  It has
a quite regular and nice interface, and it's possible to get the
information Gnus needs to keep groups updated.

The easiest way to get started with `nnwarchive' is to say something
like the following in the group buffer: `M-x
gnus-group-make-warchive-group RET AN_EGROUP RET egroups RET
www.egroups.com RET YOUR@EMAIL.ADDRESS RET'.  (Substitute the
AN_EGROUP with the mailing list you subscribed, the YOUR@EMAIL.ADDRESS
with your email address.), or to browse the back end by `B nnwarchive
RET mail-archive RET'.

The following `nnwarchive' variables can be altered:

`nnwarchive-directory'
     The directory where `nnwarchive' stores its files.  The default is
     `~/News/warchive/'.

`nnwarchive-login'
     The account name on the web server.

`nnwarchive-passwd'
     The password for your account on the web server.



File: gnus, Node: RSS, Next: Customizing W3, Prev: Web Archive, Up: Browsing the Web

RSS
---

Some web sites have an RDF Site Summary (RSS).  RSS is a format for
summarizing headlines from news related sites (such as BBC or CNN).
But basically anything list-like can be presented as an RSS feed:
weblogs, changelogs or recent changes to a wiki
(e.g. `http://cliki.net/recent-changes.rdf').

RSS has a quite regular and nice interface, and it's possible to get
the information Gnus needs to keep groups updated.

Note: you had better use Emacs which supports the `utf-8' coding
system because RSS uses UTF-8 for encoding non-ASCII text by default.
It is also used by default for non-ASCII group names.

Use `G R' from the group buffer to subscribe to a feed--you will be
prompted for the location, the title and the description of the feed.
The title, which allows any characters, will be used for the group
name and the name of the group data file.  The description can be
omitted.

An easy way to get started with `nnrss' is to say something like the
following in the group buffer: `B nnrss RET RET y', then subscribe to
groups.

The `nnrss' back end saves the group data file in `nnrss-directory'
(see below) for each `nnrss' group.  File names containing non-ASCII
characters will be encoded by the coding system specified with the
`nnmail-pathname-coding-system' variable.  If it is `nil', in Emacs
the coding system defaults to the value of
`default-file-name-coding-system'.  If you are using XEmacs and want
to use non-ASCII group names, you should set the value for the
`nnmail-pathname-coding-system' variable properly.

The `nnrss' back end generates `multipart/alternative' MIME articles
in which each contains a `text/plain' part and a `text/html' part.

You can also use the following commands to import and export your
subscriptions from a file in OPML format (Outline Processor Markup
Language).

 -- Function: nnrss-opml-import FILE
     Prompt for an OPML file, and subscribe to each feed in the file.

 -- Function: nnrss-opml-export
     Write your current RSS subscriptions to a buffer in
     OPML format.

The following `nnrss' variables can be altered:

`nnrss-directory'
     The directory where `nnrss' stores its files.  The default is
     `~/News/rss/'.

`nnrss-file-coding-system'
     The coding system used when reading and writing the `nnrss'
     groups data files.  The default is the value of
     `mm-universal-coding-system' (which defaults to `emacs-mule' in
     Emacs or `escape-quoted' in XEmacs).

`nnrss-ignore-article-fields'
     Some feeds update constantly article fields during their publications,
     e.g. to indicate the number of comments.  However, if there is
     a difference between the local article and the distant one, the latter
     is considered to be new.  To avoid this and discard some fields, set this
     variable to the list of fields to be ignored.  The default is
     `'(slash:comments)'.

`nnrss-use-local'
     If you set `nnrss-use-local' to `t', `nnrss' will read the feeds
     from local files in `nnrss-directory'.  You can use the command
     `nnrss-generate-download-script' to generate a download script
     using `wget'.

`nnrss-wash-html-in-text-plain-parts'
     Non-`nil' means that `nnrss' renders text in `text/plain'
     parts as HTML.  The function specified by the
     `mm-text-html-renderer' variable (*Note Display Customization: (emacs-mime)Display Customization.) will be used
     to render text.  If it is `nil', which is the default, text will
     simply be folded.  Leave it `nil' if you prefer to see
     `text/html' parts.

The following code may be helpful, if you want to show the description
in the summary buffer.

     (add-to-list 'nnmail-extra-headers nnrss-description-field)
     (setq gnus-summary-line-format "%U%R%z%I%(%[%4L: %-15,15f%]%) %s%uX\n")

     (defun gnus-user-format-function-X (header)
       (let ((descr
              (assq nnrss-description-field (mail-header-extra header))))
         (if descr (concat "\n\t" (cdr descr)) "")))

The following code may be useful to open an nnrss url directly from
the summary buffer.

     (require 'browse-url)

     (defun browse-nnrss-url (arg)
       (interactive "p")
       (let ((url (assq nnrss-url-field
                        (mail-header-extra
                         (gnus-data-header
                          (assq (gnus-summary-article-number)
                                gnus-newsgroup-data))))))
         (if url
             (progn
               (browse-url (cdr url))
               (gnus-summary-mark-as-read-forward 1))
           (gnus-summary-scroll-up arg))))

     (eval-after-load "gnus"
       #'(define-key gnus-summary-mode-map
           (kbd "<RET>") 'browse-nnrss-url))
     (add-to-list 'nnmail-extra-headers nnrss-url-field)

Even if you have added `text/html' to the
`mm-discouraged-alternatives' variable (*Note Display Customization: (emacs-mime)Display Customization.) since you don't want to see HTML parts, it might be
more useful especially in `nnrss' groups to display
`text/html' parts.  Here's an example of setting
`mm-discouraged-alternatives' as a group parameter (*Note Group Parameters::) in order to display `text/html' parts only in
`nnrss' groups:

     ;; Set the default value of `mm-discouraged-alternatives'.
     (eval-after-load "gnus-sum"
       '(add-to-list
         'gnus-newsgroup-variables
         '(mm-discouraged-alternatives
           . '("text/html" "image/.*"))))

     ;; Display `text/html' parts in `nnrss' groups.
     (add-to-list
      'gnus-parameters
      '("\\`nnrss:" (mm-discouraged-alternatives nil)))




File: gnus, Node: Customizing W3, Prev: RSS, Up: Browsing the Web

Customizing W3
--------------

Gnus uses the url library to fetch web pages and Emacs/W3 (or those
alternatives) to display web pages.  Emacs/W3 is documented in its own
manual, but there are some things that may be more relevant for Gnus
users.

For instance, a common question is how to make Emacs/W3 follow links
using the `browse-url' functions (which will call some external web
browser like Netscape).  Here's one way:

     (eval-after-load "w3"
       '(progn
         (fset 'w3-fetch-orig (symbol-function 'w3-fetch))
         (defun w3-fetch (&optional url target)
           (interactive (list (w3-read-url-with-default)))
           (if (eq major-mode 'gnus-article-mode)
               (browse-url url)
             (w3-fetch-orig url target)))))

Put that in your `.emacs' file, and hitting links in W3-rendered HTML
in the Gnus article buffers will use `browse-url' to follow the link.




File: gnus, Node: IMAP, Next: Other Sources, Prev: Browsing the Web, Up: Select Methods

IMAP
====

IMAP is a network protocol for reading mail (or news, or ...), think
of it as a modernized NNTP.  Connecting to a IMAP server is much
similar to connecting to a news server, you just specify the network
address of the server.

IMAP has two properties.  First, IMAP can do everything that POP can,
it can hence be viewed as a POP++.  Secondly, IMAP is a mail storage
protocol, similar to NNTP being a news storage protocol--however, IMAP
offers more features than NNTP because news is more or less read-only
whereas mail is read-write.

If you want to use IMAP as a POP++, use an imap entry in
`mail-sources'.  With this, Gnus will fetch mails from the IMAP server
and store them on the local disk.  This is not the usage described in
this section---*Note Mail Sources::.

If you want to use IMAP as a mail storage protocol, use an nnimap
entry in `gnus-secondary-select-methods'.  With this, Gnus will
manipulate mails stored on the IMAP server.  This is the kind of usage
explained in this section.

A server configuration in `~/.gnus.el' with a few IMAP servers might
look something like the following.  (Note that for TLS/SSL, you need
external programs and libraries, see below.)

     (setq gnus-secondary-select-methods
           '((nnimap "simpleserver") ; no special configuration
             ; perhaps a ssh port forwarded server:
             (nnimap "dolk"
                     (nnimap-address "localhost")
                     (nnimap-server-port 1430))
             ; a UW server running on localhost
             (nnimap "barbar"
                     (nnimap-server-port 143)
                     (nnimap-address "localhost")
                     (nnimap-list-pattern ("INBOX" "mail/*")))
             ; anonymous public cyrus server:
             (nnimap "cyrus.andrew.cmu.edu"
                     (nnimap-authenticator anonymous)
                     (nnimap-list-pattern "archive.*")
                     (nnimap-stream network))
             ; a ssl server on a non-standard port:
             (nnimap "vic20"
                     (nnimap-address "vic20.somewhere.com")
                     (nnimap-server-port 9930)
                     (nnimap-stream ssl))))

After defining the new server, you can subscribe to groups on the
server using normal Gnus commands such as `U' in the Group Buffer
(*Note Subscription Commands::) or via the Server Buffer (*Note Server
Buffer::).

The following variables can be used to create a virtual `nnimap'
server:


`nnimap-address'

     The address of the remote IMAP server.  Defaults to the virtual
     server name if not specified.

`nnimap-server-port'
     Port on server to contact.  Defaults to port 143, or 993 for
     TLS/SSL.

     Note that this should be an integer, example server
     specification:

          (nnimap "mail.server.com"
                  (nnimap-server-port 4711))

`nnimap-list-pattern'
     String or list of strings of mailboxes to limit available groups to.
     This is used when the server has very many mailboxes and you're only
     interested in a few--some servers export your home directory via
     IMAP, you'll probably want to limit the mailboxes to those in
     `~/Mail/*' then.

     The string can also be a cons of REFERENCE and the string as
     above, what REFERENCE is used for is server specific, but on the
     University of Washington server it's a directory that will be
     concatenated with the mailbox.

     Example server specification:

          (nnimap "mail.server.com"
                  (nnimap-list-pattern ("INBOX" "Mail/*" "alt.sex.*"
                                         ("~friend/Mail/" . "list/*"))))

`nnimap-stream'
     The type of stream used to connect to your server.  By default,
     nnimap will detect and automatically use all of the below, with
     the exception of TLS/SSL.  (IMAP over TLS/SSL is being replaced
     by STARTTLS, which can be automatically detected, but it's not
     widely deployed yet.)

     Example server specification:

          (nnimap "mail.server.com"
                  (nnimap-stream ssl))

     Please note that the value of `nnimap-stream' is a symbol!

        * "gssapi:" Connect with GSSAPI (usually Kerberos 5).  Requires the
          `gsasl' or `imtest' program.
        * "kerberos4:" Connect with Kerberos 4.  Requires the `imtest' program.
        * "starttls:" Connect via the STARTTLS extension (similar to
          TLS/SSL).  Requires the external library `starttls.el' and program
          `starttls'.
        * "tls:" Connect through TLS.  Requires GNUTLS (the program
          `gnutls-cli').
        * "ssl:" Connect through SSL.  Requires OpenSSL (the program
          `openssl') or SSLeay (`s_client').
        * "shell:" Use a shell command to start IMAP connection.
        * "network:" Plain, TCP/IP network connection.

     The `imtest' program is shipped with Cyrus IMAPD.  If you're
     using `imtest' from Cyrus IMAPD < 2.0.14 (which includes version
     1.5.x and 1.6.x) you need to frob `imap-process-connection-type'
     to make `imap.el' use a pty instead of a pipe when communicating
     with `imtest'.  You will then suffer from a line length
     restrictions on IMAP commands, which might make Gnus seem to hang
     indefinitely if you have many articles in a mailbox.  The
     variable `imap-kerberos4-program' contain parameters to pass to
     the imtest program.

     For TLS connection, the `gnutls-cli' program from GNUTLS is
     needed.  It is available from
     `http://www.gnu.org/software/gnutls/'.

     This parameter specifies a list of command lines that invoke a
     GSSAPI authenticated IMAP stream in a subshell.  They are tried
     sequentially until a connection is made, or the list has been
     exhausted.  By default, `gsasl' from GNU SASL, available from
     `http://www.gnu.org/software/gsasl/', and the `imtest' program
     from Cyrus IMAPD (see `imap-kerberos4-program'), are tried.

     For SSL connections, the OpenSSL program is available from
     `http://www.openssl.org/'.  OpenSSL was formerly known as SSLeay,
     and nnimap support it too--although the most recent versions of
     SSLeay, 0.9.x, are known to have serious bugs making it useless.
     Earlier versions, especially 0.8.x, of SSLeay are known to work.
     The variable `imap-ssl-program' contain parameters to pass to
     OpenSSL/SSLeay.

     For IMAP connections using the `shell' stream, the variable
     `imap-shell-program' specify what program to call.  Make sure
     nothing is interfering with the output of the program, e.g.,
     don't forget to redirect the error output to the void.

`nnimap-authenticator'

     The authenticator used to connect to the server.  By default,
     nnimap will use the most secure authenticator your server is
     capable of.

     Example server specification:

          (nnimap "mail.server.com"
                  (nnimap-authenticator anonymous))

     Please note that the value of `nnimap-authenticator' is a symbol!

        * "gssapi:" GSSAPI (usually kerberos 5) authentication.
          Requires external program `gsasl' or `imtest'.
        * "kerberos4:" Kerberos 4 authentication.  Requires external program
          `imtest'.
        * "digest-md5:" Encrypted username/password via DIGEST-MD5.
          Requires external library `digest-md5.el'.
        * "cram-md5:" Encrypted username/password via CRAM-MD5.
        * "login:" Plain-text username/password via LOGIN.
        * "anonymous:" Login as "anonymous", supplying your email address as password.

`nnimap-expunge-on-close'
     Unlike Parmenides the IMAP designers have decided things that
     don't exist actually do exist.  More specifically, IMAP has this
     concept of marking articles `Deleted' which doesn't actually
     delete them, and this (marking them `Deleted', that is) is what
     nnimap does when you delete an article in Gnus (with `B DEL' or
     similar).

     Since the articles aren't really removed when we mark them with
     the `Deleted' flag we'll need a way to actually delete them.
     Feel like running in circles yet?

     Traditionally, nnimap has removed all articles marked as
     `Deleted' when closing a mailbox but this is now configurable by
     this server variable.

     The possible options are:


     `always'
          The default behavior, delete all articles marked as
          Deleted" when closing a mailbox.
     `never'
          Never actually delete articles.  Currently there is no way
          of showing the articles marked for deletion in nnimap, but
          other IMAP clients may allow you to do this.  If you ever
          want to run the EXPUNGE command manually, *Note Expunging
          mailboxes::.
     `ask'
          When closing mailboxes, nnimap will ask if you wish to
          expunge deleted articles or not.


`nnimap-importantize-dormant'

     If non-`nil' (the default), marks dormant articles as ticked (as
     well), for other IMAP clients.  Within Gnus, dormant articles
     will naturally still (only) be marked as dormant.  This is to
     make dormant articles stand out, just like ticked articles, in
     other IMAP clients.  (In other words, Gnus has two "Tick" marks
     and IMAP has only one.)

     Probably the only reason for frobbing this would be if you're
     trying enable per-user persistent dormant flags, using something
     like:

          (setcdr (assq 'dormant nnimap-mark-to-flag-alist)
                  (format "gnus-dormant-%s" (user-login-name)))
          (setcdr (assq 'dormant nnimap-mark-to-predicate-alist)
                  (format "KEYWORD gnus-dormant-%s" (user-login-name)))

     In this case, you would not want the per-user dormant flag
     showing up as ticked for other users.

`nnimap-expunge-search-string'

     This variable contain the IMAP search command sent to server when
     searching for articles eligible for expiring.  The default is
     `"UID %s NOT SINCE %s"', where the first `%s' is replaced by UID
     set and the second `%s' is replaced by a date.

     Probably the only useful value to change this to is `"UID %s NOT
     SENTSINCE %s"', which makes nnimap use the Date: in messages
     instead of the internal article date.  See section 6.4.4 of RFC
     2060 for more information on valid strings.

     However, if `nnimap-search-uids-not-since-is-evil' is true, this
     variable has no effect since the search logic is reversed, as
     described below.

`nnimap-authinfo-file'

     A file containing credentials used to log in on servers.  The format is
     (almost) the same as the `ftp' `~/.netrc' file.  See the
     variable `nntp-authinfo-file' for exact syntax; also see
     *Note NNTP::.  An example of an .authinfo line for an IMAP server, is:

          machine students.uio.no login larsi password geheimnis port imap

     Note that it should be `port imap', or `port 143', if you
     use a `nnimap-stream' of `tls' or `ssl', even if the
     actual port number used is port 993 for secured IMAP.  For
     convenience, Gnus will accept `port imaps' as a synonym of
     `port imap'.

`nnimap-need-unselect-to-notice-new-mail'

     Unselect mailboxes before looking for new mail in them.  Some
     servers seem to need this under some circumstances; it was
     reported that Courier 1.7.1 did.

`nnimap-nov-is-evil'

     Never generate or use a local NOV database. Defaults to the value
     of `gnus-agent'.

     Using a NOV database usually makes header fetching much faster,
     but it uses the `UID SEARCH UID' command, which is very slow on
     some servers (notably some versions of Courier). Since the Gnus
     Agent caches the information in the NOV database without using
     the slow command, this variable defaults to true if the Agent is
     in use, and false otherwise.

`nnimap-search-uids-not-since-is-evil'

     Avoid the `UID SEARCH UID MESSAGE NUMBERS NOT SINCE
     DATE' command, which is slow on some IMAP servers
     (notably, some versions of Courier). Instead, use `UID SEARCH SINCE
     DATE' and prune the list of expirable articles within Gnus.

     When Gnus expires your mail (*Note Expiring Mail::), it starts
     with a list of expirable articles and asks the IMAP server
     questions like "Of these articles, which ones are older than a
     week?" While this seems like a perfectly reasonable question,
     some IMAP servers take a long time to answer it, since they
     seemingly go looking into every old article to see if it is one
     of the expirable ones. Curiously, the question "Of *all*
     articles, which ones are newer than a week?" seems to be much
     faster to answer, so setting this variable causes Gnus to ask
     this question and figure out the answer to the real question
     itself.

     This problem can really sneak up on you: when you first configure
     Gnus, everything works fine, but once you accumulate a couple
     thousand messages, you start cursing Gnus for being so slow. On
     the other hand, if you get a lot of email within a week, setting
     this variable will cause a lot of network traffic between Gnus
     and the IMAP server.

`nnimap-logout-timeout'

     There is a case where a connection to a IMAP server is unable to
     close, when connecting to the server via a certain kind of
     network, e.g. VPN.  In that case, it will be observed that a
     connection between Emacs and the local network looks alive even
     if the server has closed a connection for some reason (typically,
     a timeout).  Consequently, Emacs continues waiting for a response
     from the server for the `LOGOUT' command that Emacs sent, or
     hangs in other words.  If you are in such a network, setting this
     variable to a number of seconds will be helpful.  If it is set, a
     hung connection will be closed forcibly, after this number of
     seconds from the time Emacs sends the `LOGOUT' command.  It
     should not be too small value but too large value will be
     inconvenient too.  Perhaps the value 1.0 will be a good candidate
     but it might be worth trying some other values.

     Example server specification:

          (nnimap "mail.server.com"
                  (nnimap-logout-timeout 1.0))


* Menu:

* Splitting in IMAP::           Splitting mail with nnimap.
* Expiring in IMAP::            Expiring mail with nnimap.
* Editing IMAP ACLs::           Limiting/enabling other users access to a mailbox.
* Expunging mailboxes::         Equivalent of a "compress mailbox" button.
* A note on namespaces::        How to (not) use IMAP namespace in Gnus.
* Debugging IMAP::              What to do when things don't work.





File: gnus, Node: Splitting in IMAP, Next: Expiring in IMAP, Prev: IMAP, Up: IMAP

Splitting in IMAP
-----------------

Splitting is something Gnus users have loved and used for years, and now
the rest of the world is catching up.  Yeah, dream on, not many
IMAP servers have server side splitting and those that have
splitting seem to use some non-standard protocol.  This means that
IMAP support for Gnus has to do its own splitting.

And it does.

(Incidentally, people seem to have been dreaming on, and Sieve has
gaining a market share and is supported by several IMAP servers.
Fortunately, Gnus support it too, *Note Sieve Commands::.)

Here are the variables of interest:


`nnimap-split-crosspost'

     If non-`nil', do crossposting if several split methods match the
     mail.  If `nil', the first match in `nnimap-split-rule' found
     will be used.

     Nnmail equivalent: `nnmail-crosspost'.

`nnimap-split-inbox'

     A string or a list of strings that gives the name(s) of IMAP
     mailboxes to split from.  Defaults to `nil', which means that
     splitting is disabled!

          (setq nnimap-split-inbox
                '("INBOX" ("~/friend/Mail" . "lists/*") "lists.imap"))

     No nnmail equivalent.

`nnimap-split-rule'

     New mail found in `nnimap-split-inbox' will be split according to
     this variable.

     This variable contains a list of lists, where the first element
     in the sublist gives the name of the IMAP mailbox to move
     articles matching the regexp in the second element in the
     sublist.  Got that?  Neither did I, we need examples.

          (setq nnimap-split-rule
                '(("INBOX.nnimap"
                   "^Sender: owner-nnimap@vic20.globalcom.se")
                  ("INBOX.junk"    "^Subject:.*MAKE MONEY")
                  ("INBOX.private" "")))

     This will put all articles from the nnimap mailing list into
     mailbox INBOX.nnimap, all articles containing MAKE MONEY in the
     Subject: line into INBOX.junk and everything else in
     INBOX.private.

     The first string may contain `\\1' forms, like the ones used by
     replace-match to insert sub-expressions from the matched text.
     For instance:

          ("INBOX.lists.\\1"     "^Sender: owner-\\([a-z-]+\\)@")

     The first element can also be the symbol `junk' to indicate that
     matching messages should simply be deleted.  Use with care.

     The second element can also be a function.  In that case, it will
     be called with the first element of the rule as the argument, in
     a buffer containing the headers of the article.  It should return
     a non-`nil' value if it thinks that the mail belongs in that
     group.

     Nnmail users might recollect that the last regexp had to be empty
     to match all articles (like in the example above).  This is not
     required in nnimap.  Articles not matching any of the regexps
     will not be moved out of your inbox.  (This might affect
     performance if you keep lots of unread articles in your inbox,
     since the splitting code would go over them every time you fetch
     new mail.)

     These rules are processed from the beginning of the alist toward
     the end.  The first rule to make a match will "win", unless you
     have crossposting enabled.  In that case, all matching rules will
     win".

     This variable can also have a function as its value, the function
     will be called with the headers narrowed and should return a
     group where it thinks the article should be split to.  See
     `nnimap-split-fancy'.

     The splitting code tries to create mailboxes if it needs to.

     To allow for different split rules on different virtual servers,
     and even different split rules in different inboxes on the same
     server, the syntax of this variable have been extended along the
     lines of:

          (setq nnimap-split-rule
                '(("my1server"    (".*" (("ding"    "ding@gnus.org")
                                         ("junk"    "From:.*Simon"))))
                  ("my2server"    ("INBOX" nnimap-split-fancy))
                  ("my[34]server" (".*" (("private" "To:.*Simon")
                                         ("junk"    my-junk-func))))))

     The virtual server name is in fact a regexp, so that the same
     rules may apply to several servers.  In the example, the servers
     `my3server' and `my4server' both use the same rules.  Similarly,
     the inbox string is also a regexp.  The actual splitting rules
     are as before, either a function, or a list with group/regexp or
     group/function elements.

     Nnmail equivalent: `nnmail-split-methods'.

`nnimap-split-predicate'

     Mail matching this predicate in `nnimap-split-inbox' will be
     split, it is a string and the default is `UNSEEN UNDELETED'.

     This might be useful if you use another IMAP client to read mail in
     your inbox but would like Gnus to split all articles in the inbox
     regardless of readedness.  Then you might change this to
     `UNDELETED'.

`nnimap-split-fancy'

     It's possible to set `nnimap-split-rule' to `nnmail-split-fancy'
     if you want to use fancy splitting.  *Note Fancy Mail
     Splitting::.

     However, to be able to have different fancy split rules for
     nnmail and nnimap back ends you can set `nnimap-split-rule' to
     `nnimap-split-fancy' and define the nnimap specific fancy split
     rule in `nnimap-split-fancy'.

     Example:

          (setq nnimap-split-rule 'nnimap-split-fancy
                nnimap-split-fancy ...)

     Nnmail equivalent: `nnmail-split-fancy'.

`nnimap-split-download-body'

     Set to non-`nil' to download entire articles during splitting.
     This is generally not required, and will slow things down
     considerably.  You may need it if you want to use an advanced
     splitting function that analyzes the body to split the article.




File: gnus, Node: Expiring in IMAP, Next: Editing IMAP ACLs, Prev: Splitting in IMAP, Up: IMAP

Expiring in IMAP
----------------

Even though `nnimap' is not a proper `nnmail' derived back end, it
supports most features in regular expiring (*Note Expiring Mail::).
Unlike splitting in IMAP (*Note Splitting in IMAP::) it does not clone
the `nnmail' variables (i.e., creating NNIMAP-EXPIRY-WAIT) but reuse
the `nnmail' variables.  What follows below are the variables used by
the `nnimap' expiry process.

A note on how the expire mark is stored on the IMAP server is
appropriate here as well.  The expire mark is translated into a `imap'
client specific mark, `gnus-expire', and stored on the message.  This
means that likely only Gnus will understand and treat the
`gnus-expire' mark properly, although other clients may allow you to
view client specific flags on the message.  It also means that your
server must support permanent storage of client specific flags on
messages.  Most do, fortunately.

If expiring IMAP mail seems very slow, try setting the server variable
`nnimap-search-uids-not-since-is-evil'.


`nnmail-expiry-wait'
`nnmail-expiry-wait-function'

     These variables are fully supported.  The expire value can be a
     number, the symbol `immediate' or `never'.

`nnmail-expiry-target'

     This variable is supported, and internally implemented by calling
     the `nnmail' functions that handle this.  It contains an
     optimization that if the destination is a IMAP group on the same
     server, the article is copied instead of appended (that is,
     uploaded again).




File: gnus, Node: Editing IMAP ACLs, Next: Expunging mailboxes, Prev: Expiring in IMAP, Up: IMAP

Editing IMAP ACLs
-----------------

ACL stands for Access Control List.  ACLs are used in IMAP for
limiting (or enabling) other users access to your mail boxes.  Not all
IMAP servers support this, this function will give an error if it
doesn't.

To edit an ACL for a mailbox, type `G l'
(`gnus-group-edit-nnimap-acl') and you'll be presented with an ACL
editing window with detailed instructions.

Some possible uses:

   * Giving "anyone" the "lrs" rights (lookup, read, keep seen/unseen
     flags) on your mailing list mailboxes enables other users on the
     same server to follow the list without subscribing to it.
   * At least with the Cyrus server, you are required to give the user
     anyone" posting ("p") capabilities to have "plussing" work (that
     is, mail sent to user+mailbox@domain ending up in the IMAP
     mailbox INBOX.mailbox).



File: gnus, Node: Expunging mailboxes, Next: A note on namespaces, Prev: Editing IMAP ACLs, Up: IMAP

Expunging mailboxes
-------------------


If you're using the `never' setting of `nnimap-expunge-on-close', you
may want the option of expunging all deleted articles in a mailbox
manually.  This is exactly what `G x' does.

Currently there is no way of showing deleted articles, you can just
delete them.



File: gnus, Node: A note on namespaces, Next: Debugging IMAP, Prev: Expunging mailboxes, Up: IMAP

A note on namespaces
--------------------

The IMAP protocol has a concept called namespaces, described by the
following text in the RFC2060:

     5.1.2.  Mailbox Namespace Naming Convention

        By convention, the first hierarchical element of any mailbox name
        which begins with "#" identifies the "namespace" of the remainder of
        the name.  This makes it possible to disambiguate between different
        types of mailbox stores, each of which have their own namespaces.

           For example, implementations which offer access to USENET
           newsgroups MAY use the "#news" namespace to partition the USENET
           newsgroup namespace from that of other mailboxes.  Thus, the
           comp.mail.misc newsgroup would have an mailbox name of
           "#news.comp.mail.misc", and the name "comp.mail.misc" could refer
           to a different object (e.g. a user's private mailbox).

While there is nothing in this text that warrants concern for the IMAP
implementation in Gnus, some servers use namespace prefixes in a way
that does not work with how Gnus uses mailbox names.

Specifically, University of Washington's IMAP server uses mailbox
names like `#driver.mbx/read-mail' which are valid only in the CREATE
and APPEND commands.  After the mailbox is created (or a messages is
appended to a mailbox), it must be accessed without the namespace
prefix, i.e. `read-mail'.  Since Gnus do not make it possible for the
user to guarantee that user entered mailbox names will only be used
with the CREATE and APPEND commands, you should simply not use the
namespace prefixed mailbox names in Gnus.

See the UoW IMAPD documentation for the `#driver.*/' prefix for more
information on how to use the prefixes.  They are a power tool and
should be used only if you are sure what the effects are.



File: gnus, Node: Debugging IMAP, Prev: A note on namespaces, Up: IMAP

Debugging IMAP
--------------

IMAP is a complex protocol, more so than NNTP or POP3.  Implementation
bugs are not unlikely, and we do our best to fix them right away.  If
you encounter odd behavior, chances are that either the server or Gnus
is buggy.

If you are familiar with network protocols in general, you will
probably be able to extract some clues from the protocol dump of the
exchanges between Gnus and the server.  Even if you are not familiar
with network protocols, when you include the protocol dump in
IMAP-related bug reports you are helping us with data critical to
solving the problem.  Therefore, we strongly encourage you to include
the protocol dump when reporting IMAP bugs in Gnus.


Because the protocol dump, when enabled, generates lots of data, it is
disabled by default.  You can enable it by setting `imap-log' as
follows:

     (setq imap-log t)

This instructs the `imap.el' package to log any exchanges with the
server.  The log is stored in the buffer `*imap-log*'.  Look for error
messages, which sometimes are tagged with the keyword `BAD'---but when
submitting a bug, make sure to include all the data.



File: gnus, Node: Other Sources, Next: Combined Groups, Prev: IMAP, Up: Select Methods

Other Sources
=============

Gnus can do more than just read news or mail.  The methods described
below allow Gnus to view directories and files as if they were
newsgroups.

* Menu:

* Directory Groups::            You can read a directory as if it was a newsgroup.
* Anything Groups::             Dired?  Who needs dired?
* Document Groups::             Single files can be the basis of a group.
* SOUP::                        Reading SOUP packets "offline".
* Mail-To-News Gateways::       Posting articles via mail-to-news gateways.




File: gnus, Node: Directory Groups, Next: Anything Groups, Prev: Other Sources, Up: Other Sources

Directory Groups
----------------

If you have a directory that has lots of articles in separate files in
it, you might treat it as a newsgroup.  The files have to have
numerical names, of course.

This might be an opportune moment to mention `ange-ftp' (and its
successor `efs'), that most wonderful of all wonderful Emacs packages.
When I wrote `nndir', I didn't think much about it--a back end to read
directories.  Big deal.

`ange-ftp' changes that picture dramatically.  For instance, if you
enter the `ange-ftp' file name `/ftp.hpc.uh.edu:/pub/emacs/ding-list/'
as the directory name, `ange-ftp' or `efs' will actually allow you to
read this directory over at `sina' as a newsgroup.  Distributed news
ahoy!

`nndir' will use NOV files if they are present.

`nndir' is a "read-only" back end--you can't delete or expire articles
with this method.  You can use `nnmh' or `nnml' for whatever you use
`nndir' for, so you could switch to any of those methods if you feel
the need to have a non-read-only `nndir'.




File: gnus, Node: Anything Groups, Next: Document Groups, Prev: Directory Groups, Up: Other Sources

Anything Groups
---------------

From the `nndir' back end (which reads a single spool-like directory),
it's just a hop and a skip to `nneething', which pretends that any
arbitrary directory is a newsgroup.  Strange, but true.

When `nneething' is presented with a directory, it will scan this
directory and assign article numbers to each file.  When you enter
such a group, `nneething' must create "headers" that Gnus can use.
After all, Gnus is a newsreader, in case you're forgetting.
`nneething' does this in a two-step process.  First, it snoops each
file in question.  If the file looks like an article (i.e., the first
few lines look like headers), it will use this as the head.  If this
is just some arbitrary file without a head (e.g. a C source file),
`nneething' will cobble up a header out of thin air.  It will use file
ownership, name and date and do whatever it can with these elements.

All this should happen automatically for you, and you will be
presented with something that looks very much like a newsgroup.
Totally like a newsgroup, to be precise.  If you select an article, it
will be displayed in the article buffer, just as usual.

If you select a line that represents a directory, Gnus will pop you
into a new summary buffer for this `nneething' group.  And so on.  You
can traverse the entire disk this way, if you feel like, but remember
that Gnus is not dired, really, and does not intend to be, either.

There are two overall modes to this action--ephemeral or solid.  When
doing the ephemeral thing (i.e., `G D' from the group buffer), Gnus
will not store information on what files you have read, and what files
are new, and so on.  If you create a solid `nneething' group the
normal way with `G m', Gnus will store a mapping table between article
numbers and file names, and you can treat this group like any other
groups.  When you activate a solid `nneething' group, you will be told
how many unread articles it contains, etc., etc.

Some variables:

`nneething-map-file-directory'
     All the mapping files for solid `nneething' groups will be stored
     in this directory, which defaults to `~/.nneething/'.

`nneething-exclude-files'
     All files that match this regexp will be ignored.  Nice to use to
     exclude auto-save files and the like, which is what it does by
     default.

`nneething-include-files'
     Regexp saying what files to include in the group.  If this
     variable is non-`nil', only files matching this regexp will be
     included.

`nneething-map-file'
     Name of the map files.




File: gnus, Node: Document Groups, Next: SOUP, Prev: Anything Groups, Up: Other Sources

Document Groups
---------------

`nndoc' is a cute little thing that will let you read a single file as
a newsgroup.  Several files types are supported:

`babyl'
     The Babyl (Rmail) mail box.

`mbox'
     The standard Unix mbox file.

`mmdf'
     The MMDF mail box format.

`news'
     Several news articles appended into a file.

`rnews'
     The rnews batch transport format.

`nsmail'
     Netscape mail boxes.

`mime-parts'
     MIME multipart messages.

`standard-digest'
     The standard (RFC 1153) digest format.

`mime-digest'
     A MIME digest of messages.

`lanl-gov-announce'
     Announcement messages from LANL Gov Announce.

`rfc822-forward'
     A message forwarded according to RFC822.

`outlook'
     The Outlook mail box.

`oe-dbx'
     The Outlook Express dbx mail box.

`exim-bounce'
     A bounce message from the Exim MTA.

`forward'
     A message forwarded according to informal rules.

`rfc934'
     An RFC934-forwarded message.

`mailman'
     A mailman digest.

`clari-briefs'
     A digest of Clarinet brief news items.

`slack-digest'
     Non-standard digest format--matches most things, but does it
     badly.

`mail-in-mail'
     The last resort.

You can also use the special "file type" `guess', which means that
`nndoc' will try to guess what file type it is looking at.  `digest'
means that `nndoc' should guess what digest type the file is.

`nndoc' will not try to change the file or insert any extra headers
into it--it will simply, like, let you use the file as the basis for a
group.  And that's it.

If you have some old archived articles that you want to insert into
your new & spiffy Gnus mail back end, `nndoc' can probably help you
with that.  Say you have an old `RMAIL' file with mail that you now
want to split into your new `nnml' groups.  You look at that file
using `nndoc' (using the `G f' command in the group buffer (*Note
Foreign Groups::)), set the process mark on all the articles in the
buffer (`M P b', for instance), and then re-spool (`B r') using
`nnml'.  If all goes well, all the mail in the `RMAIL' file is now
also stored in lots of `nnml' directories, and you can delete that
pesky `RMAIL' file.  If you have the guts!

Virtual server variables:

`nndoc-article-type'
     This should be one of `mbox', `babyl', `digest',
     `news', `rnews', `mmdf', `forward', `rfc934',
     `rfc822-forward', `mime-parts', `standard-digest',
     `slack-digest', `clari-briefs', `nsmail', `outlook',
     `oe-dbx', `mailman', and `mail-in-mail' or `guess'.

`nndoc-post-type'
     This variable says whether Gnus is to consider the group a news
     group or a mail group.  There are two valid values: `mail' (the
     default) and `news'.

* Menu:

* Document Server Internals::   How to add your own document types.




