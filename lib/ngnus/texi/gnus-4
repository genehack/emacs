Info file: gnus,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus: (gnus).         The newsreader Gnus.
END-INFO-DIR-ENTRY








File: gnus, Node: Spam and Ham Processors, Next: Spam Package Configuration Examples, Prev: Detecting Spam in Groups, Up: Spam Package

Spam and Ham Processors
-----------------------

Spam and ham processors specify special actions to take when you exit
a group buffer.  Spam processors act on spam messages, and ham
processors on ham messages.  At present, the main role of these
processors is to update the dictionaries of dictionary-based spam back
ends such as Bogofilter (*Note Bogofilter::) and the Spam Statistics
package (*Note Spam Statistics Filtering::).

The spam and ham processors that apply to each group are determined by
the group's`spam-process' group parameter.  If this group
parameter is not defined, they are determined by the variable
`gnus-spam-process-newsgroups'.

Gnus learns from the spam you get.  You have to collect your spam in
one or more spam groups, and set or customize the variable
`spam-junk-mailgroups' as appropriate.  You can also declare groups to
contain spam by setting their group parameter `spam-contents' to
`gnus-group-spam-classification-spam', or by customizing the
corresponding variable `gnus-spam-newsgroup-contents'.  The
`spam-contents' group parameter and the `gnus-spam-newsgroup-contents'
variable can also be used to declare groups as *ham* groups if you set
their classification to `gnus-group-spam-classification-ham'.  If
groups are not classified by means of `spam-junk-mailgroups',
`spam-contents', or `gnus-spam-newsgroup-contents', they are
considered *unclassified*.  All groups are unclassified by default.

In spam groups, all messages are considered to be spam by default:
they get the `$' mark (`gnus-spam-mark') when you enter the group.  If
you have seen a message, had it marked as spam, then unmarked it, it
won't be marked as spam when you enter the group thereafter.  You can
disable that behavior, so all unread messages will get the `$' mark,
if you set the `spam-mark-only-unseen-as-spam' parameter to `nil'.
You should remove the `$' mark when you are in the group summary
buffer for every message that is not spam after all.  To remove the
`$' mark, you can use `M-u' to "unread" the article, or `d' for
declaring it read the non-spam way.  When you leave a group, all
spam-marked (`$') articles are sent to a spam processor which will
study them as spam samples.

Messages may also be deleted in various other ways, and unless
`ham-marks' group parameter gets overridden below, marks `R' and `r'
for default read or explicit delete, marks `X' and `K' for automatic
or explicit kills, as well as mark `Y' for low scores, are all
considered to be associated with articles which are not spam.  This
assumption might be false, in particular if you use kill files or
score files as means for detecting genuine spam, you should then
adjust the `ham-marks' group parameter.

 -- Variable: ham-marks
     You can customize this group or topic parameter to be the list of
     marks you want to consider ham.  By default, the list contains
     the deleted, read, killed, kill-filed, and low-score marks (the
     idea is that these articles have been read, but are not spam).
     It can be useful to also include the tick mark in the ham marks.
     It is not recommended to make the unread mark a ham mark, because
     it normally indicates a lack of classification.  But you can do
     it, and we'll be happy for you.

 -- Variable: spam-marks
     You can customize this group or topic parameter to be the list of
     marks you want to consider spam.  By default, the list contains
     only the spam mark.  It is not recommended to change that, but
     you can if you really want to.

When you leave *any* group, regardless of its `spam-contents'
classification, all spam-marked articles are sent to a spam processor,
which will study these as spam samples.  If you explicit kill a lot,
you might sometimes end up with articles marked `K' which you never
saw, and which might accidentally contain spam.  Best is to make sure
that real spam is marked with `$', and nothing else.

When you leave a *spam* group, all spam-marked articles are marked as
expired after processing with the spam processor.  This is not done
for *unclassified* or *ham* groups.  Also, any *ham* articles in a
spam group will be moved to a location determined by either the
`ham-process-destination' group parameter or a match in the
`gnus-ham-process-destinations' variable, which is a list of regular
expressions matched with group names (it's easiest to customize this
variable with `M-x customize-variable RET
gnus-ham-process-destinations').  Each group name list is a standard
Lisp list, if you prefer to customize the variable manually.  If the
`ham-process-destination' parameter is not set, ham articles are left
in place.  If the `spam-mark-ham-unread-before-move-from-spam-group'
parameter is set, the ham articles are marked as unread before being
moved.

If ham can not be moved--because of a read-only back end such as
NNTP, for example, it will be copied.

Note that you can use multiples destinations per group or regular
expression!  This enables you to send your ham to a regular mail group
and to a *ham training* group.

When you leave a *ham* group, all ham-marked articles are sent to a
ham processor, which will study these as non-spam samples.

By default the variable `spam-process-ham-in-spam-groups' is `nil'.
Set it to `t' if you want ham found in spam groups to be processed.
Normally this is not done, you are expected instead to send your ham
to a ham group and process it there.

By default the variable `spam-process-ham-in-nonham-groups' is `nil'.
Set it to `t' if you want ham found in non-ham (spam or unclassified)
groups to be processed.  Normally this is not done, you are expected
instead to send your ham to a ham group and process it there.

When you leave a *ham* or *unclassified* group, all *spam* articles
are moved to a location determined by either the
`spam-process-destination' group parameter or a match in the
`gnus-spam-process-destinations' variable, which is a list of regular
expressions matched with group names (it's easiest to customize this
variable with `M-x customize-variable RET
gnus-spam-process-destinations').  Each group name list is a standard
Lisp list, if you prefer to customize the variable manually.  If the
`spam-process-destination' parameter is not set, the spam articles are
only expired.  The group name is fully qualified, meaning that if you
see `nntp:servername' before the group name in the group buffer then
you need it here as well.

If spam can not be moved--because of a read-only back end such as
NNTP, for example, it will be copied.

Note that you can use multiples destinations per group or regular
expression!  This enables you to send your spam to multiple *spam
training* groups.

The problem with processing ham and spam is that Gnus doesn't track
this processing by default.  Enable the `spam-log-to-registry'
variable so `spam.el' will use `gnus-registry.el' to track what
articles have been processed, and avoid processing articles multiple
times.  Keep in mind that if you limit the number of registry entries,
this won't work as well as it does without a limit.

Set this variable if you want only unseen articles in spam groups to
be marked as spam.  By default, it is set.  If you set it to
`nil', unread articles will also be marked as spam.

Set this variable if you want ham to be unmarked before it is moved
out of the spam group.  This is very useful when you use something
like the tick mark `!' to mark ham--the article will be placed in your
`ham-process-destination', unmarked as if it came fresh from the mail
server.

When autodetecting spam, this variable tells `spam.el' whether only
unseen articles or all unread articles should be checked for spam.  It
is recommended that you leave it off.



File: gnus, Node: Spam Package Configuration Examples, Next: Spam Back Ends, Prev: Spam and Ham Processors, Up: Spam Package

Spam Package Configuration Examples
-----------------------------------


Ted's setup
...........

From Ted Zlatanov <tzz@lifelogs.com>.
     ;; for `gnus-registry-split-fancy-with-parent' and spam autodetection
     ;; see `gnus-registry.el' for more information
     (gnus-registry-initialize)
     (spam-initialize)

     (setq
      spam-log-to-registry t     ; for spam autodetection
      spam-use-BBDB t
      spam-use-regex-headers t   ; catch X-Spam-Flag (SpamAssassin)
      ;; all groups with `spam' in the name contain spam
      gnus-spam-newsgroup-contents
       '(("spam" gnus-group-spam-classification-spam))
      ;; see documentation for these
      spam-move-spam-nonspam-groups-only nil
      spam-mark-only-unseen-as-spam t
      spam-mark-ham-unread-before-move-from-spam-group t
      nnimap-split-rule 'nnimap-split-fancy
      ;; understand what this does before you copy it to your own setup!
      nnimap-split-fancy '(|
                           ;; trace references to parents and put in their group
                           (: gnus-registry-split-fancy-with-parent)
                           ;; this will catch server-side SpamAssassin tags
                           (: spam-split 'spam-use-regex-headers)
                           (any "ding" "ding")
                           ;; note that spam by default will go to `spam'
                           (: spam-split)
                           ;; default mailbox
                           "mail"))

     ;; my parameters, set with G p

     ;; all nnml groups, and all nnimap groups except
     ;; `nnimap+mail.lifelogs.com:train' and
     ;; `nnimap+mail.lifelogs.com:spam': any spam goes to nnimap training,
     ;; because it must have been detected manually

     ((spam-process-destination . "nnimap+mail.lifelogs.com:train"))

     ;; all NNTP groups
     ;; autodetect spam with the blacklist and ham with the BBDB
     ((spam-autodetect-methods spam-use-blacklist spam-use-BBDB)
     ;; send all spam to the training group
      (spam-process-destination . "nnimap+mail.lifelogs.com:train"))

     ;; only some NNTP groups, where I want to autodetect spam
     ((spam-autodetect . t))

     ;; my nnimap `nnimap+mail.lifelogs.com:spam' group

     ;; this is a spam group
     ((spam-contents gnus-group-spam-classification-spam)

      ;; any spam (which happens when I enter for all unseen messages,
      ;; because of the `gnus-spam-newsgroup-contents' setting above), goes to
      ;; `nnimap+mail.lifelogs.com:train' unless I mark it as ham

      (spam-process-destination "nnimap+mail.lifelogs.com:train")

      ;; any ham goes to my `nnimap+mail.lifelogs.com:mail' folder, but
      ;; also to my `nnimap+mail.lifelogs.com:trainham' folder for training

      (ham-process-destination "nnimap+mail.lifelogs.com:mail"
                               "nnimap+mail.lifelogs.com:trainham")
      ;; in this group, only `!' marks are ham
      (ham-marks
       (gnus-ticked-mark))
      ;; remembers senders in the blacklist on the way out--this is
      ;; definitely not needed, it just makes me feel better
      (spam-process (gnus-group-spam-exit-processor-blacklist)))

     ;; Later, on the IMAP server I use the `train' group for training
     ;; SpamAssassin to recognize spam, and the `trainham' group fora
     ;; recognizing ham--but Gnus has nothing to do with it.



Using `spam.el' on an IMAP server with a statistical filter on the server
.........................................................................
From Reiner Steib <reiner.steib@gmx.de>.

My provider has set up bogofilter (in combination with DCC) on
the mail server (IMAP).  Recognized spam goes to
`spam.detected', the rest goes through the normal filter rules,
i.e. to `some.folder' or to `INBOX'.  Training on false
positives or negatives is done by copying or moving the article to
`training.ham' or `training.spam' respectively.  A cron job on
the server feeds those to bogofilter with the suitable ham or spam
options and deletes them from the `training.ham' and
`training.spam' folders.

With the following entries in `gnus-parameters', `spam.el' does most
of the job for me:

        ("nnimap:spam\\.detected"
         (gnus-article-sort-functions '(gnus-article-sort-by-chars))
         (ham-process-destination "nnimap:INBOX" "nnimap:training.ham")
         (spam-contents gnus-group-spam-classification-spam))
        ("nnimap:\\(INBOX\\|other-folders\\)"
         (spam-process-destination . "nnimap:training.spam")
         (spam-contents gnus-group-spam-classification-ham))


   * The Spam folder:

     In the folder `spam.detected', I have to check for false
     positives (i.e. legitimate mails, that were wrongly judged as
     spam by bogofilter or DCC).

     Because of the `gnus-group-spam-classification-spam' entry, all
     messages are marked as spam (with `$').  When I find a false
     positive, I mark the message with some other ham mark
     (`ham-marks', *Note Spam and Ham Processors::).  On group exit,
     those messages are copied to both groups, `INBOX' (where I want
     to have the article) and `training.ham' (for training bogofilter)
     and deleted from the `spam.detected' folder.

     The `gnus-article-sort-by-chars' entry simplifies detection of
     false positives for me.  I receive lots of worms (sweN, ...),
     that all have a similar size.  Grouping them by size (i.e. chars)
     makes finding other false positives easier.  (Of course worms
     aren't spam (UCE, UBE) strictly speaking.  Anyhow, bogofilter is
     an excellent tool for filtering those unwanted mails for me.)

   * Ham folders:

     In my ham folders, I just hit `S x'
     (`gnus-summary-mark-as-spam') whenever I see an unrecognized spam
     mail (false negative).  On group exit, those messages are moved to
     `training.spam'.


Reporting spam articles in Gmane groups with `spam-report.el'
.............................................................

From Reiner Steib <reiner.steib@gmx.de>.

With following entry in `gnus-parameters', `S x'
(`gnus-summary-mark-as-spam') marks articles in `gmane.*' groups as
spam and reports the to Gmane at group exit:

        ("^gmane\\."
         (spam-process (gnus-group-spam-exit-processor-report-gmane)))

Additionally, I use `(setq spam-report-gmane-use-article-number nil)'
because I don't read the groups directly from news.gmane.org, but
through my local news server (leafnode).  I.e. the article numbers are
not the same as on news.gmane.org, thus `spam-report.el' has to check
the `X-Report-Spam' header to find the correct number.



File: gnus, Node: Spam Back Ends, Next: Extending the Spam package, Prev: Spam Package Configuration Examples, Up: Spam Package

Spam Back Ends
--------------

The spam package offers a variety of back ends for detecting spam.
Each back end defines a set of methods for detecting spam (*Note
Filtering Incoming Mail::, *Note Detecting Spam in Groups::), and a
pair of spam and ham processors (*Note Spam and Ham Processors::).

* Menu:

* Blacklists and Whitelists::
* BBDB Whitelists::
* Gmane Spam Reporting::
* Anti-spam Hashcash Payments::
* Blackholes::
* Regular Expressions Header Matching::
* Bogofilter::
* SpamAssassin back end::
* ifile spam filtering::
* Spam Statistics Filtering::
* SpamOracle::



File: gnus, Node: Blacklists and Whitelists, Next: BBDB Whitelists, Prev: Spam Back Ends, Up: Spam Back Ends

Blacklists and Whitelists
.........................

 -- Variable: spam-use-blacklist

     Set this variable to `t' if you want to use blacklists when
     splitting incoming mail.  Messages whose senders are in the
     blacklist will be sent to the `spam-split-group'.  This is an
     explicit filter, meaning that it acts only on mail senders
     *declared* to be spammers.


 -- Variable: spam-use-whitelist

     Set this variable to `t' if you want to use whitelists when
     splitting incoming mail.  Messages whose senders are not in the
     whitelist will be sent to the next spam-split rule.  This is an
     explicit filter, meaning that unless someone is in the whitelist,
     their messages are not assumed to be spam or ham.


 -- Variable: spam-use-whitelist-exclusive

     Set this variable to `t' if you want to use whitelists as an
     implicit filter, meaning that every message will be considered
     spam unless the sender is in the whitelist.  Use with care.


 -- Variable: gnus-group-spam-exit-processor-blacklist

     Add this symbol to a group's `spam-process' parameter by
     customizing the group parameters or the
     `gnus-spam-process-newsgroups' variable.  When this symbol is
     added to a group's `spam-process' parameter, the senders of
     spam-marked articles will be added to the blacklist.

     *WARNING*

     Instead of the obsolete
     `gnus-group-spam-exit-processor-blacklist', it is recommended
     that you use `(spam spam-use-blacklist)'.  Everything will work
     the same way, we promise.


 -- Variable: gnus-group-ham-exit-processor-whitelist

     Add this symbol to a group's `spam-process' parameter by
     customizing the group parameters or the
     `gnus-spam-process-newsgroups' variable.  When this symbol is
     added to a group's `spam-process' parameter, the senders of
     ham-marked articles in *ham* groups will be added to the
     whitelist.

     *WARNING*

     Instead of the obsolete
     `gnus-group-ham-exit-processor-whitelist', it is recommended that
     you use `(ham spam-use-whitelist)'.  Everything will work the
     same way, we promise.


Blacklists are lists of regular expressions matching addresses you
consider to be spam senders.  For instance, to block mail from any
sender at `vmadmin.com', you can put `vmadmin.com' in your blacklist.
You start out with an empty blacklist.  Blacklist entries use the
Emacs regular expression syntax.

Conversely, whitelists tell Gnus what addresses are considered
legitimate.  All messages from whitelisted addresses are considered
non-spam.  Also see *Note BBDB Whitelists::.  Whitelist entries use
the Emacs regular expression syntax.

The blacklist and whitelist file locations can be customized with the
`spam-directory' variable (`~/News/spam' by default), or
the `spam-whitelist' and `spam-blacklist' variables
directly.  The whitelist and blacklist files will by default be in the
`spam-directory' directory, named `whitelist' and
`blacklist' respectively.



File: gnus, Node: BBDB Whitelists, Next: Gmane Spam Reporting, Prev: Blacklists and Whitelists, Up: Spam Back Ends

BBDB Whitelists
...............

 -- Variable: spam-use-BBDB

     Analogous to `spam-use-whitelist' (*Note Blacklists and
     Whitelists::), but uses the BBDB as the source of whitelisted
     addresses, without regular expressions.  You must have the BBDB
     loaded for `spam-use-BBDB' to work properly.  Messages whose
     senders are not in the BBDB will be sent to the next spam-split
     rule.  This is an explicit filter, meaning that unless someone is
     in the BBDB, their messages are not assumed to be spam or ham.


 -- Variable: spam-use-BBDB-exclusive

     Set this variable to `t' if you want to use the BBDB as an
     implicit filter, meaning that every message will be considered
     spam unless the sender is in the BBDB.  Use with care.  Only
     sender addresses in the BBDB will be allowed through; all others
     will be classified as spammers.

     While `spam-use-BBDB-exclusive' *can* be used as an alias for
     `spam-use-BBDB' as far as `spam.el' is concerned, it is *not* a
     separate back end.  If you set `spam-use-BBDB-exclusive' to t,
     *all* your BBDB splitting will be exclusive.


 -- Variable: gnus-group-ham-exit-processor-BBDB

     Add this symbol to a group's `spam-process' parameter by
     customizing the group parameters or the
     `gnus-spam-process-newsgroups' variable.  When this symbol is
     added to a group's `spam-process' parameter, the senders of
     ham-marked articles in *ham* groups will be added to the BBDB.

     *WARNING*

     Instead of the obsolete `gnus-group-ham-exit-processor-BBDB', it
     is recommended that you use `(ham spam-use-BBDB)'.  Everything
     will work the same way, we promise.




File: gnus, Node: Gmane Spam Reporting, Next: Anti-spam Hashcash Payments, Prev: BBDB Whitelists, Up: Spam Back Ends

Gmane Spam Reporting
....................

 -- Variable: gnus-group-spam-exit-processor-report-gmane

     Add this symbol to a group's `spam-process' parameter by
     customizing the group parameters or the
     `gnus-spam-process-newsgroups' variable.  When this symbol is
     added to a group's `spam-process' parameter, the spam-marked
     articles groups will be reported to the Gmane administrators via
     a HTTP request.

     Gmane can be found at `http://gmane.org'.

     *WARNING*

     Instead of the obsolete
     `gnus-group-spam-exit-processor-report-gmane', it is recommended
     that you use `(spam spam-use-gmane)'.  Everything will work the
     same way, we promise.


 -- Variable: spam-report-gmane-use-article-number

     This variable is `t' by default.  Set it to `nil' if you are
     running your own news server, for instance, and the local article
     numbers don't correspond to the Gmane article numbers.  When
     `spam-report-gmane-use-article-number' is `nil',
     `spam-report.el' will fetch the number from the article headers.


 -- Variable: spam-report-user-mail-address

     Mail address exposed in the User-Agent spam reports to Gmane.  It
     allows the Gmane administrators to contact you in case of
     misreports.  The default is `user-mail-address'.




File: gnus, Node: Anti-spam Hashcash Payments, Next: Blackholes, Prev: Gmane Spam Reporting, Up: Spam Back Ends

Anti-spam Hashcash Payments
...........................

 -- Variable: spam-use-hashcash

     Similar to `spam-use-whitelist' (*Note Blacklists and
     Whitelists::), but uses hashcash tokens for whitelisting messages
     instead of the sender address.  Messages without a hashcash
     payment token will be sent to the next spam-split rule.  This is
     an explicit filter, meaning that unless a hashcash token is
     found, the messages are not assumed to be spam or ham.




File: gnus, Node: Blackholes, Next: Regular Expressions Header Matching, Prev: Anti-spam Hashcash Payments, Up: Spam Back Ends

Blackholes
..........

 -- Variable: spam-use-blackholes

     This option is disabled by default.  You can let Gnus consult the
     blackhole-type distributed spam processing systems (DCC, for
     instance) when you set this option.  The variable
     `spam-blackhole-servers' holds the list of blackhole servers Gnus
     will consult.  The current list is fairly comprehensive, but make
     sure to let us know if it contains outdated servers.

     The blackhole check uses the `dig.el' package, but you can tell
     `spam.el' to use `dns.el' instead for better performance if you
     set `spam-use-dig' to `nil'.  It is not recommended at this time
     to set `spam-use-dig' to `nil' despite the possible performance
     improvements, because some users may be unable to use it, but you
     can try it and see if it works for you.


 -- Variable: spam-blackhole-servers

     The list of servers to consult for blackhole checks.


 -- Variable: spam-blackhole-good-server-regex

     A regular expression for IPs that should not be checked against
     the blackhole server list.  When set to `nil', it has no effect.


 -- Variable: spam-use-dig

     Use the `dig.el' package instead of the `dns.el' package.  The
     default setting of `t' is recommended.


Blackhole checks are done only on incoming mail.  There is no spam or
ham processor for blackholes.



File: gnus, Node: Regular Expressions Header Matching, Next: Bogofilter, Prev: Blackholes, Up: Spam Back Ends

Regular Expressions Header Matching
...................................

 -- Variable: spam-use-regex-headers

     This option is disabled by default.  You can let Gnus check the
     message headers against lists of regular expressions when you set
     this option.  The variables `spam-regex-headers-spam' and
     `spam-regex-headers-ham' hold the list of regular expressions.
     Gnus will check against the message headers to determine if the
     message is spam or ham, respectively.


 -- Variable: spam-regex-headers-spam

     The list of regular expressions that, when matched in the headers
     of the message, positively identify it as spam.


 -- Variable: spam-regex-headers-ham

     The list of regular expressions that, when matched in the headers
     of the message, positively identify it as ham.


Regular expression header checks are done only on incoming mail.
There is no specific spam or ham processor for regular expressions.



File: gnus, Node: Bogofilter, Next: SpamAssassin back end, Prev: Regular Expressions Header Matching, Up: Spam Back Ends

Bogofilter
..........

 -- Variable: spam-use-bogofilter

     Set this variable if you want `spam-split' to use Eric Raymond's
     speedy Bogofilter.

     With a minimum of care for associating the `$' mark for spam
     articles only, Bogofilter training all gets fairly automatic.
     You should do this until you get a few hundreds of articles in
     each category, spam or not.  The command `S t' in summary mode,
     either for debugging or for curiosity, shows the *spamicity*
     score of the current article (between 0.0 and 1.0).

     Bogofilter determines if a message is spam based on a specific
     threshold.  That threshold can be customized, consult the
     Bogofilter documentation.

     If the `bogofilter' executable is not in your path, Bogofilter
     processing will be turned off.

     You should not enable this if you use
     `spam-use-bogofilter-headers'.


`M s t'
`S t'
     Get the Bogofilter spamicity score (`spam-bogofilter-score').

 -- Variable: spam-use-bogofilter-headers

     Set this variable if you want `spam-split' to use Eric Raymond's
     speedy Bogofilter, looking only at the message headers.  It works
     similarly to `spam-use-bogofilter', but the `X-Bogosity' header
     must be in the message already.  Normally you would do this with
     a procmail recipe or something similar; consult the Bogofilter
     installation documents for details.

     You should not enable this if you use `spam-use-bogofilter'.


 -- Variable: gnus-group-spam-exit-processor-bogofilter
     Add this symbol to a group's `spam-process' parameter by
     customizing the group parameters or the
     `gnus-spam-process-newsgroups' variable.  When this symbol is
     added to a group's `spam-process' parameter, spam-marked articles
     will be added to the Bogofilter spam database.

     *WARNING*

     Instead of the obsolete
     `gnus-group-spam-exit-processor-bogofilter', it is recommended
     that you use `(spam spam-use-bogofilter)'.  Everything will work
     the same way, we promise.

 -- Variable: gnus-group-ham-exit-processor-bogofilter
     Add this symbol to a group's `spam-process' parameter by
     customizing the group parameters or the
     `gnus-spam-process-newsgroups' variable.  When this symbol is
     added to a group's `spam-process' parameter, the ham-marked
     articles in *ham* groups will be added to the Bogofilter database
     of non-spam messages.

     *WARNING*

     Instead of the obsolete
     `gnus-group-ham-exit-processor-bogofilter', it is recommended
     that you use `(ham spam-use-bogofilter)'.  Everything will work
     the same way, we promise.

 -- Variable: spam-bogofilter-database-directory

     This is the directory where Bogofilter will store its databases.
     It is not specified by default, so Bogofilter will use its own
     default database directory.


The Bogofilter mail classifier is similar to `ifile' in intent and
purpose.  A ham and a spam processor are provided, plus the
`spam-use-bogofilter' and `spam-use-bogofilter-headers' variables to
indicate to spam-split that Bogofilter should either be used, or has
already been used on the article.  The 0.9.2.1 version of Bogofilter
was used to test this functionality.



File: gnus, Node: SpamAssassin back end, Next: ifile spam filtering, Prev: Bogofilter, Up: Spam Back Ends

SpamAssassin back end
.....................

 -- Variable: spam-use-spamassassin

     Set this variable if you want `spam-split' to use SpamAssassin.

     SpamAssassin assigns a score to each article based on a set of
     rules and tests, including a Bayesian filter.  The Bayesian
     filter can be trained by associating the `$' mark for spam
     articles.  The spam score can be viewed by using the command `S
     t' in summary mode.

     If you set this variable, each article will be processed by
     SpamAssassin when `spam-split' is called.  If your mail is
     preprocessed by SpamAssassin, and you want to just use the
     SpamAssassin headers, set `spam-use-spamassassin-headers'
     instead.

     You should not enable this if you use
     `spam-use-spamassassin-headers'.


 -- Variable: spam-use-spamassassin-headers

     Set this variable if your mail is preprocessed by SpamAssassin
     and want `spam-split' to split based on the SpamAssassin headers.

     You should not enable this if you use `spam-use-spamassassin'.


 -- Variable: spam-spamassassin-program

     This variable points to the SpamAssassin executable.  If you have
     `spamd' running, you can set this variable to the `spamc'
     executable for faster processing.  See the SpamAssassin
     documentation for more information on `spamd'/`spamc'.


SpamAssassin is a powerful and flexible spam filter that uses a wide
variety of tests to identify spam.  A ham and a spam processors are
provided, plus the `spam-use-spamassassin' and
`spam-use-spamassassin-headers' variables to indicate to spam-split
that SpamAssassin should be either used, or has already been used on
the article.  The 2.63 version of SpamAssassin was used to test this
functionality.



File: gnus, Node: ifile spam filtering, Next: Spam Statistics Filtering, Prev: SpamAssassin back end, Up: Spam Back Ends

ifile spam filtering
....................

 -- Variable: spam-use-ifile

     Enable this variable if you want `spam-split' to use `ifile', a
     statistical analyzer similar to Bogofilter.


 -- Variable: spam-ifile-all-categories

     Enable this variable if you want `spam-use-ifile' to give you all
     the ifile categories, not just spam/non-spam.  If you use this,
     make sure you train ifile as described in its documentation.


 -- Variable: spam-ifile-spam-category

     This is the category of spam messages as far as ifile is
     concerned.  The actual string used is irrelevant, but you
     probably want to leave the default value of `spam'.

 -- Variable: spam-ifile-database

     This is the filename for the ifile database.  It is not specified
     by default, so ifile will use its own default database name.


The ifile mail classifier is similar to Bogofilter in intent and
purpose.  A ham and a spam processor are provided, plus the
`spam-use-ifile' variable to indicate to spam-split that ifile should
be used.  The 1.2.1 version of ifile was used to test this
functionality.



File: gnus, Node: Spam Statistics Filtering, Next: SpamOracle, Prev: ifile spam filtering, Up: Spam Back Ends

Spam Statistics Filtering
.........................

This back end uses the Spam Statistics Emacs Lisp package to perform
statistics-based filtering (*Note Spam Statistics Package::).  Before
using this, you may want to perform some additional steps to
initialize your Spam Statistics dictionary.  *Note Creating a
spam-stat dictionary::.

 -- Variable: spam-use-stat


 -- Variable: gnus-group-spam-exit-processor-stat
     Add this symbol to a group's `spam-process' parameter by
     customizing the group parameters or the
     `gnus-spam-process-newsgroups' variable.  When this symbol is
     added to a group's `spam-process' parameter, the spam-marked
     articles will be added to the spam-stat database of spam
     messages.

     *WARNING*

     Instead of the obsolete `gnus-group-spam-exit-processor-stat', it
     is recommended that you use `(spam spam-use-stat)'.  Everything
     will work the same way, we promise.

 -- Variable: gnus-group-ham-exit-processor-stat
     Add this symbol to a group's `spam-process' parameter by
     customizing the group parameters or the
     `gnus-spam-process-newsgroups' variable.  When this symbol is
     added to a group's `spam-process' parameter, the ham-marked
     articles in *ham* groups will be added to the spam-stat database
     of non-spam messages.

     *WARNING*

     Instead of the obsolete `gnus-group-ham-exit-processor-stat', it
     is recommended that you use `(ham spam-use-stat)'.  Everything
     will work the same way, we promise.

This enables `spam.el' to cooperate with `spam-stat.el'.
`spam-stat.el' provides an internal (Lisp-only) spam database,
which unlike ifile or Bogofilter does not require external programs.
A spam and a ham processor, and the `spam-use-stat' variable for
`spam-split' are provided.



File: gnus, Node: SpamOracle, Prev: Spam Statistics Filtering, Up: Spam Back Ends

Using SpamOracle with Gnus
..........................

An easy way to filter out spam is to use SpamOracle.  SpamOracle is an
statistical mail filtering tool written by Xavier Leroy and needs to
be installed separately.

There are several ways to use SpamOracle with Gnus.  In all cases,
your mail is piped through SpamOracle in its *mark* mode.  SpamOracle
will then enter an `X-Spam' header indicating whether it regards the
mail as a spam mail or not.

One possibility is to run SpamOracle as a `:prescript' from the *Note
Mail Source Specifiers::, (*Note SpamAssassin::).  This method has the
advantage that the user can see the *X-Spam* headers.

The easiest method is to make `spam.el' (*Note Spam Package::) call
SpamOracle.

To enable SpamOracle usage by `spam.el', set the variable
`spam-use-spamoracle' to `t' and configure the `nnmail-split-fancy' or
`nnimap-split-fancy'.  *Note Spam Package::.  In this example the
`INBOX' of an nnimap server is filtered using SpamOracle.  Mails
recognized as spam mails will be moved to `spam-split-group', `Junk'
in this case.  Ham messages stay in `INBOX':

     (setq spam-use-spamoracle t
           spam-split-group "Junk"
           nnimap-split-inbox '("INBOX")
           nnimap-split-rule 'nnimap-split-fancy
           nnimap-split-fancy '(| (: spam-split) "INBOX"))

 -- Variable: spam-use-spamoracle
     Set to `t' if you want Gnus to enable spam filtering using
     SpamOracle.

 -- Variable: spam-spamoracle-binary
     Gnus uses the SpamOracle binary called `spamoracle' found in the
     user's PATH.  Using the variable `spam-spamoracle-binary', this
     can be customized.

 -- Variable: spam-spamoracle-database
     By default, SpamOracle uses the file `~/.spamoracle.db' as a database to
     store its analysis.  This is controlled by the variable
     `spam-spamoracle-database' which defaults to `nil'.  That means
     the default SpamOracle database will be used.  In case you want your
     database to live somewhere special, set
     `spam-spamoracle-database' to this path.

SpamOracle employs a statistical algorithm to determine whether a
message is spam or ham.  In order to get good results, meaning few
false hits or misses, SpamOracle needs training.  SpamOracle learns
the characteristics of your spam mails.  Using the *add* mode
(training mode) one has to feed good (ham) and spam mails to
SpamOracle.  This can be done by pressing `|' in the Summary
buffer and pipe the mail to a SpamOracle process or using
`spam.el''s spam- and ham-processors, which is much more
convenient.  For a detailed description of spam- and ham-processors,
*Note Spam Package::.

 -- Variable: gnus-group-spam-exit-processor-spamoracle
     Add this symbol to a group's `spam-process' parameter by
     customizing the group parameter or the
     `gnus-spam-process-newsgroups' variable.  When this symbol is
     added to a group's `spam-process' parameter, spam-marked articles
     will be sent to SpamOracle as spam samples.

     *WARNING*

     Instead of the obsolete
     `gnus-group-spam-exit-processor-spamoracle', it is recommended
     that you use `(spam spam-use-spamoracle)'.  Everything will work
     the same way, we promise.

 -- Variable: gnus-group-ham-exit-processor-spamoracle
     Add this symbol to a group's `spam-process' parameter by
     customizing the group parameter or the
     `gnus-spam-process-newsgroups' variable.  When this symbol is
     added to a group's `spam-process' parameter, the ham-marked
     articles in *ham* groups will be sent to the SpamOracle as
     samples of ham messages.

     *WARNING*

     Instead of the obsolete
     `gnus-group-ham-exit-processor-spamoracle', it is recommended
     that you use `(ham spam-use-spamoracle)'.  Everything will work
     the same way, we promise.

*Example:* These are the Group Parameters of a group that has been
classified as a ham group, meaning that it should only contain ham
messages.  ((spam-contents gnus-group-spam-classification-ham)
(spam-process ((ham spam-use-spamoracle) (spam spam-use-spamoracle))))
For this group the `spam-use-spamoracle' is installed for both ham and
spam processing.  If the group contains spam message (e.g. because
SpamOracle has not had enough sample messages yet) and the user marks
some messages as spam messages, these messages will be processed by
SpamOracle.  The processor sends the messages to SpamOracle as new
samples for spam.



File: gnus, Node: Extending the Spam package, Next: Spam Statistics Package, Prev: Spam Back Ends, Up: Spam Package

Extending the Spam package
--------------------------

Say you want to add a new back end called blackbox.  For filtering
incoming mail, provide the following:


  1. Code

          (defvar spam-use-blackbox nil
            "True if blackbox should be used.")

     Write `spam-check-blackbox' if Blackbox can check incoming mail.

     Write `spam-blackbox-register-routine' and
     `spam-blackbox-unregister-routine' using the bogofilter
     register/unregister routines as a start, or other
     restister/unregister routines more appropriate to Blackbox, if
     Blackbox can register/unregister spam and ham.

  2. Functionality

     The `spam-check-blackbox' function should return `nil' or
     `spam-split-group', observing the other conventions.  See the
     existing `spam-check-*' functions for examples of what you can
     do, and stick to the template unless you fully understand the
     reasons why you aren't.


For processing spam and ham messages, provide the following:


  1. Code

     Note you don't have to provide a spam or a ham processor.  Only
     provide them if Blackbox supports spam or ham processing.

     Also, ham and spam processors are being phased out as single
     variables.  Instead the form `(spam spam-use-blackbox)' or `(ham
     spam-use-blackbox)' is favored.  For now, spam/ham processor
     variables are still around but they won't be for long.

          (defvar gnus-group-spam-exit-processor-blackbox "blackbox-spam"
            "The Blackbox summary exit spam processor.
          Only applicable to spam groups.")

          (defvar gnus-group-ham-exit-processor-blackbox "blackbox-ham"
            "The whitelist summary exit ham processor.
          Only applicable to non-spam (unclassified and ham) groups.")


  2. Gnus parameters

     Add (const :tag "Spam: Blackbox" (spam spam-use-blackbox)) (const
     :tag "Ham: Blackbox" (ham spam-use-blackbox)) to the
     `spam-process' group parameter in `gnus.el'.  Make sure you do it
     twice, once for the parameter and once for the variable
     customization.

     Add
          (variable-item spam-use-blackbox)
     to the `spam-autodetect-methods' group parameter in
     `gnus.el' if Blackbox can check incoming mail for spam contents.

     Finally, use the appropriate `spam-install-*-backend' function in
     `spam.el'.  Here are the available functions.



       1. `spam-install-backend-alias'

          This function will simply install an alias for a back end
          that does everything like the original back end.  It is
          currently only used to make `spam-use-BBDB-exclusive' act
          like `spam-use-BBDB'.

       2. `spam-install-nocheck-backend'

          This function installs a back end that has no check
          function, but can register/unregister ham or spam.  The
          `spam-use-gmane' back end is such a back end.

       3. `spam-install-checkonly-backend'

          This function will install a back end that can only check
          incoming mail for spam contents.  It can't register or
          unregister messages.  `spam-use-blackholes' and
          `spam-use-hashcash' are such back ends.

       4. `spam-install-statistical-checkonly-backend'

          This function installs a statistical back end (one which
          requires the full body of a message to check it) that can
          only check incoming mail for contents.
          `spam-use-regex-body' is such a filter.

       5. `spam-install-statistical-backend'

          This function install a statistical back end with incoming
          checks and registration/unregistration routines.
          `spam-use-bogofilter' is set up this way.

       6. `spam-install-backend'

          This is the most normal back end installation, where a back
          end that can check and register/unregister messages is set
          up without statistical abilities.  The `spam-use-BBDB' is
          such a back end.

       7. `spam-install-mover-backend'

          Mover back ends are internal to `spam.el' and specifically
          move articles around when the summary is exited.  You will
          very probably never install such a back end.




File: gnus, Node: Spam Statistics Package, Prev: Extending the Spam package, Up: Spam Package

Spam Statistics Package
-----------------------

Paul Graham has written an excellent essay about spam filtering using
statistics: A Plan for Spam (http://www.paulgraham.com/spam.html).  In
it he describes the inherent deficiency of rule-based filtering as
used by SpamAssassin, for example: Somebody has to write the rules,
and everybody else has to install these rules.  You are always late.
It would be much better, he argues, to filter mail based on whether it
somehow resembles spam or non-spam.  One way to measure this is word
distribution.  He then goes on to describe a solution that checks
whether a new mail resembles any of your other spam mails or not.

The basic idea is this: Create a two collections of your mail, one
with spam, one with non-spam.  Count how often each word appears in
either collection, weight this by the total number of mails in the
collections, and store this information in a dictionary.  For every
word in a new mail, determine its probability to belong to a spam or a
non-spam mail.  Use the 15 most conspicuous words, compute the total
probability of the mail being spam.  If this probability is higher
than a certain threshold, the mail is considered to be spam.

The Spam Statistics package adds support to Gnus for this kind of
filtering.  It can be used as one of the back ends of the Spam package
(*Note Spam Package::), or by itself.

Before using the Spam Statistics package, you need to set it up.
First, you need two collections of your mail, one with spam, one with
non-spam.  Then you need to create a dictionary using these two
collections, and save it.  And last but not least, you need to use
this dictionary in your fancy mail splitting rules.

* Menu:

* Creating a spam-stat dictionary::
* Splitting mail using spam-stat::
* Low-level interface to the spam-stat dictionary::



File: gnus, Node: Creating a spam-stat dictionary, Next: Splitting mail using spam-stat, Prev: Spam Statistics Package, Up: Spam Statistics Package

Creating a spam-stat dictionary
...............................

Before you can begin to filter spam based on statistics, you must
create these statistics based on two mail collections, one with spam,
one with non-spam.  These statistics are then stored in a dictionary
for later use.  In order for these statistics to be meaningful, you
need several hundred emails in both collections.

Gnus currently supports only the nnml back end for automated
dictionary creation.  The nnml back end stores all mails in a
directory, one file per mail.  Use the following:

 -- Function: spam-stat-process-spam-directory
     Create spam statistics for every file in this directory.  Every
     file is treated as one spam mail.

 -- Function: spam-stat-process-non-spam-directory
     Create non-spam statistics for every file in this directory.
     Every file is treated as one non-spam mail.

Usually you would call `spam-stat-process-spam-directory' on a
directory such as `~/Mail/mail/spam' (this usually corresponds to
the group `nnml:mail.spam'), and you would call
`spam-stat-process-non-spam-directory' on a directory such as
`~/Mail/mail/misc' (this usually corresponds to the group
`nnml:mail.misc').

When you are using IMAP, you won't have the mails available
locally, so that will not work.  One solution is to use the Gnus Agent
to cache the articles.  Then you can use directories such as
`"~/News/agent/nnimap/mail.yourisp.com/personal_spam"' for
`spam-stat-process-spam-directory'.  *Note Agent as Cache::.

 -- Variable: spam-stat
     This variable holds the hash-table with all the statistics--the
     dictionary we have been talking about.  For every word in either
     collection, this hash-table stores a vector describing how often
     the word appeared in spam and often it appeared in non-spam
     mails.

If you want to regenerate the statistics from scratch, you need to
reset the dictionary.

 -- Function: spam-stat-reset
     Reset the `spam-stat' hash-table, deleting all the statistics.

When you are done, you must save the dictionary.  The dictionary may
be rather large.  If you will not update the dictionary incrementally
(instead, you will recreate it once a month, for example), then you
can reduce the size of the dictionary by deleting all words that did
not appear often enough or that do not clearly belong to only spam or
only non-spam mails.

 -- Function: spam-stat-reduce-size
     Reduce the size of the dictionary.  Use this only if you do not
     want to update the dictionary incrementally.

 -- Function: spam-stat-save
     Save the dictionary.

 -- Variable: spam-stat-file
     The filename used to store the dictionary.  This defaults to
     `~/.spam-stat.el'.



File: gnus, Node: Splitting mail using spam-stat, Next: Low-level interface to the spam-stat dictionary, Prev: Creating a spam-stat dictionary, Up: Spam Statistics Package

Splitting mail using spam-stat
..............................

This section describes how to use the Spam statistics
*independently* of the *Note Spam Package::.

First, add the following to your `~/.gnus.el' file:

     (require 'spam-stat)
     (spam-stat-load)

This will load the necessary Gnus code, and the dictionary you
created.

Next, you need to adapt your fancy splitting rules: You need to
determine how to use `spam-stat'.  The following examples are for the
nnml back end.  Using the nnimap back end works just as well.  Just
use `nnimap-split-fancy' instead of `nnmail-split-fancy'.

In the simplest case, you only have two groups, `mail.misc' and
`mail.spam'.  The following expression says that mail is either
spam or it should go into `mail.misc'.  If it is spam, then
`spam-stat-split-fancy' will return `mail.spam'.

     (setq nnmail-split-fancy
           `(| (: spam-stat-split-fancy)
               "mail.misc"))

 -- Variable: spam-stat-split-fancy-spam-group
     The group to use for spam.  Default is `mail.spam'.

If you also filter mail with specific subjects into other groups, use
the following expression.  Only mails not matching the regular
expression are considered potential spam.

     (setq nnmail-split-fancy
           `(| ("Subject" "\\bspam-stat\\b" "mail.emacs")
               (: spam-stat-split-fancy)
               "mail.misc"))

If you want to filter for spam first, then you must be careful when
creating the dictionary.  Note that `spam-stat-split-fancy' must
consider both mails in `mail.emacs' and in `mail.misc' as non-spam,
therefore both should be in your collection of non-spam mails, when
creating the dictionary!

     (setq nnmail-split-fancy
           `(| (: spam-stat-split-fancy)
               ("Subject" "\\bspam-stat\\b" "mail.emacs")
               "mail.misc"))

You can combine this with traditional filtering.  Here, we move all
HTML-only mails into the `mail.spam.filtered' group.  Note that since
`spam-stat-split-fancy' will never see them, the mails in
`mail.spam.filtered' should be neither in your collection of spam
mails, nor in your collection of non-spam mails, when creating the
dictionary!

     (setq nnmail-split-fancy
           `(| ("Content-Type" "text/html" "mail.spam.filtered")
               (: spam-stat-split-fancy)
               ("Subject" "\\bspam-stat\\b" "mail.emacs")
               "mail.misc"))




File: gnus, Node: Low-level interface to the spam-stat dictionary, Prev: Splitting mail using spam-stat, Up: Spam Statistics Package

Low-level interface to the spam-stat dictionary
...............................................

The main interface to using `spam-stat', are the following functions:

 -- Function: spam-stat-buffer-is-spam
     Called in a buffer, that buffer is considered to be a new spam
     mail.  Use this for new mail that has not been processed before.

 -- Function: spam-stat-buffer-is-no-spam
     Called in a buffer, that buffer is considered to be a new
     non-spam mail.  Use this for new mail that has not been processed
     before.

 -- Function: spam-stat-buffer-change-to-spam
     Called in a buffer, that buffer is no longer considered to be
     normal mail but spam.  Use this to change the status of a mail
     that has already been processed as non-spam.

 -- Function: spam-stat-buffer-change-to-non-spam
     Called in a buffer, that buffer is no longer considered to be
     spam but normal mail.  Use this to change the status of a mail
     that has already been processed as spam.

 -- Function: spam-stat-save
     Save the hash table to the file.  The filename used is stored in
     the variable `spam-stat-file'.

 -- Function: spam-stat-load
     Load the hash table from a file.  The filename used is stored in
     the variable `spam-stat-file'.

 -- Function: spam-stat-score-word
     Return the spam score for a word.

 -- Function: spam-stat-score-buffer
     Return the spam score for a buffer.

 -- Function: spam-stat-split-fancy
     Use this function for fancy mail splitting.  Add the rule `(:
     spam-stat-split-fancy)' to `nnmail-split-fancy'

Make sure you load the dictionary before using it.  This requires the
following in your `~/.gnus.el' file:

     (require 'spam-stat)
     (spam-stat-load)

Typical test will involve calls to the following functions:

     Reset: (setq spam-stat (make-hash-table :test 'equal))
     Learn spam: (spam-stat-process-spam-directory "~/Mail/mail/spam")
     Learn non-spam: (spam-stat-process-non-spam-directory "~/Mail/mail/misc")
     Save table: (spam-stat-save)
     File size: (nth 7 (file-attributes spam-stat-file))
     Number of words: (hash-table-count spam-stat)
     Test spam: (spam-stat-test-directory "~/Mail/mail/spam")
     Test non-spam: (spam-stat-test-directory "~/Mail/mail/misc")
     Reduce table size: (spam-stat-reduce-size)
     Save table: (spam-stat-save)
     File size: (nth 7 (file-attributes spam-stat-file))
     Number of words: (hash-table-count spam-stat)
     Test spam: (spam-stat-test-directory "~/Mail/mail/spam")
     Test non-spam: (spam-stat-test-directory "~/Mail/mail/misc")

Here is how you would create your dictionary:

     Reset: (setq spam-stat (make-hash-table :test 'equal))
     Learn spam: (spam-stat-process-spam-directory "~/Mail/mail/spam")
     Learn non-spam: (spam-stat-process-non-spam-directory "~/Mail/mail/misc")
     Repeat for any other non-spam group you need...
     Reduce table size: (spam-stat-reduce-size)
     Save table: (spam-stat-save)



File: gnus, Node: Other modes, Next: Various Various, Prev: Spam Package, Up: Various

Interaction with other modes
============================


Dired
-----

`gnus-dired-minor-mode' provides some useful functions for dired
buffers.  It is enabled with
     (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

`C-c C-m C-a'
     Send dired's marked files as an attachment (`gnus-dired-attach').
     You will be prompted for a message buffer.

`C-c C-m C-l'
     Visit a file according to the appropriate mailcap entry
     (`gnus-dired-find-file-mailcap').  With prefix, open file in a
     new buffer.

`C-c C-m C-p'
     Print file according to the mailcap entry (`gnus-dired-print').
     If there is no print command, print in a PostScript image.



File: gnus, Node: Various Various, Prev: Other modes, Up: Various

Various Various
===============


`gnus-home-directory'
     All Gnus file and directory variables will be initialized from
     this variable, which defaults to `~/'.

`gnus-directory'
     Most Gnus storage file and directory variables will be
     initialized from this variable, which defaults to the `SAVEDIR'
     environment variable, or `~/News/' if that variable isn't set.

     Note that Gnus is mostly loaded when the `~/.gnus.el' file is read.
     This means that other directory variables that are initialized from this
     variable won't be set properly if you set this variable in
     `~/.gnus.el'.  Set this variable in `.emacs' instead.

`gnus-default-directory'
     Not related to the above variable at all--this variable says what
     the default directory of all Gnus buffers should be.  If you
     issue commands like `C-x C-f', the prompt you'll get starts in
     the current buffer's default directory.  If this variable is
     `nil' (which is the default), the default directory will be the
     default directory of the buffer you were in when you started
     Gnus.

`gnus-verbose'
     This variable is an integer between zero and ten.  The higher the
     value, the more messages will be displayed.  If this variable is
     zero, Gnus will never flash any messages, if it is seven (which
     is the default), most important messages will be shown, and if it
     is ten, Gnus won't ever shut up, but will flash so many messages
     it will make your head swim.

`gnus-verbose-backends'
     This variable works the same way as `gnus-verbose', but it
     applies to the Gnus back ends instead of Gnus proper.

`gnus-add-timestamp-to-message'
     This variable controls whether to add timestamps to messages that are
     controlled by `gnus-verbose' and `gnus-verbose-backends' and
     are issued.  The default value is `nil' which means never to add
     timestamp.  If it is `log', add timestamps to only the messages
     that go into the `*Messages*' buffer (in XEmacs, it is the
     ` *Message-Log*' buffer).  If it is neither `nil' nor
     `log', add timestamps not only to log messages but also to the ones
     displayed in the echo area.

`nnheader-max-head-length'
     When the back ends read straight heads of articles, they all try to read
     as little as possible.  This variable (default 8192) specifies
     the absolute max length the back ends will try to read before giving up
     on finding a separator line between the head and the body.  If this
     variable is `nil', there is no upper read bound.  If it is
     `t', the back ends won't try to read the articles piece by piece,
     but read the entire articles.  This makes sense with some versions of
     `ange-ftp' or `efs'.

`nnheader-head-chop-length'
     This variable (default 2048) says how big a piece of each article
     to read when doing the operation described above.

`nnheader-file-name-translation-alist'
     This is an alist that says how to translate characters in file
     names.  For instance, if `:' is invalid as a file character in
     file names on your system (you OS/2 user you), you could say
     something like:

          (setq nnheader-file-name-translation-alist
                '((?: . ?_)))

     In fact, this is the default value for this variable on OS/2 and
     MS Windows (phooey) systems.

`gnus-hidden-properties'
     This is a list of properties to use to hide "invisible" text.  It
     is `(invisible t intangible t)' by default on most systems, which
     makes invisible text invisible and intangible.

`gnus-parse-headers-hook'
     A hook called before parsing headers.  It can be used, for
     instance, to gather statistics on the headers fetched, or perhaps
     you'd like to prune some headers.  I don't see why you'd want
     that, though.

`gnus-shell-command-separator'
     String used to separate two shell commands.  The default is `;'.

`gnus-invalid-group-regexp'

     Regexp to match "invalid" group names when querying user for a
     group name.  The default value catches some *really* invalid
     group names who could possibly mess up Gnus internally (like
     allowing `:' in a group name, which is normally used to delimit
     method and group).

     IMAP users might want to allow `/' in group names though.





File: gnus, Node: The End, Next: Appendices, Prev: Various, Up: Top

The End
*******

Well, that's the manual--you can get on with your life now.  Keep in
touch.  Say hello to your cats from me.

My *ghod*---I just can't stand goodbyes.  Sniffle.

Ol' Charles Reznikoff said it pretty well, so I leave the floor to
him:

     *Te Deum*


     Not because of victories
     I sing,
     having none,
     but for the common sunshine,
     the breeze,
     the largess of the spring.


     Not for victory
     but for the day's work done
     as well as I was able;
     not for a seat upon the dais
     but at the common table.




File: gnus, Node: Appendices, Next: GNU Free Documentation License, Prev: The End, Up: Top

Appendices
**********

* Menu:

* XEmacs::                      Requirements for installing under XEmacs.
* History::                     How Gnus got where it is today.
* On Writing Manuals::          Why this is not a beginner's guide.
* Terminology::                 We use really difficult, like, words here.
* Customization::               Tailoring Gnus to your needs.
* Troubleshooting::             What you might try if things do not work.
* Gnus Reference Guide::        Rilly, rilly technical stuff.
* Emacs for Heathens::          A short introduction to Emacsian terms.
* Frequently Asked Questions::  The Gnus FAQ




File: gnus, Node: XEmacs, Next: History, Prev: Appendices, Up: Appendices

XEmacs
======

XEmacs is distributed as a collection of packages.  You should install
whatever packages the Gnus XEmacs package requires.  The current
requirements are `gnus', `mail-lib', `xemacs-base',
`eterm', `sh-script', `net-utils', `os-utils',
`dired', `mh-e', `sieve', `ps-print', `W3',
`pgg', `mailcrypt', `ecrypto', and `sasl'.




File: gnus, Node: History, Next: The Manual, Prev: XEmacs, Up: Appendices

History
=======

GNUS was written by Masanobu UMEDA.  When autumn crept up in '94, Lars
Magne Ingebrigtsen grew bored and decided to rewrite Gnus.

If you want to investigate the person responsible for this outrage,
you can point your (feh!) web browser to `http://quimby.gnus.org/'.
This is also the primary distribution point for the new and spiffy
versions of Gnus, and is known as The Site That Destroys Newsrcs And
Drives People Mad.

During the first extended alpha period of development, the new Gnus
was called "(ding) Gnus".  "(ding)" is, of course, short for "ding is
not Gnus", which is a total and utter lie, but who cares?  (Besides,
the "Gnus" in this abbreviation should probably be pronounced "news"
as UMEDA intended, which makes it a more appropriate name, don't you
think?)

In any case, after spending all that energy on coming up with a new
and spunky name, we decided that the name was *too* spunky, so we
renamed it back again to "Gnus".  But in mixed case.  "Gnus" vs.
GNUS".  New vs. old.

* Menu:

* Gnus Versions::               What Gnus versions have been released.
* Other Gnus Versions::         Other Gnus versions that also have been released.
* Why?::                        What's the point of Gnus?
* Compatibility::               Just how compatible is Gnus with GNUS?
* Conformity::                  Gnus tries to conform to all standards.
* Emacsen::                     Gnus can be run on a few modern Emacsen.
* Gnus Development::            How Gnus is developed.
* Contributors::                Oodles of people.
* New Features::                Pointers to some of the new stuff in Gnus.




File: gnus, Node: Gnus Versions, Next: Other Gnus Versions, Prev: History, Up: History

Gnus Versions
-------------

The first "proper" release of Gnus 5 was done in November 1995 when it
was included in the Emacs 19.30 distribution (132 (ding) Gnus releases
plus 15 Gnus 5.0 releases).

In May 1996 the next Gnus generation (aka. "September Gnus" (after 99
releases)) was released under the name "Gnus 5.2" (40 releases).

On July 28th 1996 work on Red Gnus was begun, and it was released on
January 25th 1997 (after 84 releases) as "Gnus 5.4" (67 releases).

On September 13th 1997, Quassia Gnus was started and lasted 37
releases.  It was released as "Gnus 5.6" on March 8th 1998 (46
releases).

Gnus 5.6 begat Pterodactyl Gnus on August 29th 1998 and was released
as "Gnus 5.8" (after 99 releases and a CVS repository) on December 3rd
1999.

On the 26th of October 2000, Oort Gnus was begun and was released as
Gnus 5.10 on May 1st 2003 (24 releases).

On the January 4th 2004, No Gnus was begun.

If you happen upon a version of Gnus that has a prefixed name --
(ding) Gnus", "September Gnus", "Red Gnus", "Quassia Gnus",
Pterodactyl Gnus", "Oort Gnus", "No Gnus" -- don't panic.  Don't let
it know that you're frightened.  Back away.  Slowly.  Whatever you do,
don't run.  Walk away, calmly, until you're out of its reach.  Find a
proper released version of Gnus and snuggle up to that instead.




File: gnus, Node: Other Gnus Versions, Next: Why?, Prev: Gnus Versions, Up: History

Other Gnus Versions
-------------------

In addition to the versions of Gnus which have had their releases
coordinated by Lars, one major development has been Semi-gnus from
Japan.  It's based on a library called SEMI, which provides
MIME capabilities.

These Gnusae are based mainly on Gnus 5.6 and Pterodactyl Gnus.
Collectively, they are called "Semi-gnus", and different strains are
called T-gnus, ET-gnus, Nana-gnus and Chaos.  These provide powerful
MIME and multilingualization things, especially important for Japanese
users.




File: gnus, Node: Why?, Next: Compatibility, Prev: Other Gnus Versions, Up: History

Why?
----

What's the point of Gnus?

I want to provide a "rad", "happening", "way cool" and "hep"
newsreader, that lets you do anything you can think of.  That was my
original motivation, but while working on Gnus, it has become clear to
me that this generation of newsreaders really belong in the stone age.
Newsreaders haven't developed much since the infancy of the net.  If
the volume continues to rise with the current rate of increase, all
current newsreaders will be pretty much useless.  How do you deal with
newsgroups that have thousands of new articles each day?  How do you
keep track of millions of people who post?

Gnus offers no real solutions to these questions, but I would very
much like to see Gnus being used as a testing ground for new methods
of reading and fetching news.  Expanding on UMEDA-san's wise decision
to separate the newsreader from the back ends, Gnus now offers a
simple interface for anybody who wants to write new back ends for
fetching mail and news from different sources.  I have added hooks for
customizations everywhere I could imagine it being useful.  By doing
so, I'm inviting every one of you to explore and invent.

May Gnus never be complete.  `C-u 100 M-x all-hail-emacs' and
`C-u 100 M-x all-hail-xemacs'.




File: gnus, Node: Compatibility, Next: Conformity, Prev: Why?, Up: History

Compatibility
-------------

Gnus was designed to be fully compatible with GNUS.  Almost all key
bindings have been kept.  More key bindings have been added, of
course, but only in one or two obscure cases have old bindings been
changed.

Our motto is:
                        In a cloud bones of steel.

All commands have kept their names.  Some internal functions have
changed their names.

The `gnus-uu' package has changed drastically.  *Note Decoding
Articles::.

One major compatibility question is the presence of several summary
buffers.  All variables relevant while reading a group are
buffer-local to the summary buffer they belong in.  Although many
important variables have their values copied into their global
counterparts whenever a command is executed in the summary buffer,
this change might lead to incorrect values being used unless you are
careful.

All code that relies on knowledge of GNUS internals will probably
fail.  To take two examples: Sorting `gnus-newsrc-alist' (or changing
it in any way, as a matter of fact) is strictly verboten.  Gnus
maintains a hash table that points to the entries in this alist (which
speeds up many functions), and changing the alist directly will lead
to peculiar results.

Old hilit19 code does not work at all.  In fact, you should probably
remove all hilit code from all Gnus hooks (`gnus-group-prepare-hook'
and `gnus-summary-prepare-hook').  Gnus provides various integrated
functions for highlighting.  These are faster and more accurate.  To
make life easier for everybody, Gnus will by default remove all hilit
calls from all hilit hooks.  Uncleanliness!  Away!

Packages like `expire-kill' will no longer work.  As a matter of fact,
you should probably remove all old GNUS packages (and other code) when
you start using Gnus.  More likely than not, Gnus already does what
you have written code to make GNUS do.  (Snicker.)

Even though old methods of doing things are still supported, only the
new methods are documented in this manual.  If you detect a new method
of doing something while reading this manual, that does not mean you
have to stop doing it the old way.

Gnus understands all GNUS startup files.

Overall, a casual user who hasn't written much code that depends on
GNUS internals should suffer no problems.  If problems occur, please
let me know by issuing that magic command `M-x gnus-bug'.

If you are in the habit of sending bug reports *very* often, you may
find the helpful help buffer annoying after a while.  If so, set
`gnus-bug-create-help-buffer' to `nil' to avoid having it pop up at
you.




File: gnus, Node: Conformity, Next: Emacsen, Prev: Compatibility, Up: History

Conformity
----------

No rebels without a clue here, ma'am.  We conform to all standards
known to (wo)man.  Except for those standards and/or conventions we
disagree with, of course.


*RFC (2)822*
     There are no known breaches of this standard.

*RFC 1036*
     There are no known breaches of this standard, either.

*Son-of-RFC 1036*
     We do have some breaches to this one.


     *X-Newsreader*
     *User-Agent*
          These are considered to be "vanity headers", while I
          consider them to be consumer information.  After seeing so
          many badly formatted articles coming from `tin' and
          `Netscape' I know not to use either of those for posting
          articles.  I would not have known that if it wasn't for the
          `X-Newsreader' header.

*USEFOR*
     USEFOR is an IETF working group writing a successor to RFC 1036,
     based on Son-of-RFC 1036.  They have produced a number of drafts
     proposing various changes to the format of news articles.  The
     Gnus towers will look into implementing the changes when the
     draft is accepted as an RFC.

*MIME - RFC 2045-2049 etc*
     All the various MIME RFCs are supported.

*Disposition Notifications - RFC 2298*
     Message Mode is able to request notifications from the receiver.

*PGP - RFC 1991 and RFC 2440*
     RFC 1991 is the original PGP message specification, published as
     an informational RFC.  RFC 2440 was the follow-up, now called
     Open PGP, and put on the Standards Track.  Both document a
     non-MIME aware PGP format.  Gnus supports both encoding (signing
     and encryption) and decoding (verification and decryption).

*PGP/MIME - RFC 2015/3156*
     RFC 2015 (superseded by 3156 which references RFC 2440 instead of
     RFC 1991) describes the MIME-wrapping around the RFC 1991/2440
     format.  Gnus supports both encoding and decoding.

*S/MIME - RFC 2633*
     RFC 2633 describes the S/MIME format.

*IMAP - RFC 1730/2060, RFC 2195, RFC 2086, RFC 2359, RFC 2595, RFC 1731*
     RFC 1730 is IMAP version 4, updated somewhat by RFC 2060 (IMAP 4
     revision 1).  RFC 2195 describes CRAM-MD5 authentication for
     IMAP.  RFC 2086 describes access control lists (ACLs) for IMAP.
     RFC 2359 describes a IMAP protocol enhancement.  RFC 2595
     describes the proper TLS integration (STARTTLS) with IMAP.  RFC
     1731 describes the GSSAPI/Kerberos4 mechanisms for IMAP.


If you ever notice Gnus acting non-compliant with regards to the texts
mentioned above, don't hesitate to drop a note to Gnus Towers and let
us know.




File: gnus, Node: Emacsen, Next: Gnus Development, Prev: Conformity, Up: History

Emacsen
-------

This version of Gnus should work on:


   * Emacs 21.1 and up.

   * XEmacs 21.4 and up.


This Gnus version will absolutely not work on any Emacsen older than
that.  Not reliably, at least.  Older versions of Gnus may work on
older Emacs versions.  Particularly, Gnus 5.10.8 should also work on
Emacs 20.7 and XEmacs 21.1.




File: gnus, Node: Gnus Development, Next: Contributors, Prev: Emacsen, Up: History

Gnus Development
----------------

Gnus is developed in a two-phased cycle.  The first phase involves
much discussion on the development mailing list `ding@gnus.org', where
people propose changes and new features, post patches and new back
ends.  This phase is called the "alpha" phase, since the Gnusae
released in this phase are "alpha releases", or (perhaps more commonly
in other circles) "snapshots".  During this phase, Gnus is assumed to
be unstable and should not be used by casual users.  Gnus alpha
releases have names like "Oort Gnus" and "No Gnus".  *Note Gnus
Versions::.

After futzing around for 10-100 alpha releases, Gnus is declared
frozen", and only bug fixes are applied.  Gnus loses the prefix, and
is called things like "Gnus 5.10.1" instead.  Normal people are
supposed to be able to use these, and these are mostly discussed on
the `gnu.emacs.gnus' newsgroup.  This newgroup is mirrored to the
mailing list `info-gnus-english@gnu.org' which is carried on Gmane as
`gmane.emacs.gnus.user'.  These releases are finally integrated in
Emacs.

Some variable defaults differ between alpha Gnusae and released Gnusae,
in particular, `mail-source-delete-incoming'.  This is to prevent
lossage of mail if an alpha release hiccups while handling the mail.
*Note Mail Source Customization::.

The division of discussion between the ding mailing list and the Gnus
newsgroup is not purely based on publicity concerns.  It's true that
having people write about the horrible things that an alpha Gnus
release can do (sometimes) in a public forum may scare people off, but
more importantly, talking about new experimental features that have
been introduced may confuse casual users.  New features are frequently
introduced, fiddled with, and judged to be found wanting, and then
either discarded or totally rewritten.  People reading the mailing
list usually keep up with these rapid changes, while people on the
newsgroup can't be assumed to do so.

So if you have problems with or questions about the alpha versions,
direct those to the ding mailing list `ding@gnus.org'.  This list is
also available on Gmane as `gmane.emacs.gnus.general'.

Some variable defaults differ between alpha Gnusae and released Gnusae,
in particular, `mail-source-delete-incoming'.  This is to prevent
lossage of mail if an alpha release hiccups while handling the mail.
*Note Mail Source Customization::.



File: gnus, Node: Contributors, Next: New Features, Prev: Gnus Development, Up: History

Contributors
------------

The new Gnus version couldn't have been done without the help of all
the people on the (ding) mailing list.  Every day for over a year I
have gotten billions of nice bug reports from them, filling me with
joy, every single one of them.  Smooches.  The people on the list have
been tried beyond endurance, what with my "oh, that's a neat idea
<type type>, yup, I'll release it right away <ship off> no wait, that
doesn't work at all <type type>, yup, I'll ship that one off right
away <ship off> no, wait, that absolutely does not work" policy for
releases.  Micro$oft--bah.  Amateurs.  I'm *much* worse.  (Or is that
worser"? "much worser"?  "worsest"?)

I would like to take this opportunity to thank the Academy for...
oops, wrong show.


   * Masanobu UMEDA---the writer of the original GNUS.

   * Shenghuo Zhu--uudecode.el, mm-uu.el, rfc1843.el, webmail.el,
     nnwarchive and many, many other things connected with MIME and
     other types of en/decoding, as well as general bug fixing, new
     functionality and stuff.

   * Per Abrahamsen--custom, scoring, highlighting and SOUP code (as
     well as numerous other things).

   * Luis Fernandes--design and graphics.

   * Joe Reiss--creator of the smiley faces.

   * Justin Sheehy--the FAQ maintainer.

   * Erik Naggum--help, ideas, support, code and stuff.

   * Wes Hardaker---`gnus-picon.el' and the manual section on
     "picons" (*Note Picons::).

   * Kim-Minh Kaplan--further work on the picon code.

   * Brad Miller---`gnus-gl.el' and the GroupLens manual section.

   * Sudish Joseph--innumerable bug fixes.

   * Ilja Weis---`gnus-topic.el'.

   * Steven L. Baur--lots and lots and lots of bugs detections and
     fixes.

   * Vladimir Alexiev--the refcard and reference booklets.

   * Felix Lee & Jamie Zawinski--I stole some pieces from the XGnus
     distribution by Felix Lee and JWZ.

   * Scott Byer---`nnfolder.el' enhancements & rewrite.

   * Peter Mutsaers--orphan article scoring code.

   * Ken Raeburn--POP mail support.

   * Hallvard B Furuseth--various bits and pieces, especially dealing with
     .newsrc files.

   * Brian Edmonds---`gnus-bbdb.el'.

   * David Moore--rewrite of `nnvirtual.el' and many other things.

   * Kevin Davidson--came up with the name "ding", so blame him.

   * Franc,ois Pinard--many, many interesting and thorough bug
     reports, as well as autoconf support.


This manual was proof-read by Adrian Aichner, with Ricardo Nassif,
Mark Borges, and Jost Krieger proof-reading parts of the manual.

The following people have contributed many patches and suggestions:

Christopher Davis, Andrew Eskilsson, Kai Grossjohann, Kevin Greiner,
Jesper Harder, Paul Jarc, Simon Josefsson, David Kaagedal, Richard
Pieri, Fabrice Popineau, Daniel Quinlan, Michael Shields, Reiner
Steib, Jason L. Tibbitts, III, Jack Vinson, Katsumi Yamaoka, and
Teodor Zlatanov.

Also thanks to the following for patches and stuff:

Jari Aalto, Adrian Aichner, Vladimir Alexiev, Russ Allbery, Peter
Arius, Matt Armstrong, Marc Auslander, Miles Bader, Alexei
V. Barantsev, Frank Bennett, Robert Bihlmeyer, Chris Bone, Mark
Borges, Mark Boyns, Lance A. Brown, Rob Browning, Kees de Bruin,
Martin Buchholz, Joe Buehler, Kevin Buhr, Alastair Burt, Joao Cachopo,
Zlatko Calusic, Massimo Campostrini, Castor, David Charlap, Dan
Christensen, Kevin Christian, Jae-you Chung, James H. Cloos, Jr.,
Laura Conrad, Michael R. Cook, Glenn Coombs, Andrew J. Cosgriff, Neil
Crellin, Frank D. Cringle, Geoffrey T. Dairiki, Andre Deparade, Ulrik
Dickow, Dave Disser, Rui-Tao Dong, Joev Dubach, Michael Welsh Duggan,
Dave Edmondson, Paul Eggert, Mark W. Eichin, Karl Eichwalder, Enami
Tsugutomo, Michael Ernst, Luc Van Eycken, Sam Falkner, Nelson Jose dos
Santos Ferreira, Sigbjorn Finne, Sven Fischer, Paul Fisher, Decklin
Foster, Gary D. Foster, Paul Franklin, Guy Geens, Arne Georg
Gleditsch, David S. Goldberg, Michelangelo Grigni, Dale Hagglund,
D. Hall, Magnus Hammerin, Kenichi Handa, Raja R. Harinath, Yoshiki
Hayashi, P. E. Jareth Hein, Hisashige Kenji, Scott Hofmann, Tassilo
Horn, Marc Horowitz, Gunnar Horrigmo, Richard Hoskins, Brad Howes,
Miguel de Icaza, Franc,ois Felix Ingrand, Tatsuya Ichikawa, Ishikawa
Ichiro, Lee Iverson, Iwamuro Motonori, Rajappa Iyer, Andreas Jaeger,
Adam P. Jenkins, Randell Jesup, Fred Johansen, Gareth Jones, Greg
Klanderman, Karl Kleinpaste, Michael Klingbeil, Peter Skov Knudsen,
Shuhei Kobayashi, Petr Konecny, Koseki Yoshinori, Thor Kristoffersen,
Jens Lautenbacher, Martin Larose, Seokchan Lee, Joerg Lenneis, Carsten
Leonhardt, James LewisMoss, Christian Limpach, Markus Linnala, Dave
Love, Mike McEwan, Tonny Madsen, Shlomo Mahlab, Nat Makarevitch,
Istvan Marko, David Martin, Jason R. Mastaler, Gordon Matzigkeit, Timo
Metzemakers, Richard Mlynarik, Lantz Moore, Morioka Tomohiko, Erik
Toubro Nielsen, Hrvoje Niksic, Andy Norman, Fred Oberhauser,
C. R. Oldham, Alexandre Oliva, Ken Olstad, Masaharu Onishi, Hideki
Ono, Ettore Perazzoli, William Perry, Stephen Peters, Jens-Ulrik
Holger Petersen, Ulrich Pfeifer, Matt Pharr, Andy Piper, John McClary
Prevost, Bill Pringlemeir, Mike Pullen, Jim Radford, Colin Rafferty,
Lasse Rasinen, Lars Balker Rasmussen, Joe Reiss, Renaud Rioboo, Roland
B. Roberts, Bart Robinson, Christian von Roques, Markus Rost, Jason
Rumney, Wolfgang Rupprecht, Jay Sachs, Dewey M. Sasser, Conrad
Sauerwald, Loren Schall, Dan Schmidt, Ralph Schleicher, Philippe
Schnoebelen, Andreas Schwab, Randal L. Schwartz, Danny Siu, Matt
Simmons, Paul D. Smith, Jeff Sparkes, Toby Speight, Michael Sperber,
Darren Stalder, Richard Stallman, Greg Stark, Sam Steingold, Paul
Stevenson, Jonas Steverud, Paul Stodghill, Kiyokazu Suto, Kurt
Swanson, Samuel Tardieu, Teddy, Chuck Thompson, Tozawa Akihiko,
Philippe Troin, James Troup, Trung Tran-Duc, Jack Twilley, Aaron
M. Ucko, Aki Vehtari, Didier Verna, Vladimir Volovich, Jan Vroonhof,
Stefan Waldherr, Pete Ware, Barry A. Warsaw, Christoph Wedler, Joe
Wells, Lee Willis, and Lloyd Zusman.


For a full overview of what each person has done, the ChangeLogs
included in the Gnus alpha distributions should give ample reading
(550kB and counting).

Apologies to everybody that I've forgotten, of which there are many,
I'm sure.

Gee, that's quite a list of people.  I guess that must mean that there
actually are people who are using Gnus.  Who'd'a thunk it!




File: gnus, Node: New Features, Prev: Contributors, Up: History

New Features
------------

* Menu:

* ding Gnus::                   New things in Gnus 5.0/5.1, the first new Gnus.
* September Gnus::              The Thing Formally Known As Gnus 5.2/5.3.
* Red Gnus::                    Third time best--Gnus 5.4/5.5.
* Quassia Gnus::                Two times two is four, or Gnus 5.6/5.7.
* Pterodactyl Gnus::            Pentad also starts with P, AKA Gnus 5.8/5.9.
* Oort Gnus::                   It's big.  It's far out.  Gnus 5.10/5.11.
* No Gnus::                     Very punny.

These lists are, of course, just *short* overviews of the *most*
important new features.  No, really.  There are tons more.  Yes, we
have feeping creaturism in full effect.



File: gnus, Node: ding Gnus, Next: September Gnus, Prev: New Features, Up: New Features

(ding) Gnus
...........

New features in Gnus 5.0/5.1:


   * The look of all buffers can be changed by setting format-like
     variables (*Note Group Buffer Format:: and *Note Summary Buffer
     Format::).

   * Local spool and several NNTP servers can be used at once (*Note
     Select Methods::).

   * You can combine groups into virtual groups (*Note Virtual
     Groups::).

   * You can read a number of different mail formats (*Note Getting
     Mail::).  All the mail back ends implement a convenient mail
     expiry scheme (*Note Expiring Mail::).

   * Gnus can use various strategies for gathering threads that have
     lost their roots (thereby gathering loose sub-threads into one
     thread) or it can go back and retrieve enough headers to build a
     complete thread (*Note Customizing Threading::).

   * Killed groups can be displayed in the group buffer, and you can
     read them as well (*Note Listing Groups::).

   * Gnus can do partial group updates--you do not have to retrieve
     the entire active file just to check for new articles in a few
     groups (*Note The Active File::).

   * Gnus implements a sliding scale of subscribedness to groups
     (*Note Group Levels::).

   * You can score articles according to any number of criteria (*Note
     Scoring::).  You can even get Gnus to find out how to score
     articles for you (*Note Adaptive Scoring::).

   * Gnus maintains a dribble buffer that is auto-saved the normal
     Emacs manner, so it should be difficult to lose much data on what
     you have read if your machine should go down (*Note Auto Save::).

   * Gnus now has its own startup file (`~/.gnus.el') to avoid
     cluttering up the `.emacs' file.

   * You can set the process mark on both groups and articles and
     perform operations on all the marked items (*Note
     Process/Prefix::).

   * You can grep through a subset of groups and create a group from
     the results (*Note Kibozed Groups::).

   * You can list subsets of groups according to, well, anything
     (*Note Listing Groups::).

   * You can browse foreign servers and subscribe to groups from those
     servers (*Note Browse Foreign Server::).

   * Gnus can fetch articles, asynchronously, on a second connection
     to the server (*Note Asynchronous Fetching::).

   * You can cache articles locally (*Note Article Caching::).

   * The uudecode functions have been expanded and generalized (*Note
     Decoding Articles::).

   * You can still post uuencoded articles, which was a little-known
     feature of GNUS' past (*Note Uuencoding and Posting::).

   * Fetching parents (and other articles) now actually works without
     glitches (*Note Finding the Parent::).

   * Gnus can fetch FAQs and group descriptions (*Note Group
     Information::).

   * Digests (and other files) can be used as the basis for groups
     (*Note Document Groups::).

   * Articles can be highlighted and customized (*Note Customizing
     Articles::).

   * URLs and other external references can be buttonized (*Note
     Article Buttons::).

   * You can do lots of strange stuff with the Gnus window & frame
     configuration (*Note Window Layout::).

   * You can click on buttons instead of using the keyboard (*Note
     Buttons::).





File: gnus, Node: September Gnus, Next: Red Gnus, Prev: ding Gnus, Up: New Features

September Gnus
..............


New features in Gnus 5.2/5.3:


   * A new message composition mode is used.  All old customization
     variables for `mail-mode', `rnews-reply-mode' and `gnus-msg' are
     now obsolete.

   * Gnus is now able to generate "sparse" threads--threads where
     missing articles are represented by empty nodes (*Note
     Customizing Threading::).

          (setq gnus-build-sparse-threads 'some)

   * Outgoing articles are stored on a special archive server (*Note
     Archived Messages::).

   * Partial thread regeneration now happens when articles are
     referred.

   * Gnus can make use of GroupLens predictions.

   * Picons (personal icons) can be displayed under XEmacs (*Note
     Picons::).

   * A `trn'-like tree buffer can be displayed (*Note Tree Display::).

          (setq gnus-use-trees t)

   * An `nn'-like pick-and-read minor mode is available for the
     summary buffers (*Note Pick and Read::).

          (add-hook 'gnus-summary-mode-hook 'gnus-pick-mode)

   * In binary groups you can use a special binary minor mode (*Note
     Binary Groups::).

   * Groups can be grouped in a folding topic hierarchy (*Note Group
     Topics::).

          (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

   * Gnus can re-send and bounce mail (*Note Summary Mail Commands::).

   * Groups can now have a score, and bubbling based on entry
     frequency is possible (*Note Group Score::).

          (add-hook 'gnus-summary-exit-hook 'gnus-summary-bubble-group)

   * Groups can be process-marked, and commands can be performed on
     groups of groups (*Note Marking Groups::).

   * Caching is possible in virtual groups.

   * `nndoc' now understands all kinds of digests, mail boxes, rnews
     news batches, ClariNet briefs collections, and just about
     everything else (*Note Document Groups::).

   * Gnus has a new back end (`nnsoup') to create/read SOUP packets
     (*Note SOUP::).

   * The Gnus cache is much faster.

   * Groups can be sorted according to many criteria (*Note Sorting
     Groups::).

   * New group parameters have been introduced to set list-addresses
     and expiry times (*Note Group Parameters::).

   * All formatting specs allow specifying faces to be used (*Note
     Formatting Fonts::).

   * There are several more commands for setting/removing/acting on
     process marked articles on the `M P' submap (*Note Setting
     Process Marks::).

   * The summary buffer can be limited to show parts of the available
     articles based on a wide range of criteria.  These commands have
     been bound to keys on the `/' submap (*Note Limiting::).

   * Articles can be made persistent with the `*' command (*Note
     Persistent Articles::).

   * All functions for hiding article elements are now toggles.

   * Article headers can be buttonized (*Note Article Washing::).

   * All mail back ends support fetching articles by `Message-ID'.

   * Duplicate mail can now be treated properly (*Note Duplicates::).

   * All summary mode commands are available directly from the article
     buffer (*Note Article Keymap::).

   * Frames can be part of `gnus-buffer-configuration' (*Note Window
     Layout::).

   * Mail can be re-scanned by a daemonic process (*Note Daemons::).

   * Gnus can make use of NoCeM files to weed out spam (*Note
     NoCeM::).

          (setq gnus-use-nocem t)

   * Groups can be made permanently visible (*Note Listing Groups::).

          (setq gnus-permanently-visible-groups "^nnml:")

   * Many new hooks have been introduced to make customizing easier.

   * Gnus respects the `Mail-Copies-To' header.

   * Threads can be gathered by looking at the `References' header
     (*Note Customizing Threading::).

          (setq gnus-summary-thread-gathering-function
                'gnus-gather-threads-by-references)

   * Read articles can be stored in a special backlog buffer to avoid
     refetching (*Note Article Backlog::).

          (setq gnus-keep-backlog 50)

   * A clean copy of the current article is always stored in a
     separate buffer to allow easier treatment.

   * Gnus can suggest where to save articles (*Note Saving
     Articles::).

   * Gnus doesn't have to do as much prompting when saving (*Note
     Saving Articles::).

          (setq gnus-prompt-before-saving t)

   * `gnus-uu' can view decoded files asynchronously while fetching
     articles (*Note Other Decode Variables::).

          (setq gnus-uu-grabbed-file-functions 'gnus-uu-grab-view)

   * Filling in the article buffer now works properly on cited text
     (*Note Article Washing::).

   * Hiding cited text adds buttons to toggle hiding, and how much
     cited text to hide is now customizable (*Note Article Hiding::).

          (setq gnus-cited-lines-visible 2)

   * Boring headers can be hidden (*Note Article Hiding::).

   * Default scoring values can now be set from the menu bar.

   * Further syntax checking of outgoing articles have been added.





File: gnus, Node: Red Gnus, Next: Quassia Gnus, Prev: September Gnus, Up: New Features

Red Gnus
........

New features in Gnus 5.4/5.5:



   * `nntp.el' has been totally rewritten in an asynchronous fashion.

   * Article prefetching functionality has been moved up into Gnus
     (*Note Asynchronous Fetching::).

   * Scoring can now be performed with logical operators like `and',
     `or', `not', and parent redirection (*Note Advanced Scoring::).

   * Article washing status can be displayed in the article mode line
     (*Note Misc Article::).

   * `gnus.el' has been split into many smaller files.

   * Suppression of duplicate articles based on Message-ID can be done
     (*Note Duplicate Suppression::).

          (setq gnus-suppress-duplicates t)

   * New variables for specifying what score and adapt files are to be
     considered home score and adapt files (*Note Home Score File::)
     have been added.

   * `nndoc' was rewritten to be easily extendable (*Note Document
     Server Internals::).

   * Groups can inherit group parameters from parent topics (*Note
     Topic Parameters::).

   * Article editing has been revamped and is now actually usable.

   * Signatures can be recognized in more intelligent fashions (*Note
     Article Signature::).

   * Summary pick mode has been made to look more `nn'-like.  Line
     numbers are displayed and the `.' command can be used to pick
     articles (`Pick and Read').

   * Commands for moving the `.newsrc.eld' from one server to another
     have been added (*Note Changing Servers::).

   * There's a way now to specify that "uninteresting" fields be
     suppressed when generating lines in buffers (*Note Advanced
     Formatting::).

   * Several commands in the group buffer can be undone with `C-M-_'
     (*Note Undo::).

   * Scoring can be done on words using the new score type `w' (*Note
     Score File Format::).

   * Adaptive scoring can be done on a Subject word-by-word basis
     (*Note Adaptive Scoring::).

          (setq gnus-use-adaptive-scoring '(word))

   * Scores can be decayed (*Note Score Decays::).

          (setq gnus-decay-scores t)

   * Scoring can be performed using a regexp on the Date header.  The
     Date is normalized to compact ISO 8601 format first (*Note Score
     File Format::).

   * A new command has been added to remove all data on articles from
     the native server (*Note Changing Servers::).

   * A new command for reading collections of documents (`nndoc' with
     `nnvirtual' on top) has been added---`C-M-d' (*Note Really
     Various Summary Commands::).

   * Process mark sets can be pushed and popped (*Note Setting Process
     Marks::).

   * A new mail-to-news back end makes it possible to post even when
     the NNTP server doesn't allow posting (*Note Mail-To-News
     Gateways::).

   * A new back end for reading searches from Web search engines
     ("DejaNews", "Alta Vista", "InReference") has been added (*Note
     Web Searches::).

   * Groups inside topics can now be sorted using the standard sorting
     functions, and each topic can be sorted independently (*Note
     Topic Sorting::).

   * Subsets of the groups can be sorted independently (`Sorting
     Groups').

   * Cached articles can be pulled into the groups (*Note Summary
     Generation Commands::).

   * Score files are now applied in a more reliable order (*Note Score
     Variables::).

   * Reports on where mail messages end up can be generated (*Note
     Splitting Mail::).

   * More hooks and functions have been added to remove junk from
     incoming mail before saving the mail (*Note Washing Mail::).

   * Emphasized text can be properly fontisized:





File: gnus, Node: Quassia Gnus, Next: Pterodactyl Gnus, Prev: Red Gnus, Up: New Features

Quassia Gnus
............

New features in Gnus 5.6:


   * New functionality for using Gnus as an offline newsreader has been
     added.  A plethora of new commands and modes have been added.
     *Note Gnus Unplugged::, for the full story.

   * The `nndraft' back end has returned, but works differently than
     before.  All Message buffers are now also articles in the
     `nndraft' group, which is created automatically.

   * `gnus-alter-header-function' can now be used to alter header
     values.

   * `gnus-summary-goto-article' now accept Message-ID's.

   * A new Message command for deleting text in the body of a message
     outside the region: `C-c C-v'.

   * You can now post to component group in `nnvirtual' groups with
     `C-u C-c C-c'.

   *  `nntp-rlogin-program'---new variable to ease customization.

   * `C-u C-c C-c' in `gnus-article-edit-mode' will now inhibit
     re-highlighting of the article buffer.

   * New element in `gnus-boring-article-headers'---`long-to'.

   * `M-i' symbolic prefix command.  *Note Symbolic Prefixes::, for
     details.

   * `L' and `I' in the summary buffer now take the symbolic prefix
     `a' to add the score rule to the `all.SCORE' file.

   * `gnus-simplify-subject-functions' variable to allow greater
     control over simplification.

   * `A T'---new command for fetching the current thread.

   * `/ T'---new command for including the current thread in the
     limit.

   * `M-RET' is a new Message command for breaking cited text.

   * `\\1'-expressions are now valid in `nnmail-split-methods'.

   * The `custom-face-lookup' function has been removed.  If you used
     this function in your initialization files, you must rewrite them
     to use `face-spec-set' instead.

   * Canceling now uses the current select method.  Symbolic prefix
     `a' forces normal posting method.

   * New command to translate M******** sm*rtq**t*s into proper
     text---`W d'.

   * For easier debugging of `nntp', you can set
     `nntp-record-commands' to a non-`nil' value.

   * `nntp' now uses `~/.authinfo', a `.netrc'-like file, for
     controlling where and how to send AUTHINFO to NNTP servers.

   * A command for editing group parameters from the summary buffer
     has been added.

   * A history of where mails have been split is available.

   * A new article date command has been
     added---`article-date-iso8601'.

   * Subjects can be simplified when threading by setting
     `gnus-score-thread-simplify'.

   * A new function for citing in Message has been
     added---`message-cite-original-without-signature'.

   * `article-strip-all-blank-lines'---new article command.

   * A new Message command to kill to the end of the article has been
     added.

   * A minimum adaptive score can be specified by using the
     `gnus-adaptive-word-minimum' variable.

   * The "lapsed date" article header can be kept continually updated
     by the `gnus-start-date-timer' command.

   * Web listserv archives can be read with the `nnlistserv' back end.

   * Old dejanews archives can now be read by `nnweb'.




File: gnus, Node: Pterodactyl Gnus, Next: Oort Gnus, Prev: Quassia Gnus, Up: New Features

Pterodactyl Gnus
................

New features in Gnus 5.8:


   * The mail-fetching functions have changed.  See the manual for the
     many details.  In particular, all procmail fetching variables are
     gone.

     If you used procmail like in

          (setq nnmail-use-procmail t)
          (setq nnmail-spool-file 'procmail)
          (setq nnmail-procmail-directory "~/mail/incoming/")
          (setq nnmail-procmail-suffix "\\.in")

     this now has changed to

          (setq mail-sources
                '((directory :path "~/mail/incoming/"
                             :suffix ".in")))

     *Note Mail Source Specifiers::.

   * Gnus is now a MIME-capable reader.  This affects many parts of
     Gnus, and adds a slew of new commands.  See the manual for
     details.

   * Gnus has also been multilingualized.  This also affects too many
     parts of Gnus to summarize here, and adds many new variables.

   * `gnus-auto-select-first' can now be a function to be called to
     position point.

   * The user can now decide which extra headers should be included in
     summary buffers and NOV files.

   * `gnus-article-display-hook' has been removed.  Instead, a number
     of variables starting with `gnus-treat-' have been added.

   * The Gnus posting styles have been redone again and now works in a
     subtly different manner.

   * New web-based back ends have been added: `nnslashdot',
     `nnwarchive' and `nnultimate'.  nnweb has been revamped, again,
     to keep up with ever-changing layouts.

   * Gnus can now read IMAP mail via `nnimap'.




File: gnus, Node: Oort Gnus, Next: No Gnus, Prev: Pterodactyl Gnus, Up: New Features

Oort Gnus
.........

New features in Gnus 5.10:


   * Installation changes

        * Upgrading from previous (stable) version if you have used
          Oort.

          If you have tried Oort (the unstable Gnus branch leading to
          this release) but went back to a stable version, be careful
          when upgrading to this version.  In particular, you will
          probably want to remove all `.marks' (nnml) and `.mrk'
          (nnfolder) files, so that flags are read from your
          `.newsrc.eld' instead of from the `.marks'/`.mrk' file where
          this release store flags.  See a later entry for more
          information about marks.  Note that downgrading isn't save
          in general.

        * Lisp files are now installed in `.../site-lisp/gnus/' by
          default.  It defaulted to `.../site-lisp/' formerly.  In
          addition to this, the new installer issues a warning if
          other Gnus installations which will shadow the latest one
          are detected.  You can then remove those shadows manually or
          remove them using `make remove-installed-shadows'.

        * New `make.bat' for compiling and installing Gnus under MS
          Windows

          Use `make.bat' if you want to install Gnus under MS Windows,
          the first argument to the batch-program should be the
          directory where `xemacs.exe' respectively `emacs.exe' is
          located, if you want to install Gnus after compiling it,
          give `make.bat' `/copy' as the second parameter.

          `make.bat' has been rewritten from scratch, it now features
          automatic recognition of XEmacs and GNU Emacs, generates
          `gnus-load.el', checks if errors occur while compilation and
          generation of info files and reports them at the end of the
          build process.  It now uses `makeinfo' if it is available
          and falls back to `infohack.el' otherwise.  `make.bat'
          should now install all files which are necessary to run Gnus
          and be generally a complete replacement for the `configure;
          make; make install' cycle used under Unix systems.

          The new `make.bat' makes `make-x.bat' and `xemacs.mak'
          superfluous, so they have been removed.

        * `~/News/overview/' not used.

          As a result of the following change, the `~/News/overview/'
          directory is not used any more.  You can safely delete the
          entire hierarchy.

        * `(require 'gnus-load)'

          If you use a stand-alone Gnus distribution, you'd better add
          `(require 'gnus-load)' into your `~/.emacs' after adding the
          Gnus lisp directory into load-path.

          File `gnus-load.el' contains autoload commands, functions
          and variables, some of which may not be included in
          distributions of Emacsen.


   * New packages and libraries within Gnus


        * The revised Gnus FAQ is included in the manual,
          *Note Frequently Asked Questions::.

        * TLS wrapper shipped with Gnus

          TLS/SSL is now supported in IMAP and
          NNTP via `tls.el' and GNUTLS.  The old
          TLS/SSL support via (external third party)
          `ssl.el' and OpenSSL still works.

        * Improved anti-spam features.

          Gnus is now able to take out spam from your mail and news
          streams using a wide variety of programs and filter rules.
          Among the supported methods are RBL blocklists, bogofilter
          and white/blacklists.  Hooks for easy use of external
          packages such as SpamAssassin and Hashcash are also new.
          *Note Thwarting Email Spam:: and *Note Spam Package::.

        * Gnus supports server-side mail filtering using Sieve.

          Sieve rules can be added as Group Parameters for groups, and
          the complete Sieve script is generated using `D g' from the
          Group buffer, and then uploaded to the server using `C-c
          C-l' in the generated Sieve buffer.  *Note Sieve Commands::,
          and the new Sieve manual *Note Top: (sieve)Top.


   * Changes in group mode


        * `gnus-group-read-ephemeral-group' can be called
          interactively, using `G M'.

        * Retrieval of charters and control messages

          There are new commands for fetching newsgroup charters (`H
          c') and control messages (`H C').

        * The new variable `gnus-parameters' can be used to set group
          parameters.

          Earlier this was done only via `G p' (or `G c'), which
          stored the parameters in `~/.newsrc.eld', but via this
          variable you can enjoy the powers of customize, and
          simplified backups since you set the variable in
          `~/.gnus.el' instead of `~/.newsrc.eld'.  The variable maps
          regular expressions matching group names to group
          parameters, a'la:
               (setq gnus-parameters
                     '(("mail\\..*"
                        (gnus-show-threads nil)
                        (gnus-use-scoring nil))
                       ("^nnimap:\\(foo.bar\\)$"
                        (to-group . "\\1"))))

        * Unread count correct in nnimap groups.

          The estimated number of unread articles in the group buffer
          should now be correct for nnimap groups.  This is achieved
          by calling `nnimap-fixup-unread-after-getting-new-news' from
          the `gnus-setup-news-hook' (called on startup) and
          `gnus-after-getting-new-news-hook'. (called after getting
          new mail).  If you have modified those variables from the
          default, you may want to add
          `nnimap-fixup-unread-after-getting-new-news' again.  If you
          were happy with the estimate and want to save some (minimal)
          time when getting new mail, remove the function.

        * Group names are treated as UTF-8 by default.

          This is supposedly what USEFOR wanted to migrate to.  See
          `gnus-group-name-charset-group-alist' and
          `gnus-group-name-charset-method-alist' for customization.

        * `gnus-group-charset-alist' and
          `gnus-group-ignored-charsets-alist'.

          The regexps in these variables are compared with full group
          names instead of real group names in 5.8.  Users who
          customize these variables should change those regexps
          accordingly.  For example:
               ("^han\\>" euc-kr) -> ("\\(^\\|:\\)han\\>" euc-kr)

        * Old intermediate incoming mail files (`Incoming*') are
          deleted after a couple of days, not immediately.  *Note Mail
          Source Customization::.  (New in Gnus 5.10.10 / Emacs 22.2)


   * Changes in summary and article mode


        * `F' (`gnus-article-followup-with-original') and `R'
          (`gnus-article-reply-with-original') only yank the text in
          the region if the region is active.

        * In draft groups, `e' is now bound to
          `gnus-draft-edit-message'.  Use `B w' for
          `gnus-summary-edit-article' instead.

        * Article Buttons

          More buttons for URLs, mail addresses, Message-IDs, Info
          links, man pages and Emacs or Gnus related references.
          *Note Article Buttons::.  The variables
          `gnus-button-*-level' can be used to control the appearance
          of all article buttons.  *Note Article Button Levels::.

        * Single-part yenc encoded attachments can be decoded.

        * Picons

          The picons code has been reimplemented to work in GNU
          Emacs--some of the previous options have been removed or
          renamed.

          Picons are small "personal icons" representing users, domain and
          newsgroups, which can be displayed in the Article buffer.
          *Note Picons::.

        * If the new option `gnus-treat-body-boundary' is non-`nil', a
          boundary line is drawn at the end of the headers.

        * Signed article headers (X-PGP-Sig) can be verified with `W
          p'.

        * The Summary Buffer uses an arrow in the fringe to indicate
          the current article.  Use `(setq gnus-summary-display-arrow
          nil)' to disable it.

        * Warn about email replies to news

          Do you often find yourself replying to news by email by
          mistake?  Then the new option
          `gnus-confirm-mail-reply-to-news' is just the thing for you.

        * If the new option `gnus-summary-display-while-building' is
          non-`nil', the summary buffer is shown and updated as it's
          being built.

        * The new `recent' mark `.' indicates newly arrived messages
          (as opposed to old but unread messages).

        * Gnus supports RFC 2369 mailing list headers, and adds a
          number of related commands in mailing list groups.  *Note
          Mailing List::.

        * The Date header can be displayed in a format that can be
          read aloud in English.  *Note Article Date::.

        * diffs are automatically highlighted in groups matching
          `mm-uu-diff-groups-regexp'

        * Better handling of Microsoft citation styles

          Gnus now tries to recognize the mangled header block that
          some Microsoft mailers use to indicate that the rest of the
          message is a citation, even though it is not quoted in any
          way.  The variable `gnus-cite-unsightly-citation-regexp'
          matches the start of these citations.

          The new command `W Y f'
          (`gnus-article-outlook-deuglify-article') allows deuglifying
          broken Outlook (Express) articles.

        * `gnus-article-skip-boring'

          If you set `gnus-article-skip-boring' to `t', then Gnus will
          not scroll down to show you a page that contains only boring
          text, which by default means cited text and signature.  You
          can customize what is skippable using
          `gnus-article-boring-faces'.

          This feature is especially useful if you read many articles
          that consist of a little new content at the top with a long,
          untrimmed message cited below.

        * Smileys (`:-)', `;-)' etc) are now displayed graphically in
          Emacs too.

          Put `(setq gnus-treat-display-smileys nil)' in `~/.gnus.el'
          to disable it.

        * Face headers handling.  *Note Face::.

        * In the summary buffer, the new command `/ N' inserts new
          messages and `/ o' inserts old messages.

        * Gnus decodes morse encoded messages if you press `W m'.

        * `gnus-summary-line-format'

          The default value changed to `%U%R%z%I%(%[%4L: %-23,23f%]%)
          %s\n'.  Moreover `gnus-extra-headers',
          `nnmail-extra-headers' and `gnus-ignored-from-addresses'
          changed their default so that the users name will be
          replaced by the recipient's name or the group name posting
          to for NNTP groups.

        * Deleting of attachments.

          The command `gnus-mime-save-part-and-strip' (bound to `C-o'
          on MIME buttons) saves a part and replaces the part with an
          external one.  `gnus-mime-delete-part' (bound to `d' on MIME
          buttons) removes a part.  It works only on back ends that
          support editing.

        * `gnus-default-charset'

          The default value is determined from the
          `current-language-environment' variable, instead of
          `iso-8859-1'.  Also the `.*' item in
          `gnus-group-charset-alist' is removed.

        * Printing capabilities are enhanced.

          Gnus supports Muttprint natively with `O P' from the Summary
          and Article buffers.  Also, each individual MIME part can be
          printed using `p' on the MIME button.

        * Extended format specs.

          Format spec `%&user-date;' is added into
          `gnus-summary-line-format-alist'.  Also, user defined
          extended format specs are supported.  The extended format
          specs look like `%u&foo;', which invokes function
          `gnus-user-format-function-FOO'.  Because `&' is used as the
          escape character, old user defined format `%u&' is no longer
          supported.

        * `/ *' (`gnus-summary-limit-include-cached') is rewritten.

          It was aliased to `Y c'
          (`gnus-summary-insert-cached-articles').  The new function
          filters out other articles.

        * Some limiting commands accept a `C-u' prefix to negate the
          match.

          If `C-u' is used on subject, author or extra headers, i.e.,
          `/ s', `/ a', and `/ x'
          (`gnus-summary-limit-to-{subject,author,extra}')
          respectively, the result will be to display all articles
          that do not match the expression.

        * Gnus inlines external parts (message/external).


   * Changes in Message mode and related Gnus features


        * Delayed articles

          You can delay the sending of a message with `C-c C-j' in the
          Message buffer.  The messages are delivered at specified
          time.  This is useful for sending yourself reminders.  *Note
          Delayed Articles::.

        * If the new option `nnml-use-compressed-files' is non-`nil',
          the nnml back end allows compressed message files.

        * The new option `gnus-gcc-mark-as-read' automatically marks
          Gcc articles as read.

        * Externalizing of attachments

          If `gnus-gcc-externalize-attachments' or
          `message-fcc-externalize-attachments' is non-`nil', attach
          local files as external parts.

        * The envelope sender address can be customized when using Sendmail.
          *Note Mail Variables: (message)Mail Variables.

        * Gnus no longer generate the Sender: header automatically.

          Earlier it was generated when the user configurable email address was
          different from the Gnus guessed default user address.  As the guessing
          algorithm is rarely correct these days, and (more controversially) the
          only use of the Sender: header was to check if you are entitled to
          cancel/supersede news (which is now solved by Cancel Locks instead,
          see another entry), generation of the header has been disabled by
          default.  See the variables `message-required-headers',
          `message-required-news-headers', and
          `message-required-mail-headers'.

        * Features from third party `message-utils.el' added to
          `message.el'.

          Message now asks if you wish to remove `(was: <old
          subject>)' from subject lines (see
          `message-subject-trailing-was-query').  `C-c M-m' and `C-c
          M-f' inserts markers indicating included text.  `C-c C-f a'
          adds a X-No-Archive: header.  `C-c C-f x' inserts
          appropriate headers and a note in the body for
          cross-postings and followups (see the variables
          `message-cross-post-*').

        * References and X-Draft-From headers are no longer generated when you
          start composing messages and `message-generate-headers-first' is
          `nil'.

        * Easy inclusion of X-Faces headers.  *Note X-Face::.

        * Group Carbon Copy (GCC) quoting

          To support groups that contains SPC and other weird
          characters, groups are quoted before they are placed in the
          Gcc: header.  This means variables such as
          `gnus-message-archive-group' should no longer contain quote
          characters to make groups containing SPC work.  Also, if you
          are using the string `nnml:foo, nnml:bar' (indicating Gcc
          into two groups) you must change it to return the list
          `("nnml:foo" "nnml:bar")', otherwise the Gcc: line will be
          quoted incorrectly.  Note that returning the string
          `nnml:foo, nnml:bar' was incorrect earlier, it just didn't
          generate any problems since it was inserted directly.

        * `message-insinuate-rmail'

          Adding `(message-insinuate-rmail)' and `(setq
          mail-user-agent 'gnus-user-agent)' in `.emacs' convinces
          Rmail to compose, reply and forward messages in
          message-mode, where you can enjoy the power of MML.

        * `message-minibuffer-local-map'

          The line below enables BBDB in resending a message:
               (define-key message-minibuffer-local-map [(tab)]
                 'bbdb-complete-name)

        * `gnus-posting-styles'

          Add a new format of match like ((header "to" "larsi.*org")
          (Organization "Somewhere, Inc."))  The old format like the
          lines below is obsolete, but still accepted.
               (header "to" "larsi.*org"
                       (Organization "Somewhere, Inc."))

        * `message-ignored-news-headers' and `message-ignored-mail-headers'

          `X-Draft-From' and `X-Gnus-Agent-Meta-Information' have been
          added into these two variables.  If you customized those,
          perhaps you need add those two headers too.

        * Gnus supports the "format=flowed" (RFC 2646) parameter.  On
          composing messages, it is enabled by `use-hard-newlines'.
          Decoding format=flowed was present but not documented in
          earlier versions.

        * The option `mm-fill-flowed' can be used to disable treatment
          of "format=flowed" messages.  Also, flowed text is disabled
          when sending inline PGP signed messages.  *Note Flowed text:
          (emacs-mime)Flowed text.  (New in Gnus 5.10.7)

        * Gnus supports the generation of RFC 2298 Disposition
          Notification requests.

          This is invoked with the `C-c M-n' key binding from message
          mode.

        * Message supports the Importance: (RFC 2156) header.

          In the message buffer, `C-c C-f C-i' or `C-c C-u' cycles
          through the valid values.

        * Gnus supports Cancel Locks in News.

          This means a header `Cancel-Lock' is inserted in news
          posting.  It is used to determine if you wrote an article or
          not (for canceling and superseding).  Gnus generates a
          random password string the first time you post a message,
          and saves it in your `~/.emacs' using the Custom system.
          While the variable is called `canlock-password', it is not
          security sensitive data.  Publishing your canlock string on
          the web will not allow anyone to be able to anything she
          could not already do.  The behavior can be changed by
          customizing `message-insert-canlock'.

        * Gnus supports PGP (RFC 1991/2440), PGP/MIME (RFC 2015/3156)
          and S/MIME (RFC 2630-2633).

          It needs an external S/MIME and OpenPGP implementation, but
          no additional Lisp libraries.  This add several menu items
          to the Attachments menu, and `C-c RET' key bindings, when
          composing messages.  This also obsoletes
          `gnus-article-hide-pgp-hook'.

        * MML (Mime compose) prefix changed from `M-m' to `C-c C-m'.

          This change was made to avoid conflict with the standard binding of
          `back-to-indentation', which is also useful in message mode.

        * The default for `message-forward-show-mml' changed to the symbol
          `best'.

          The behavior for the `best' value is to show MML (i.e.,
          convert to MIME) when appropriate.  MML will not be used
          when forwarding signed or encrypted messages, as the
          conversion invalidate the digital signature.

        * If `auto-compression-mode' is enabled, attachments are
          automatically decompressed when activated.

        * Support for non-ASCII domain names

          Message supports non-ASCII domain names in From:, To: and
          Cc: and will query you whether to perform encoding when you
          try to send a message.  The variable `message-use-idna'
          controls this.  Gnus will also decode non-ASCII domain names
          in From:, To: and Cc: when you view a message.  The variable
          `gnus-use-idna' controls this.

        * You can now drag and drop attachments to the Message buffer.
          See `mml-dnd-protocol-alist' and `mml-dnd-attach-options'.
          *Note MIME: (message)MIME.

        * `auto-fill-mode' is enabled by default in Message mode.  See
          `message-fill-column'.  *Note Message Headers:
          (message)Various Message Variables.


   * Changes in back ends

        * Gnus can display RSS newsfeeds as a newsgroup.  *Note RSS::.

        * The nndoc back end now supports mailman digests and exim
          bounces.

        * Gnus supports Maildir groups.

          Gnus includes a new back end `nnmaildir.el'.  *Note
          Maildir::.

        * The nnml and nnfolder back ends store marks for each groups.

          This makes it possible to take backup of nnml/nnfolder servers/groups
          separately of `~/.newsrc.eld', while preserving marks.  It also
          makes it possible to share articles and marks between users (without
          sharing the `~/.newsrc.eld' file) within e.g. a department.  It
          works by storing the marks stored in `~/.newsrc.eld' in a per-group
          file `.marks' (for nnml) and `GROUPNAME.mrk' (for
          nnfolder, named GROUPNAME).  If the nnml/nnfolder is moved to
          another machine, Gnus will automatically use the `.marks' or
          `.mrk' file instead of the information in `~/.newsrc.eld'.
          The new server variables `nnml-marks-is-evil' and
          `nnfolder-marks-is-evil' can be used to disable this feature.


   * Appearance


        * The menu bar item (in Group and Summary buffer) named "Misc"
          has been renamed to "Gnus".

        * The menu bar item (in Message mode) named "MML" has been
          renamed to "Attachments".  Note that this menu also contains
          security related stuff, like signing and encryption (*Note
          Security: (message)Security.).

        * The tool bars have been updated to use GNOME icons in Group,
          Summary and Message mode.  You can also customize the tool
          bars: `M-x customize-apropos RET -tool-bar$' should get you
          started.  This is a new feature in Gnus 5.10.10.  (Only for
          Emacs, not in XEmacs.)

        * The tool bar icons are now (de)activated correctly in the
          group buffer, see the variable `gnus-group-update-tool-bar'.
          Its default value depends on your Emacs version.  This is a
          new feature in Gnus 5.10.9.


   * Miscellaneous changes


        * `gnus-agent'

          The Gnus Agent has seen a major updated and is now enabled
          by default, and all nntp and nnimap servers from
          `gnus-select-method' and `gnus-secondary-select-method' are
          agentized by default.  Earlier only the server in
          `gnus-select-method' was agentized by the default, and the
          agent was disabled by default.  When the agent is enabled,
          headers are now also retrieved from the Agent cache instead
          of the back ends when possible.  Earlier this only happened
          in the unplugged state.  You can enroll or remove servers
          with `J a' and `J r' in the server buffer.  Gnus will not
          download articles into the Agent cache, unless you instruct
          it to do so, though, by using `J u' or `J s' from the Group
          buffer.  You revert to the old behavior of having the Agent
          disabled with `(setq gnus-agent nil)'.  Note that putting
          `(gnus-agentize)' in `~/.gnus.el' is not needed any more.

        * Gnus reads the NOV and articles in the Agent if plugged.

          If one reads an article while plugged, and the article
          already exists in the Agent, it won't get downloaded once
          more.  `(setq gnus-agent-cache nil)' reverts to the old
          behavior.

        * Dired integration

          `gnus-dired-minor-mode' (see *Note Other modes::) installs
          key bindings in dired buffers to send a file as an
          attachment, open a file using the appropriate mailcap entry,
          and print a file using the mailcap entry.

        * The format spec `%C' for positioning point has changed to
          `%*'.

        * `gnus-slave-unplugged'

          A new command which starts Gnus offline in slave mode.





File: gnus, Node: No Gnus, Prev: Oort Gnus, Up: New Features

No Gnus
.......

New features in No Gnus:







   * Installation changes

        * Upgrading from previous (stable) version if you have used No Gnus.

          If you have tried No Gnus (the unstable Gnus branch leading
          to this release) but went back to a stable version, be
          careful when upgrading to this version.  In particular, you
          will probably want to remove the `~/News/marks' directory
          (perhaps selectively), so that flags are read from your
          `~/.newsrc.eld' instead of from the stale marks file, where
          this release will store flags for nntp.  See a later entry
          for more information about nntp marks.  Note that
          downgrading isn't safe in general.

        * Incompatibility when switching from Emacs 23 to Emacs 22 In
          Emacs 23, Gnus uses Emacs' new internal coding system
          `utf-8-emacs' for saving articles drafts and
          `~/.newsrc.eld'.  These files may not be read correctly in
          Emacs 22 and below.  If you want to use Gnus across
          different Emacs versions, you may set
          `mm-auto-save-coding-system' to `emacs-mule'.

        * Lisp files are now installed in `.../site-lisp/gnus/' by
          default.  It defaulted to `.../site-lisp/' formerly.  In
          addition to this, the new installer issues a warning if
          other Gnus installations which will shadow the latest one
          are detected.  You can then remove those shadows manually or
          remove them using `make remove-installed-shadows'.

        * The installation directory name is allowed to have spaces and/or tabs.

   * New packages and libraries within Gnus


        * Gnus includes the Emacs Lisp SASL library.

          This provides a clean API to SASL mechanisms from
          within Emacs.  The user visible aspects of this, compared to the earlier
          situation, include support for DIGEST-MD5 and
          NTLM.   *Note Emacs SASL: (sasl)Top.

        * ManageSieve connections uses the SASL library by default.

          The primary change this brings is support for DIGEST-MD5 and
          NTLM, when the server supports it.

        * Gnus includes a password cache mechanism in password.el.

          It is enabled by default (see `password-cache'), with a
          short timeout of 16 seconds (see `password-cache-expiry').
          If PGG is used as the PGP back end, the PGP passphrase is
          managed by this mechanism.  Passwords for ManageSieve
          connections are managed by this mechanism, after querying
          the user about whether to do so.

        * Using EasyPG with Gnus When EasyPG, is available, Gnus will
          use it instead of PGG.  EasyPG is an Emacs user interface to
          GNU Privacy Guard.  *Note EasyPG Assistant user's manual:
          (epa)Top.  EasyPG is included in Emacs 23 and available
          separately as well.

   * Changes in group mode

        * Old intermediate incoming mail files (`Incoming*') are
          deleted after a couple of days, not immediately.  *Note Mail
          Source Customization::.


   * Changes in summary and article mode


        * Gnus now supports sticky article buffers.  Those are article
          buffers that are not reused when you select another article.
          *Note Sticky Articles::.


        * Gnus can selectively display `text/html' articles with a WWW
          browser with `K H'.  *Note MIME Commands::.


        * International host names (IDNA) can now be decoded inside
          article bodies using `W i' (`gnus-summary-idna-message').
          This requires that GNU Libidn
          (`http://www.gnu.org/software/libidn/') has been installed.

        * The non-ASCII group names handling has been much
          improved.  The back ends that fully support non-ASCII group
          names are now `nntp', `nnml', and `nnrss'.  Also the
          agent, the cache, and the marks features work with those back ends.
          *Note Non-ASCII Group Names::.

        * Gnus now displays DNS master files sent as text/dns using
          dns-mode.

        * Gnus supports new limiting commands in the Summary buffer:
          `/ r' (`gnus-summary-limit-to-replied') and `/ R'
          (`gnus-summary-limit-to-recipient').  *Note Limiting::.

        * You can now fetch all ticked articles from the server using
          `Y t' (`gnus-summary-insert-ticked-articles').  *Note
          Summary Generation Commands::.

        * Gnus supports a new sort command in the Summary buffer: `C-c
          C-s C-t' (`gnus-summary-sort-by-recipient').  *Note Summary
          Sorting::.

        * S/MIME now features LDAP user certificate searches.  You
          need to configure the server in `smime-ldap-host-list'.

        * URLs inside OpenPGP headers are retrieved and imported to
          your PGP key ring when you click on them.

        * Picons can be displayed right from the textual address, see
          `gnus-picon-style'.  *Note Picons::.

        * ANSI SGR control sequences can be transformed using `W A'.

          ANSI sequences are used in some Chinese hierarchies for
          highlighting articles (`gnus-article-treat-ansi-sequences').

        * Gnus now MIME decodes articles even when they lack
          MIME-Version" header.  This changes the default of
          `gnus-article-loose-mime'.

        * `gnus-decay-scores' can be a regexp matching score files.
          For example, set it to `\\.ADAPT\\'' and only adaptive score
          files will be decayed.  *Note Score Decays::.

        * Strings prefixing to the `To' and `Newsgroup' headers in
          summary lines when using `gnus-ignored-from-addresses' can be
          customized with `gnus-summary-to-prefix' and
          `gnus-summary-newsgroup-prefix'.  *Note To From Newsgroups::.

        * You can replace MIME parts with external bodies.
          See `gnus-mime-replace-part' and `gnus-article-replace-part'.
          *Note MIME Commands::, *Note Using MIME::.

        * The option `mm-fill-flowed' can be used to disable treatment
          of format=flowed messages.  Also, flowed text is disabled
          when sending inline PGP signed messages.  *Note Flowed text:
          (emacs-mime)Flowed text.  (New in Gnus 5.10.7)

        * Now the new command `S W'
          (`gnus-article-wide-reply-with-original') for a wide reply in the
          article buffer yanks a text that is in the active region, if it is set,
          as well as the `R' (`gnus-article-reply-with-original') command.
          Note that the `R' command in the article buffer no longer accepts a
          prefix argument, which was used to make it do a wide reply.
          *Note Article Keymap::.

        * The new command `C-h b' (`gnus-article-describe-bindings')
          used in the article buffer now shows not only the article
          commands but also the real summary commands that are
          accessible from the article buffer.


   * Changes in Message mode

        * Gnus now supports the "hashcash" client puzzle anti-spam mechanism.
          Use `(setq message-generate-hashcash t)' to enable.
          *Note Hashcash::.

        * You can now drag and drop attachments to the Message buffer.
          See `mml-dnd-protocol-alist' and `mml-dnd-attach-options'.
          *Note MIME: (message)MIME.

        * The option `message-yank-empty-prefix' now controls how
          empty lines are prefixed in cited text.  *Note Insertion
          Variables: (message)Insertion Variables.

        * Gnus uses narrowing to hide headers in Message buffers.
          The `References' header is hidden by default.  To make all
          headers visible, use `(setq message-hidden-headers nil)'.
          *Note Message Headers: (message)Message Headers.

        * You can highlight different levels of citations like in the
          article buffer.  See `gnus-message-highlight-citation'.

        * `auto-fill-mode' is enabled by default in Message mode.  See
          `message-fill-column'.  *Note Message Headers:
          (message)Various Message Variables.

        * You can now store signature files in a special directory
          named `message-signature-directory'.

        * The option `message-citation-line-format' controls the format
          of the "Whomever writes:" line.  You need to set
          `message-citation-line-function' to
          `message-insert-formatted-citation-line' as well.

   * Changes in back ends

        * The nntp back end stores article marks in `~/News/marks'.

          The directory can be changed using the (customizable)
          variable `nntp-marks-directory', and marks can be disabled
          using the (back end) variable `nntp-marks-is-evil'.  The
          advantage of this is that you can copy `~/News/marks' (using
          rsync, scp or whatever) to another Gnus installation, and it
          will realize what articles you have read and marked.  The
          data in `~/News/marks' has priority over the same data in
          `~/.newsrc.eld'.

        * You can import and export your RSS subscriptions from
          OPML files.  *Note RSS::.

        * IMAP identity (RFC 2971) is supported.

          By default, Gnus does not send any information about itself,
          but you can customize it using the variable `nnimap-id'.

        * The `nnrss' back end now supports multilingual text.
          Non-ASCII group names for the `nnrss' groups are also
          supported.  *Note RSS::.

        * Retrieving mail with POP3 is supported over SSL/TLS and with StartTLS.

        * The nnml back end allows other compression programs beside
          `gzip' for compressed message files.  *Note Mail Spool::.

        * The nnml back end supports group compaction.

          This feature, accessible via the functions
          `gnus-group-compact-group' (`G z' in the group buffer) and
          `gnus-server-compact-server' (`z' in the server buffer)
          renumbers all articles in a group, starting from 1 and
          removing gaps.  As a consequence, you get a correct total
          article count (until messages are deleted again).




   * Appearance


        * The tool bar has been updated to use GNOME icons.
          You can also customize the tool bars: `M-x customize-apropos RET
          -tool-bar$' should get you started.  (Only for Emacs, not in XEmacs.)

        * The tool bar icons are now (de)activated correctly in the
          group buffer, see the variable `gnus-group-update-tool-bar'.
          Its default value depends on your Emacs version.

        * You can change the location of XEmacs' toolbars in Gnus
          buffers.  See `gnus-use-toolbar' and `message-use-toolbar'.


   * Miscellaneous changes

        * Having edited the select-method for the foreign server in
          the server buffer is immediately reflected to the
          subscription of the groups which use the server in question.
          For instance, if you change `nntp-via-address' into
          `bar.example.com' from `foo.example.com', Gnus will connect
          to the news host by way of the intermediate host
          `bar.example.com' from next time.

        * The `all.SCORE' file can be edited from the group buffer
          using `W e'.









File: gnus, Node: On Writing Manuals, Next: Terminology, Prev: The Manual, Up: Appendices

On Writing Manuals
==================

I guess most manuals are written after-the-fact; documenting a program
that's already there.  This is not how this manual is written.  When
implementing something, I write the manual entry for that something
straight away.  I then see that it's difficult to explain the
functionality, so I write how it's supposed to be, and then I change
the implementation.  Writing the documentation and writing the code go
hand in hand.

This, of course, means that this manual has no, or little, flow.  It
documents absolutely everything in Gnus, but often not where you're
looking for it.  It is a reference manual, and not a guide to how to
get started with Gnus.

That would be a totally different book, that should be written using
the reference manual as source material.  It would look quite
different.




File: gnus, Node: Terminology, Next: Customization, Prev: On Writing Manuals, Up: Appendices

Terminology
===========


"news"
     This is what you are supposed to use this thing for--reading
     news.  News is generally fetched from a nearby NNTP server, and
     is generally publicly available to everybody.  If you post news,
     the entire world is likely to read just what you have written,
     and they'll all snigger mischievously.  Behind your back.

"mail"
     Everything that's delivered to you personally is mail.  Some
     news/mail readers (like Gnus) blur the distinction between mail
     and news, but there is a difference.  Mail is private.  News is
     public.  Mailing is not posting, and replying is not following
     up.

"reply"
     Send a mail to the person who has written what you are reading.

"follow up"
     Post an article to the current newsgroup responding to the
     article you are reading.

"back end"
     Gnus considers mail and news to be mostly the same, really.  The
     only difference is how to access the actual articles.  News
     articles are commonly fetched via the protocol NNTP, whereas mail
     messages could be read from a file on the local disk.  The
     internal architecture of Gnus thus comprises a "front end" and a
     number of "back ends".  Internally, when you enter a group (by
     hitting RET, say), you thereby invoke a function in the front end
     in Gnus.  The front end then "talks" to a back end and says
     things like "Give me the list of articles in the foo group" or
     Show me article number 4711".

     So a back end mainly defines either a protocol (the `nntp' back
     end accesses news via NNTP, the `nnimap' back end accesses mail
     via IMAP) or a file format and directory layout (the `nnspool'
     back end accesses news via the common "spool directory" format,
     the `nnml' back end access mail via a file format and directory
     layout that's quite similar).

     Gnus does not handle the underlying media, so to speak--this is
     all done by the back ends.  A back end is a collection of
     functions to access the articles.

     However, sometimes the term "back end" is also used where
     server" would have been more appropriate.  And then there is the
     term "select method" which can mean either.  The Gnus terminology
     can be quite confusing.

"native"
     Gnus will always use one method (and back end) as the "native",
     or default, way of getting news.

"foreign"
     You can also have any number of foreign groups active at the same
     time.  These are groups that use non-native non-secondary back
     ends for getting news.

"secondary"
     Secondary back ends are somewhere half-way between being native
     and being foreign, but they mostly act like they are native.

"article"
     A message that has been posted as news.

"mail message"
     A message that has been mailed.

"message"
     A mail message or news article

"head"
     The top part of a message, where administrative information
     (etc.) is put.

"body"
     The rest of an article.  Everything not in the head is in the
     body.

"header"
     A line from the head of an article.

"headers"
     A collection of such lines, or a collection of heads.  Or even a
     collection of NOV lines.

"NOV"
     NOV stands for News OverView, which is a type of news server
     header which provide datas containing the condensed header
     information of articles.  They are produced by the server itself;
     in the `nntp' back end Gnus uses the ones that the NNTP server
     makes, but Gnus makes them by itself for some backends (in
     particular, `nnml').

     When Gnus enters a group, it asks the back end for the headers of
     all unread articles in the group.  Most servers support the News
     OverView format, which is more compact and much faster to read
     and parse than the normal HEAD format.

     The NOV data consist of one or more text lines (*Note Motion by
     Text Lines: (elisp)Text Lines.)  where each line has the header
     information of one article.  The header information is a
     tab-separated series of the header's contents including an
     article number, a subject, an author, a date, a message-id,
     references, etc.

     Those data enable Gnus to generate summary lines quickly.
     However, if the server does not support NOV or you disable it
     purposely or for some reason, Gnus will try to generate the
     header information by parsing each article's headers one by one.
     It will take time.  Therefore, it is not usually a good idea to
     set nn*-nov-is-evil (*Note Slow/Expensive Connection::) to a
     non-`nil' value unless you know that the server makes wrong NOV
     data.

"level"
     Each group is subscribed at some "level" or other (1-9).  The
     ones that have a lower level are "more" subscribed than the
     groups with a higher level.  In fact, groups on levels 1-5 are
     considered "subscribed"; 6-7 are "unsubscribed"; 8 are "zombies";
     and 9 are "killed".  Commands for listing groups and scanning for
     new articles will all use the numeric prefix as "working level".

"killed groups"
     No information on killed groups is stored or updated, which makes
     killed groups much easier to handle than subscribed groups.

"zombie groups"
     Just like killed groups, only slightly less dead.

"active file"
     The news server has to keep track of what articles it carries,
     and what groups exist.  All this information in stored in the
     active file, which is rather large, as you might surmise.

"bogus groups"
     A group that exists in the `.newsrc' file, but isn't known to the
     server (i.e., it isn't in the active file), is a *bogus group*.
     This means that the group probably doesn't exist (any more).

"activating"
     The act of asking the server for info on a group and computing
     the number of unread articles is called "activating the group".
     Un-activated groups are listed with `*' in the group buffer.

"spool"
     News servers store their articles locally in one fashion or
     other.  One old-fashioned storage method is to have just one file
     per article.  That's called a "traditional spool".

"server"
     A machine one can connect to and get news (or mail) from.

"select method"
     A structure that specifies the back end, the server and the
     virtual server settings.

"virtual server"
     A named select method.  Since a select method defines all there
     is to know about connecting to a (physical) server, taking the
     thing as a whole is a virtual server.

"washing"
     Taking a buffer and running it through a filter of some sort.
     The result will (more often than not) be cleaner and more
     pleasing than the original.

"ephemeral groups"
     Most groups store data on what articles you have read.
     Ephemeral" groups are groups that will have no data stored--when
     you exit the group, it'll disappear into the aether.

"solid groups"
     This is the opposite of ephemeral groups.  All groups listed in
     the group buffer are solid groups.

"sparse articles"
     These are article placeholders shown in the summary buffer when
     `gnus-build-sparse-threads' has been switched on.

"threading"
     To put responses to articles directly after the articles they
     respond to--in a hierarchical fashion.

"root"
     The first article in a thread is the root.  It is the ancestor of
     all articles in the thread.

"parent"
     An article that has responses.

"child"
     An article that responds to a different article--its parent.

"digest"
     A collection of messages in one file.  The most common digest
     format is specified by RFC 1153.

"splitting"
     The action of sorting your emails according to certain
     rules. Sometimes incorrectly called mail filtering.





File: gnus, Node: Customization, Next: Troubleshooting, Prev: Terminology, Up: Appendices

Customization
=============

All variables are properly documented elsewhere in this manual.  This
section is designed to give general pointers on how to customize Gnus
for some quite common situations.

* Menu:

* Slow/Expensive Connection::   You run a local Emacs and get the news elsewhere.
* Slow Terminal Connection::    You run a remote Emacs.
* Little Disk Space::           You feel that having large setup files is icky.
* Slow Machine::                You feel like buying a faster machine.




File: gnus, Node: Slow/Expensive Connection, Next: Slow Terminal Connection, Prev: Customization, Up: Customization

Slow/Expensive Connection
-------------------------

If you run Emacs on a machine locally, and get your news from a
machine over some very thin strings, you want to cut down on the
amount of data Gnus has to get from the server.


`gnus-read-active-file'
     Set this to `nil', which will inhibit Gnus from requesting the
     entire active file from the server.  This file is often very
     large.  You also have to set `gnus-check-new-newsgroups' and
     `gnus-check-bogus-newsgroups' to `nil' to make sure that Gnus
     doesn't suddenly decide to fetch the active file anyway.

`gnus-nov-is-evil'
     Usually this one must *always* be `nil' (which is the default).
     If, for example, you wish to not use NOV (*Note Terminology::)
     with the `nntp' back end (*Note Crosspost Handling::), set
     `nntp-nov-is-evil' to a non-`nil' value instead of setting this.
     But you normally do not need to set `nntp-nov-is-evil' since Gnus
     by itself will detect whether the NNTP server supports NOV.
     Anyway, grabbing article headers from the NNTP server will not be
     very fast if you tell Gnus not to use NOV.

     As the variables for the other back ends, there are
     `nndiary-nov-is-evil', `nndir-nov-is-evil',
     `nnfolder-nov-is-evil', `nnimap-nov-is-evil', `nnml-nov-is-evil',
     `nnspool-nov-is-evil', and `nnwarchive-nov-is-evil'.  Note that a
     non-`nil' value for `gnus-nov-is-evil' overrides all those
     variables. (1) (*Note Slow/Expensive Connection-Footnotes::)



File: gnus  Node: Slow/Expensive Connection-Footnotes, Up: Slow/Expensive Connection

(1) Although the back ends `nnkiboze', `nnslashdot',
`nnultimate', and `nnwfm' don't have their own
nn*-nov-is-evil.



File: gnus, Node: Slow Terminal Connection, Next: Little Disk Space, Prev: Slow/Expensive Connection, Up: Customization

Slow Terminal Connection
------------------------

Let's say you use your home computer for dialing up the system that
runs Emacs and Gnus.  If your modem is slow, you want to reduce (as
much as possible) the amount of data sent over the wires.


`gnus-auto-center-summary'
     Set this to `nil' to inhibit Gnus from re-centering the summary
     buffer all the time.  If it is `vertical', do only vertical
     re-centering.  If it is neither `nil' nor `vertical', do both
     horizontal and vertical recentering.

`gnus-visible-headers'
     Cut down on the headers included in the articles to the
     minimum.  You can, in fact, make do without them altogether--most of the
     useful data is in the summary buffer, anyway.  Set this variable to
     `^NEVVVVER' or `From:', or whatever you feel you need.

     Use the following to enable all the available hiding features:
          (setq gnus-treat-hide-headers 'head
                gnus-treat-hide-signature t
                gnus-treat-hide-citation t)

`gnus-use-full-window'
     By setting this to `nil', you can make all the windows smaller.
     While this doesn't really cut down much generally, it means that
     you have to see smaller portions of articles before deciding that
     you didn't want to read them anyway.

`gnus-thread-hide-subtree'
     If this is non-`nil', all threads in the summary buffer will be
     hidden initially.


`gnus-updated-mode-lines'
     If this is `nil', Gnus will not put information in the buffer
     mode lines, which might save some time.




File: gnus, Node: Little Disk Space, Next: Slow Machine, Prev: Slow Terminal Connection, Up: Customization

Little Disk Space
-----------------

The startup files can get rather large, so you may want to cut their
sizes a bit if you are running out of space.


`gnus-save-newsrc-file'
     If this is `nil', Gnus will never save `.newsrc'---it will only
     save `.newsrc.eld'.  This means that you will not be able to use
     any other newsreaders than Gnus.  This variable is `t' by
     default.

`gnus-read-newsrc-file'
     If this is `nil', Gnus will never read `.newsrc'---it will only
     read `.newsrc.eld'.  This means that you will not be able to use
     any other newsreaders than Gnus.  This variable is `t' by
     default.

`gnus-save-killed-list'
     If this is `nil', Gnus will not save the list of dead groups.
     You should also set `gnus-check-new-newsgroups' to `ask-server'
     and `gnus-check-bogus-newsgroups' to `nil' if you set this
     variable to `nil'.  This variable is `t' by default.





File: gnus, Node: Slow Machine, Prev: Little Disk Space, Up: Customization

Slow Machine
------------

If you have a slow machine, or are just really impatient, there are a
few things you can do to make Gnus run faster.

Set `gnus-check-new-newsgroups' and
`gnus-check-bogus-newsgroups' to `nil' to make startup faster.

Set `gnus-show-threads', `gnus-use-cross-reference' and
`gnus-nov-is-evil' to `nil' to make entering and exiting the summary
buffer faster.  Also *Note Slow/Expensive Connection::.




File: gnus, Node: Troubleshooting, Next: Gnus Reference Guide, Prev: Customization, Up: Appendices

Troubleshooting
===============

Gnus works *so* well straight out of the box--I can't imagine any
problems, really.

Ahem.


  1. Make sure your computer is switched on.

  2. Make sure that you really load the current Gnus version.  If you
     have been running GNUS, you need to exit Emacs and start it up
     again before Gnus will work.

  3. Try doing an `M-x gnus-version'.  If you get something that looks
     like `No Gnus v0.10' you have the right files loaded.  Otherwise
     you have some old `.el' files lying around.  Delete these.

  4. Read the help group (`G h' in the group buffer) for a
     FAQ and a how-to.

  5. Gnus works on many recursive structures, and in some extreme (and
     very rare) cases Gnus may recurse down "too deeply" and Emacs
     will beep at you.  If this happens to you, set
     `max-lisp-eval-depth' to 500 or something like that.

If all else fails, report the problem as a bug.


If you find a bug in Gnus, you can report it with the `M-x gnus-bug'
command.  `M-x set-variable RET debug-on-error RET t RET', and send me
the backtrace.  I will fix bugs, but I can only fix them if you send
me a precise description as to how to reproduce the bug.

You really can never be too detailed in a bug report.  Always use the
`M-x gnus-bug' command when you make bug reports, even if it creates a
10Kb mail each time you use it, and even if you have sent me your
environment 500 times before.  I don't care.  I want the full info
each time.

It is also important to remember that I have no memory whatsoever.  If
you send a bug report, and I send you a reply, and then you just send
back "No, it's not! Moron!", I will have no idea what you are
insulting me about.  Always over-explain everything.  It's much easier
for all of us--if I don't have all the information I need, I will just
mail you and ask for more info, and everything takes more time.

If the problem you're seeing is very visual, and you can't quite
explain it, copy the Emacs window to a file (with `xwd', for
instance), put it somewhere it can be reached, and include the URL of
the picture in the bug report.

If you would like to contribute a patch to fix bugs or make
improvements, please produce the patch using `diff -u'.

If you want to debug your problem further before reporting, possibly
in order to solve the problem yourself and send a patch, you can use
edebug.  Debugging Lisp code is documented in the Elisp manual
(*Note Debugging Lisp Programs: (elisp)Debugging.).  To get you started with edebug, consider if
you discover some weird behavior when pressing `c', the first
step is to do `C-h k c' and click on the hyperlink (Emacs only) in
the documentation buffer that leads you to the function definition,
then press `M-x edebug-defun RET' with point inside that function,
return to Gnus and press `c' to invoke the code.  You will be
placed in the lisp buffer and can single step using `SPC' and
evaluate expressions using `M-:' or inspect variables using
`C-h v', abort execution with `q', and resume execution with
`c' or `g'.

Sometimes, a problem do not directly generate an elisp error but
manifests itself by causing Gnus to be very slow.  In these cases, you
can use `M-x toggle-debug-on-quit' and press `C-g' when things are
slow, and then try to analyze the backtrace (repeating the procedure
helps isolating the real problem areas).

A fancier approach is to use the elisp profiler, ELP.  The profiler is
(or should be) fully documented elsewhere, but to get you started
there are a few steps that need to be followed.  First, instrument the
part of Gnus you are interested in for profiling, e.g. `M-x
elp-instrument-package RET gnus' or `M-x elp-instrument-package RET
message'.  Then perform the operation that is slow and press `M-x
elp-results'.  You will then see which operations that takes time, and
can debug them further.  If the entire operation takes much longer
than the time spent in the slowest function in the profiler output,
you probably profiled the wrong part of Gnus.  To reset profiling
statistics, use `M-x elp-reset-all'.  `M-x elp-restore-all' is
supposed to remove profiling, but given the complexities and dynamic
code generation in Gnus, it might not always work perfectly.

If you just need help, you are better off asking on
`gnu.emacs.gnus'.  I'm not very helpful.  You can also ask on
the ding mailing list <ding@gnus.org>.  Write to
<ding-request@gnus.org> to subscribe.




File: gnus, Node: Gnus Reference Guide, Next: Emacs for Heathens, Prev: Troubleshooting, Up: Appendices

Gnus Reference Guide
====================

It is my hope that other people will figure out smart stuff that Gnus
can do, and that other people will write those smart things as well.
To facilitate that I thought it would be a good idea to describe the
inner workings of Gnus.  And some of the not-so-inner workings, while
I'm at it.

You can never expect the internals of a program not to change, but I
will be defining (in some details) the interface between Gnus and its
back ends (this is written in stone), the format of the score files
(ditto), data structures (some are less likely to change than others)
and general methods of operation.

* Menu:

* Gnus Utility Functions::      Common functions and variable to use.
* Back End Interface::          How Gnus communicates with the servers.
* Score File Syntax::           A BNF definition of the score file standard.
* Headers::                     How Gnus stores headers internally.
* Ranges::                      A handy format for storing mucho numbers.
* Group Info::                  The group info format.
* Extended Interactive::        Symbolic prefixes and stuff.
* Emacs/XEmacs Code::           Gnus can be run under all modern Emacsen.
* Various File Formats::        Formats of files that Gnus use.




File: gnus, Node: Gnus Utility Functions, Next: Back End Interface, Prev: Gnus Reference Guide, Up: Gnus Reference Guide

Gnus Utility Functions
----------------------

When writing small functions to be run from hooks (and stuff), it's
vital to have access to the Gnus internal functions and variables.
Below is a list of the most common ones.


`gnus-newsgroup-name'
     This variable holds the name of the current newsgroup.

`gnus-find-method-for-group'
     A function that returns the select method for GROUP.

`gnus-group-real-name'
     Takes a full (prefixed) Gnus group name, and returns the
     unprefixed name.

`gnus-group-prefixed-name'
     Takes an unprefixed group name and a select method, and returns
     the full (prefixed) Gnus group name.

`gnus-get-info'
     Returns the group info list for GROUP.

`gnus-group-unread'
     The number of unread articles in GROUP, or `t' if that is
     unknown.

`gnus-active'
     The active entry for GROUP.

`gnus-set-active'
     Set the active entry for GROUP.

`gnus-add-current-to-buffer-list'
     Adds the current buffer to the list of buffers to be killed on
     Gnus exit.

`gnus-continuum-version'
     Takes a Gnus version string as a parameter and returns a floating
     point number.  Earlier versions will always get a lower number
     than later versions.

`gnus-group-read-only-p'
     Says whether GROUP is read-only or not.

`gnus-news-group-p'
     Says whether GROUP came from a news back end.

`gnus-ephemeral-group-p'
     Says whether GROUP is ephemeral or not.

`gnus-server-to-method'
     Returns the select method corresponding to SERVER.

`gnus-server-equal'
     Says whether two virtual servers are equal.

`gnus-group-native-p'
     Says whether GROUP is native or not.

`gnus-group-secondary-p'
     Says whether GROUP is secondary or not.

`gnus-group-foreign-p'
     Says whether GROUP is foreign or not.

`gnus-group-find-parameter'
     Returns the parameter list of GROUP.  If given a second
     parameter, returns the value of that parameter for GROUP.

`gnus-group-set-parameter'
     Takes three parameters; GROUP, PARAMETER and VALUE.

`gnus-narrow-to-body'
     Narrows the current buffer to the body of the article.

`gnus-check-backend-function'
     Takes two parameters, FUNCTION and GROUP.  If the back end
     GROUP comes from supports FUNCTION, return non-`nil'.

          (gnus-check-backend-function "request-scan" "nnml:misc")
          => t

`gnus-read-method'
     Prompts the user for a select method.





File: gnus, Node: Back End Interface, Next: Score File Syntax, Prev: Gnus Utility Functions, Up: Gnus Reference Guide

Back End Interface
------------------

Gnus doesn't know anything about NNTP, spools, mail or virtual
groups.  It only knows how to talk to "virtual servers".  A virtual
server is a "back end" and some "back end variables".  As examples
of the first, we have `nntp', `nnspool' and `nnmbox'.  As
examples of the latter we have `nntp-port-number' and
`nnmbox-directory'.

When Gnus asks for information from a back end--say `nntp'---on
something, it will normally include a virtual server name in the
function parameters.  (If not, the back end should use the "current"
virtual server.)  For instance, `nntp-request-list' takes a virtual
server as its only (optional) parameter.  If this virtual server
hasn't been opened, the function should fail.

Note that a virtual server name has no relation to some physical
server name.  Take this example:

     (nntp "odd-one"
           (nntp-address "ifi.uio.no")
           (nntp-port-number 4324))

Here the virtual server name is `odd-one' while the name of the
physical server is `ifi.uio.no'.

The back ends should be able to switch between several virtual
servers.  The standard back ends implement this by keeping an alist of
virtual server environments that they pull down/push up when needed.

There are two groups of interface functions: "required functions",
which must be present, and "optional functions", which Gnus will
always check for presence before attempting to call 'em.

All these functions are expected to return data in the buffer
`nntp-server-buffer' (` *nntpd*'), which is somewhat unfortunately
named, but we'll have to live with it.  When I talk about "resulting
data", I always refer to the data in that buffer.  When I talk about
return value", I talk about the function value returned by the
function call.  Functions that fail should return `nil' as the return
value.

Some back ends could be said to be "server-forming" back ends, and
some might be said not to be.  The latter are back ends that generally
only operate on one group at a time, and have no concept of "server"
---they have a group, and they deliver info on that group and nothing
more.

Gnus identifies each message by way of group name and article number.
A few remarks about these article numbers might be useful.  First of
all, the numbers are positive integers.  Secondly, it is normally not
possible for later articles to "re-use" older article numbers without
confusing Gnus.  That is, if a group has ever contained a message
numbered 42, then no other message may get that number, or Gnus will
get mightily confused. (1) (*Note Back End Interface-Footnotes::)
Third, article numbers must be assigned in order of arrival in the
group; this is not necessarily the same as the date of the message.

The previous paragraph already mentions all the "hard" restrictions
that article numbers must fulfill.  But it seems that it might be
useful to assign *consecutive* article numbers, for Gnus gets quite
confused if there are holes in the article numbering sequence.
However, due to the "no-reuse" restriction, holes cannot be avoided
altogether.  It's also useful for the article numbers to start at 1 to
avoid running out of numbers as long as possible.

Note that by convention, back ends are named `nnsomething', but
Gnus also comes with some `nnnotbackends', such as
`nnheader.el', `nnmail.el' and `nnoo.el'.

In the examples and definitions I will refer to the imaginary back end
`nnchoke'.


* Menu:

* Required Back End Functions::  Functions that must be implemented.
* Optional Back End Functions::  Functions that need not be implemented.
* Error Messaging::             How to get messages and report errors.
* Writing New Back Ends::       Extending old back ends.
* Hooking New Back Ends Into Gnus::  What has to be done on the Gnus end.
* Mail-like Back Ends::         Some tips on mail back ends.



File: gnus  Node: Back End Interface-Footnotes, Up: Back End Interface

(1) See the function `nnchoke-request-update-info', *Note Optional Back End Functions::.



File: gnus, Node: Required Back End Functions, Next: Optional Back End Functions, Prev: Back End Interface, Up: Back End Interface

Required Back End Functions
...........................


`(nnchoke-retrieve-headers ARTICLES &optional GROUP SERVER FETCH-OLD)'

     ARTICLES is either a range of article numbers or a list of
     `Message-ID's.  Current back ends do not fully support
     either--only sequences (lists) of article numbers, and most back
     ends do not support retrieval of `Message-ID's.  But they should
     try for both.

     The result data should either be HEADs or NOV lines, and the
     result value should either be `headers' or `nov' to reflect this.
     This might later be expanded to `various', which will be a
     mixture of HEADs and NOV lines, but this is currently not
     supported by Gnus.

     If FETCH-OLD is non-`nil' it says to try fetching "extra
     headers", in some meaning of the word.  This is generally done by
     fetching (at most) FETCH-OLD extra headers less than the smallest
     article number in `articles', and filling the gaps as well.  The
     presence of this parameter can be ignored if the back end finds
     it cumbersome to follow the request.  If this is non-`nil' and
     not a number, do maximum fetches.

     Here's an example HEAD:

          221 1056 Article retrieved.
          Path: ifi.uio.no!sturles
          From: sturles@ifi.uio.no (Sturle Sunde)
          Newsgroups: ifi.discussion
          Subject: Re: Something very droll
          Date: 27 Oct 1994 14:02:57 +0100
          Organization: Dept. of Informatics, University of Oslo, Norway
          Lines: 26
          Message-ID: <38o8e1$a0o@holmenkollen.ifi.uio.no>
          References: <38jdmq$4qu@visbur.ifi.uio.no>
          NNTP-Posting-Host: holmenkollen.ifi.uio.no
          .

     So a `headers' return value would imply that there's a number of
     these in the data buffer.

     Here's a BNF definition of such a buffer:

          headers        = *head
          head           = error / valid-head
          error-message  = [ "4" / "5" ] 2number " " <error message> eol
          valid-head     = valid-message *header "." eol
          valid-message  = "221 " <number> " Article retrieved." eol
          header         = <text> eol

     (The version of BNF used here is the one used in RFC822.)

     If the return value is `nov', the data buffer should contain
     network overview database" lines.  These are basically fields
     separated by tabs.

          nov-buffer = *nov-line
          nov-line   = field 7*8[ <TAB> field ] eol
          field      = <text except TAB>

     For a closer look at what should be in those fields,
     *Note Headers::.


`(nnchoke-open-server SERVER &optional DEFINITIONS)'

     SERVER is here the virtual server name.  DEFINITIONS is a list of
     `(VARIABLE VALUE)' pairs that define this virtual server.

     If the server can't be opened, no error should be signaled.  The
     back end may then choose to refuse further attempts at connecting
     to this server.  In fact, it should do so.

     If the server is opened already, this function should return a
     non-`nil' value.  There should be no data returned.


`(nnchoke-close-server &optional SERVER)'

     Close connection to SERVER and free all resources connected to
     it.  Return `nil' if the server couldn't be closed for some
     reason.

     There should be no data returned.


`(nnchoke-request-close)'

     Close connection to all servers and free all resources that the
     back end have reserved.  All buffers that have been created by
     that back end should be killed.  (Not the `nntp-server-buffer',
     though.)  This function is generally only called when Gnus is
     shutting down.

     There should be no data returned.


`(nnchoke-server-opened &optional SERVER)'

     If SERVER is the current virtual server, and the connection to
     the physical server is alive, then this function should return a
     non-`nil' value.  This function should under no circumstances
     attempt to reconnect to a server we have lost connection to.

     There should be no data returned.


`(nnchoke-status-message &optional SERVER)'

     This function should return the last error message from SERVER.

     There should be no data returned.


`(nnchoke-request-article ARTICLE &optional GROUP SERVER TO-BUFFER)'

     The result data from this function should be the article
     specified by ARTICLE.  This might either be a `Message-ID' or a
     number.  It is optional whether to implement retrieval by
     `Message-ID', but it would be nice if that were possible.

     If TO-BUFFER is non-`nil', the result data should be returned in
     this buffer instead of the normal data buffer.  This is to make
     it possible to avoid copying large amounts of data from one
     buffer to another, while Gnus mainly requests articles to be
     inserted directly into its article buffer.

     If it is at all possible, this function should return a cons cell
     where the `car' is the group name the article was fetched from,
     and the `cdr' is the article number.  This will enable Gnus to
     find out what the real group and article numbers are when
     fetching articles by `Message-ID'.  If this isn't possible, `t'
     should be returned on successful article retrieval.


`(nnchoke-request-group GROUP &optional SERVER FAST)'

     Get data on GROUP.  This function also has the side effect of
     making GROUP the current group.

     If FAST, don't bother to return useful data, just make GROUP the
     current group.

     Here's an example of some result data and a definition of the
     same:

          211 56 1000 1059 ifi.discussion

     The first number is the status, which should be 211.  Next is the
     total number of articles in the group, the lowest article number,
     the highest article number, and finally the group name.  Note
     that the total number of articles may be less than one might
     think while just considering the highest and lowest article
     numbers, but some articles may have been canceled.  Gnus just
     discards the total-number, so whether one should take the bother
     to generate it properly (if that is a problem) is left as an
     exercise to the reader.  If the group contains no articles, the
     lowest article number should be reported as 1 and the highest as
     0.

          group-status = [ error / info ] eol
          error        = [ "4" / "5" ] 2<number> " " <Error message>
          info         = "211 " 3* [ <number> " " ] <string>


`(nnchoke-close-group GROUP &optional SERVER)'

     Close GROUP and free any resources connected to it.  This will be
     a no-op on most back ends.

     There should be no data returned.


`(nnchoke-request-list &optional SERVER)'

     Return a list of all groups available on SERVER.  And that means
     *all*.

     Here's an example from a server that only carries two groups:

          ifi.test 0000002200 0000002000 y
          ifi.discussion 3324 3300 n

     On each line we have a group name, then the highest article
     number in that group, the lowest article number, and finally a
     flag.  If the group contains no articles, the lowest article
     number should be reported as 1 and the highest as 0.

          active-file = *active-line
          active-line = name " " <number> " " <number> " " flags eol
          name        = <string>
          flags       = "n" / "y" / "m" / "x" / "j" / "=" name

     The flag says whether the group is read-only (`n'), is moderated
     (`m'), is dead (`x'), is aliased to some other group
     (`=other-group') or none of the above (`y').


`(nnchoke-request-post &optional SERVER)'

     This function should post the current buffer.  It might return
     whether the posting was successful or not, but that's not
     required.  If, for instance, the posting is done asynchronously,
     it has generally not been completed by the time this function
     concludes.  In that case, this function should set up some kind
     of sentinel to beep the user loud and clear if the posting could
     not be completed.

     There should be no result data from this function.





File: gnus, Node: Optional Back End Functions, Next: Error Messaging, Prev: Required Back End Functions, Up: Back End Interface

Optional Back End Functions
...........................


`(nnchoke-retrieve-groups GROUPS &optional SERVER)'

     GROUPS is a list of groups, and this function should request data
     on all those groups.  How it does it is of no concern to Gnus,
     but it should attempt to do this in a speedy fashion.

     The return value of this function can be either `active' or
     `group', which says what the format of the result data is.  The
     former is in the same format as the data from
     `nnchoke-request-list', while the latter is a buffer full of
     lines in the same format as `nnchoke-request-group' gives.

          group-buffer = *active-line / *group-status


`(nnchoke-request-update-info GROUP INFO &optional SERVER)'

     A Gnus group info (*Note Group Info::) is handed to the back end
     for alterations.  This comes in handy if the back end really
     carries all the information (as is the case with virtual and imap
     groups).  This function should destructively alter the info to
     suit its needs, and should return a non-`nil' value
     (exceptionally, `nntp-request-update-info' always returns `nil'
     not to waste the network resources).

     There should be no result data from this function.


`(nnchoke-request-type GROUP &optional ARTICLE)'

     When the user issues commands for "sending news" (`F' in the
     summary buffer, for instance), Gnus has to know whether the
     article the user is following up on is news or mail.  This
     function should return `news' if ARTICLE in GROUP is news, `mail'
     if it is mail and `unknown' if the type can't be decided.  (The
     ARTICLE parameter is necessary in `nnvirtual' groups which might
     very well combine mail groups and news groups.)  Both GROUP and
     ARTICLE may be `nil'.

     There should be no result data from this function.


`(nnchoke-request-set-mark GROUP ACTION &optional SERVER)'

     Set/remove/add marks on articles.  Normally Gnus handles the
     article marks (such as read, ticked, expired etc) internally, and
     store them in `~/.newsrc.eld'.  Some back ends (such as IMAP)
     however carry all information about the articles on the server,
     so Gnus need to propagate the mark information to the server.

     ACTION is a list of mark setting requests, having this format:

          (RANGE ACTION MARK)

     RANGE is a range of articles you wish to update marks on.  ACTION
     is `add' or `del', used to add marks or remove marks (preserving
     all marks not mentioned).  MARK is a list of marks; where each
     mark is a symbol.  Currently used marks are `read', `tick',
     `reply', `expire', `killed', `dormant', `save', `download',
     `unsend', `forward' and `recent', but your back end should, if
     possible, not limit itself to these.

     Given contradictory actions, the last action in the list should
     be the effective one.  That is, if your action contains a request
     to add the `tick' mark on article 1 and, later in the list, a
     request to remove the mark on the same article, the mark should
     in fact be removed.

     An example action list:

          (((5 12 30) 'del '(tick))
           ((10 . 90) 'add '(read expire))
           ((92 94) 'del '(read)))

     The function should return a range of articles it wasn't able to
     set the mark on (currently not used for anything).

     There should be no result data from this function.

`(nnchoke-request-update-mark GROUP ARTICLE MARK)'

     If the user tries to set a mark that the back end doesn't like, this
     function may change the mark.  Gnus will use whatever this function
     returns as the mark for ARTICLE instead of the original
     MARK.  If the back end doesn't care, it must return the original
     MARK, and not `nil' or any other type of garbage.

     The only use for this I can see is what `nnvirtual' does with
     it--if a component group is auto-expirable, marking an article as
     read in the virtual group should result in the article being
     marked as expirable.

     There should be no result data from this function.


`(nnchoke-request-scan &optional GROUP SERVER)'

     This function may be called at any time (by Gnus or anything
     else) to request that the back end check for incoming articles,
     in one way or another.  A mail back end will typically read the
     spool file or query the POP server when this function is invoked.
     The GROUP doesn't have to be heeded--if the back end decides that
     it is too much work just scanning for a single group, it may do a
     total scan of all groups.  It would be nice, however, to keep
     things local if that's practical.

     There should be no result data from this function.


`(nnchoke-request-group-description GROUP &optional SERVER)'

     The result data from this function should be a description of
     GROUP.

          description-line = name <TAB> description eol
          name             = <string>
          description      = <text>

`(nnchoke-request-list-newsgroups &optional SERVER)'

     The result data from this function should be the description of
     all groups available on the server.

          description-buffer = *description-line


`(nnchoke-request-newgroups DATE &optional SERVER)'

     The result data from this function should be all groups that were
     created after `date', which is in normal human-readable date
     format (i.e., the date format used in mail and news headers, and
     returned by the function `message-make-date' by default).  The
     data should be in the active buffer format.

     It is okay for this function to return "too many" groups; some
     back ends might find it cheaper to return the full list of
     groups, rather than just the new groups.  But don't do this for
     back ends with many groups.  Normally, if the user creates the
     groups herself, there won't be too many groups, so `nnml' and the
     like are probably safe.  But for back ends like `nntp', where the
     groups have been created by the server, it is quite likely that
     there can be many groups.


`(nnchoke-request-create-group GROUP &optional SERVER)'

     This function should create an empty group with name GROUP.

     There should be no return data.


`(nnchoke-request-expire-articles ARTICLES &optional GROUP SERVER FORCE)'

     This function should run the expiry process on all articles in
     the ARTICLES range (which is currently a simple list of article
     numbers.)  It is left up to the back end to decide how old
     articles should be before they are removed by this function.  If
     FORCE is non-`nil', all ARTICLES should be deleted, no matter how
     new they are.

     This function should return a list of articles that it did
     not/was not able to delete.

     There should be no result data returned.


`(nnchoke-request-move-article ARTICLE GROUP SERVER ACCEPT-FORM &optional LAST)'

     This function should move ARTICLE (which is a number) from
     GROUP by calling ACCEPT-FORM.

     This function should ready the article in question for moving by
     removing any header lines it has added to the article, and
     generally should "tidy up" the article.  Then it should `eval'
     ACCEPT-FORM in the buffer where the "tidy" article is.  This will
     do the actual copying.  If this `eval' returns a non-`nil' value,
     the article should be removed.

     If LAST is `nil', that means that there is a high likelihood that
     there will be more requests issued shortly, so that allows some
     optimizations.

     The function should return a cons where the `car' is the group
     name and the `cdr' is the article number that the article was
     entered as.

     There should be no data returned.


`(nnchoke-request-accept-article GROUP &optional SERVER LAST)'

     This function takes the current buffer and inserts it into GROUP.
     If LAST in `nil', that means that there will be more calls to
     this function in short order.

     The function should return a cons where the `car' is the group
     name and the `cdr' is the article number that the article was
     entered as.

     The group should exist before the back end is asked to accept the
     article for that group.

     There should be no data returned.


`(nnchoke-request-replace-article ARTICLE GROUP BUFFER)'

     This function should remove ARTICLE (which is a number) from
     GROUP and insert BUFFER there instead.

     There should be no data returned.


`(nnchoke-request-delete-group GROUP FORCE &optional SERVER)'

     This function should delete GROUP.  If FORCE, it should really
     delete all the articles in the group, and then delete the group
     itself.  (If there is such a thing as "the group itself".)

     There should be no data returned.


`(nnchoke-request-rename-group GROUP NEW-NAME &optional SERVER)'

     This function should rename GROUP into NEW-NAME.  All articles in
     GROUP should move to NEW-NAME.

     There should be no data returned.





File: gnus, Node: Error Messaging, Next: Writing New Back Ends, Prev: Optional Back End Functions, Up: Back End Interface

Error Messaging
...............

The back ends should use the function `nnheader-report' to report
error conditions--they should not raise errors when they aren't able
to perform a request.  The first argument to this function is the back
end symbol, and the rest are interpreted as arguments to `format' if
there are multiple of them, or just a string if there is one of them.
This function must always returns `nil'.

     (nnheader-report 'nnchoke "You did something totally bogus")

     (nnheader-report 'nnchoke "Could not request group %s" group)

Gnus, in turn, will call `nnheader-get-report' when it gets a `nil'
back from a server, and this function returns the most recently
reported message for the back end in question.  This function takes
one argument--the server symbol.

Internally, these functions access BACK-END`-status-string',
so the `nnchoke' back end will have its error message stored in
`nnchoke-status-string'.




File: gnus, Node: Writing New Back Ends, Next: Hooking New Back Ends Into Gnus, Prev: Error Messaging, Up: Back End Interface

Writing New Back Ends
.....................

Many back ends are quite similar.  `nnml' is just like `nnspool', but
it allows you to edit the articles on the server.  `nnmh' is just like
`nnml', but it doesn't use an active file, and it doesn't maintain
overview databases.  `nndir' is just like `nnml', but it has no
concept of "groups", and it doesn't allow editing articles.

It would make sense if it were possible to "inherit" functions from
back ends when writing new back ends.  And, indeed, you can do that if
you want to.  (You don't have to if you don't want to, of course.)

All the back ends declare their public variables and functions by
using a package called `nnoo'.

To inherit functions from other back ends (and allow other back ends
to inherit functions from the current back end), you should use the
following macros:


`nnoo-declare'
     This macro declares the first parameter to be a child of the
     subsequent parameters.  For instance:

          (nnoo-declare nndir
            nnml nnmh)

     `nndir' has declared here that it intends to inherit functions
     from both `nnml' and `nnmh'.

`defvoo'
     This macro is equivalent to `defvar', but registers the variable
     as a public server variable.  Most state-oriented variables
     should be declared with `defvoo' instead of `defvar'.

     In addition to the normal `defvar' parameters, it takes a list of
     variables in the parent back ends to map the variable to when
     executing a function in those back ends.

          (defvoo nndir-directory nil
            "Where nndir will look for groups."
            nnml-current-directory nnmh-current-directory)

     This means that `nnml-current-directory' will be set to
     `nndir-directory' when an `nnml' function is called on behalf of
     `nndir'.  (The same with `nnmh'.)

`nnoo-define-basics'
     This macro defines some common functions that almost all back
     ends should have.

          (nnoo-define-basics nndir)

`deffoo'
     This macro is just like `defun' and takes the same parameters.
     In addition to doing the normal `defun' things, it registers the
     function as being public so that other back ends can inherit it.

`nnoo-map-functions'
     This macro allows mapping of functions from the current back end
     to functions from the parent back ends.

          (nnoo-map-functions nndir
            (nnml-retrieve-headers 0 nndir-current-group 0 0)
            (nnmh-request-article 0 nndir-current-group 0 0))

     This means that when `nndir-retrieve-headers' is called, the
     first, third, and fourth parameters will be passed on to
     `nnml-retrieve-headers', while the second parameter is set to the
     value of `nndir-current-group'.

`nnoo-import'
     This macro allows importing functions from back ends.  It should
     be the last thing in the source file, since it will only define
     functions that haven't already been defined.

          (nnoo-import nndir
            (nnmh
             nnmh-request-list
             nnmh-request-newgroups)
            (nnml))

     This means that calls to `nndir-request-list' should just be
     passed on to `nnmh-request-list', while all public functions from
     `nnml' that haven't been defined in `nndir' yet should be defined
     now.


Below is a slightly shortened version of the `nndir' back end.

     ;;; nndir.el -- single directory newsgroup access for Gnus
     ;; Copyright (C) 1995,96 Free Software Foundation, Inc.

     ;;; Code:

     (require 'nnheader)
     (require 'nnmh)
     (require 'nnml)
     (require 'nnoo)
     (eval-when-compile (require 'cl))

     (nnoo-declare nndir
       nnml nnmh)

     (defvoo nndir-directory nil
       "Where nndir will look for groups."
       nnml-current-directory nnmh-current-directory)

     (defvoo nndir-nov-is-evil nil
       "*Non-nil means that nndir will never retrieve NOV headers."
       nnml-nov-is-evil)

     (defvoo nndir-current-group ""
       nil
       nnml-current-group nnmh-current-group)
     (defvoo nndir-top-directory nil nil nnml-directory nnmh-directory)
     (defvoo nndir-get-new-mail nil nil nnml-get-new-mail nnmh-get-new-mail)

     (defvoo nndir-status-string "" nil nnmh-status-string)
     (defconst nndir-version "nndir 1.0")

     ;;; Interface functions.

     (nnoo-define-basics nndir)

     (deffoo nndir-open-server (server &optional defs)
       (setq nndir-directory
             (or (cadr (assq 'nndir-directory defs))
                 server))
       (unless (assq 'nndir-directory defs)
         (push `(nndir-directory ,server) defs))
       (push `(nndir-current-group
               ,(file-name-nondirectory
                 (directory-file-name nndir-directory)))
             defs)
       (push `(nndir-top-directory
               ,(file-name-directory (directory-file-name nndir-directory)))
             defs)
       (nnoo-change-server 'nndir server defs))

     (nnoo-map-functions nndir
       (nnml-retrieve-headers 0 nndir-current-group 0 0)
       (nnmh-request-article 0 nndir-current-group 0 0)
       (nnmh-request-group nndir-current-group 0 0)
       (nnmh-close-group nndir-current-group 0))

     (nnoo-import nndir
       (nnmh
        nnmh-status-message
        nnmh-request-list
        nnmh-request-newgroups))

     (provide 'nndir)




File: gnus, Node: Hooking New Back Ends Into Gnus, Next: Mail-like Back Ends, Prev: Writing New Back Ends, Up: Back End Interface

Hooking New Back Ends Into Gnus
...............................

Having Gnus start using your new back end is rather easy--you just
declare it with the `gnus-declare-backend' functions.  This will enter
the back end into the `gnus-valid-select-methods' variable.

`gnus-declare-backend' takes two parameters--the back end name and an
arbitrary number of "abilities".

Here's an example:

     (gnus-declare-backend "nnchoke" 'mail 'respool 'address)

The above line would then go in the `nnchoke.el' file.

The abilities can be:

`mail'
     This is a mailish back end--followups should (probably) go via
     mail.
`post'
     This is a newsish back end--followups should (probably) go via
     news.
`post-mail'
     This back end supports both mail and news.
`none'
     This is neither a post nor mail back end--it's something
     completely different.
`respool'
     It supports respooling--or rather, it is able to modify its
     source articles and groups.
`address'
     The name of the server should be in the virtual server name.
     This is true for almost all back ends.
`prompt-address'
     The user should be prompted for an address when doing commands like
     `B' in the group buffer.  This is true for back ends like
     `nntp', but not `nnmbox', for instance.




File: gnus, Node: Mail-like Back Ends, Prev: Hooking New Back Ends Into Gnus, Up: Back End Interface

Mail-like Back Ends
...................

One of the things that separate the mail back ends from the rest of
the back ends is the heavy dependence by most of the mail back ends on
common functions in `nnmail.el'.  For instance, here's the definition
of `nnml-request-scan':

     (deffoo nnml-request-scan (&optional group server)
       (setq nnml-article-file-alist nil)
       (nnmail-get-new-mail 'nnml 'nnml-save-nov nnml-directory group))

It simply calls `nnmail-get-new-mail' with a few parameters, and
`nnmail' takes care of all the moving and splitting of the mail.

This function takes four parameters.

METHOD
     This should be a symbol to designate which back end is
     responsible for the call.

EXIT-FUNCTION
     This function should be called after the splitting has been
     performed.

TEMP-DIRECTORY
     Where the temporary files should be stored.

GROUP
     This optional argument should be a group name if the splitting is
     to be performed for one group only.

`nnmail-get-new-mail' will call BACK-END`-save-mail' to save each
article.  BACK-END`-active-number' will be called to find the article
number assigned to this article.

The function also uses the following variables:
BACK-END`-get-new-mail' (to see whether to get new mail for this back
end); and BACK-END`-group-alist' and BACK-END`-active-file' to
generate the new active file.  BACK-END`-group-alist' should be a
group-active alist, like this:

     (("a-group" (1 . 10))
      ("some-group" (34 . 39)))




File: gnus, Node: Score File Syntax, Next: Headers, Prev: Back End Interface, Up: Gnus Reference Guide

Score File Syntax
-----------------

Score files are meant to be easily parseable, but yet extremely
mallable.  It was decided that something that had the same read syntax
as an Emacs Lisp list would fit that spec.

Here's a typical score file:

     (("summary"
       ("win95" -10000 nil s)
       ("Gnus"))
      ("from"
       ("Lars" -1000))
      (mark -100))

BNF definition of a score file:

     score-file      = "" / "(" *element ")"
     element         = rule / atom
     rule            = string-rule / number-rule / date-rule
     string-rule     = "(" quote string-header quote space *string-match ")"
     number-rule     = "(" quote number-header quote space *number-match ")"
     date-rule       = "(" quote date-header quote space *date-match ")"
     quote           = <ascii 34>
     string-header   = "subject" / "from" / "references" / "message-id" /
                       "xref" / "body" / "head" / "all" / "followup"
     number-header   = "lines" / "chars"
     date-header     = "date"
     string-match    = "(" quote <string> quote [ "" / [ space score [ "" /
                       space date [ "" / [ space string-match-t ] ] ] ] ] ")"
     score           = "nil" / <integer>
     date            = "nil" / <natural number>
     string-match-t  = "nil" / "s" / "substring" / "S" / "Substring" /
                       "r" / "regex" / "R" / "Regex" /
                       "e" / "exact" / "E" / "Exact" /
                       "f" / "fuzzy" / "F" / "Fuzzy"
     number-match    = "(" <integer> [ "" / [ space score [ "" /
                       space date [ "" / [ space number-match-t ] ] ] ] ] ")"
     number-match-t  = "nil" / "=" / "<" / ">" / ">=" / "<="
     date-match      = "(" quote <string> quote [ "" / [ space score [ "" /
                       space date [ "" / [ space date-match-t ] ] ] ] ")"
     date-match-t    = "nil" / "at" / "before" / "after"
     atom            = "(" [ required-atom / optional-atom ] ")"
     required-atom   = mark / expunge / mark-and-expunge / files /
                       exclude-files / read-only / touched
     optional-atom   = adapt / local / eval
     mark            = "mark" space nil-or-number
     nil-or-number   = "nil" / <integer>
     expunge         = "expunge" space nil-or-number
     mark-and-expunge = "mark-and-expunge" space nil-or-number
     files           = "files" *[ space <string> ]
     exclude-files   = "exclude-files" *[ space <string> ]
     read-only       = "read-only" [ space "nil" / space "t" ]
     adapt        = "adapt" [ space "ignore" / space "t" / space adapt-rule ]
     adapt-rule      = "(" *[ <string> *[ "(" <string> <integer> ")" ] ")"
     local           = "local" *[ space "(" <string> space <form> ")" ]
     eval            = "eval" space <form>
     space           = *[ " " / <TAB> / <NEWLINE> ]

Any unrecognized elements in a score file should be ignored, but not
discarded.

As you can see, white space is needed, but the type and amount of
white space is irrelevant.  This means that formatting of the score
file is left up to the programmer--if it's simpler to just spew it all
out on one looong line, then that's ok.

The meaning of the various atoms are explained elsewhere in this
manual (*Note Score File Format::).




File: gnus, Node: Headers, Next: Ranges, Prev: Score File Syntax, Up: Gnus Reference Guide

Headers
-------

Internally Gnus uses a format for storing article headers that
corresponds to the NOV format in a mysterious fashion.  One could
almost suspect that the author looked at the NOV specification and
just shamelessly *stole* the entire thing, and one would be right.

"Header" is a severely overloaded term.  "Header" is used in RFC 1036
to talk about lines in the head of an article (e.g., `From').  It is
used by many people as a synonym for "head"---"the header and the
body".  (That should be avoided, in my opinion.)  And Gnus uses a
format internally that it calls "header", which is what I'm talking
about here.  This is a 9-element vector, basically, with each header
(ouch) having one slot.

These slots are, in order: `number', `subject', `from',
`date', `id', `references', `chars', `lines',
`xref', and `extra'.  There are macros for accessing and
setting these slots--they all have predictable names beginning with
`mail-header-' and `mail-header-set-', respectively.

All these slots contain strings, except the `extra' slot, which
contains an alist of header/value pairs (*Note To From Newsgroups::).




File: gnus, Node: Ranges, Next: Group Info, Prev: Headers, Up: Gnus Reference Guide

Ranges
------

GNUS introduced a concept that I found so useful that I've started
using it a lot and have elaborated on it greatly.

The question is simple: If you have a large amount of objects that are
identified by numbers (say, articles, to take a *wild* example) that
you want to qualify as being "included", a normal sequence isn't very
useful.  (A 200,000 length sequence is a bit long-winded.)

The solution is as simple as the question: You just collapse the
sequence.

     (1 2 3 4 5 6 10 11 12)

is transformed into

     ((1 . 6) (10 . 12))

To avoid having those nasty `(13 . 13)' elements to denote a lonesome
object, a `13' is a valid element:

     ((1 . 6) 7 (10 . 12))

This means that comparing two ranges to find out whether they are
equal is slightly tricky:

     ((1 . 5) 7 8 (10 . 12))

and

     ((1 . 5) (7 . 8) (10 . 12))

are equal.  In fact, any non-descending list is a range:

     (1 2 3 4 5)

is a perfectly valid range, although a pretty long-winded one.  This
is also valid:

     (1 . 5)

and is equal to the previous range.

Here's a BNF definition of ranges.  Of course, one must remember the
semantic requirement that the numbers are non-descending.  (Any number
of repetition of the same number is allowed, but apt to disappear in
range handling.)

     range           = simple-range / normal-range
     simple-range    = "(" number " . " number ")"
     normal-range    = "(" start-contents ")"
     contents        = "" / simple-range *[ " " contents ] /
                       number *[ " " contents ]

Gnus currently uses ranges to keep track of read articles and article
marks.  I plan on implementing a number of range operators in C if The
Powers That Be are willing to let me.  (I haven't asked yet, because I
need to do some more thinking on what operators I need to make life
totally range-based without ever having to convert back to normal
sequences.)




File: gnus, Node: Group Info, Next: Extended Interactive, Prev: Ranges, Up: Gnus Reference Guide

Group Info
----------

Gnus stores all permanent info on groups in a "group info" list.  This
list is from three to six elements (or more) long and exhaustively
describes the group.

Here are two example group infos; one is a very simple group while the
second is a more complex one:

     ("no.group" 5 ((1 . 54324)))

     ("nnml:my.mail" 3 ((1 . 5) 9 (20 . 55))
                     ((tick (15 . 19)) (replied 3 6 (19 . 3)))
                     (nnml "")
                     ((auto-expire . t) (to-address . "ding@gnus.org")))

The first element is the "group name"---as Gnus knows the group,
anyway.  The second element is the "subscription level", which
normally is a small integer.  (It can also be the "rank", which is a
cons cell where the `car' is the level and the `cdr' is the score.)
The third element is a list of ranges of read articles.  The fourth
element is a list of lists of article marks of various kinds.  The
fifth element is the select method (or virtual server, if you like).
The sixth element is a list of "group parameters", which is what this
section is about.

Any of the last three elements may be missing if they are not
required.  In fact, the vast majority of groups will normally only
have the first three elements, which saves quite a lot of cons cells.

Here's a BNF definition of the group info format:

     info          = "(" group space ralevel space read
                     [ "" / [ space marks-list [ "" / [ space method [ "" /
                     space parameters ] ] ] ] ] ")"
     group         = quote <string> quote
     ralevel       = rank / level
     level         = <integer in the range of 1 to inf>
     rank          = "(" level "." score ")"
     score         = <integer in the range of 1 to inf>
     read          = range
     marks-lists   = nil / "(" *marks ")"
     marks         = "(" <string> range ")"
     method        = "(" <string> *elisp-forms ")"
     parameters    = "(" *elisp-forms ")"

Actually that `marks' rule is a fib.  A `marks' is a `<string>' consed
on to a `range', but that's a bitch to say in pseudo-BNF.

If you have a Gnus info and want to access the elements, Gnus offers a
series of macros for getting/setting these elements.

`gnus-info-group'
`gnus-info-set-group'
     Get/set the group name.

`gnus-info-rank'
`gnus-info-set-rank'
     Get/set the group rank (*Note Group Score::).

`gnus-info-level'
`gnus-info-set-level'
     Get/set the group level.

`gnus-info-score'
`gnus-info-set-score'
     Get/set the group score (*Note Group Score::).

`gnus-info-read'
`gnus-info-set-read'
     Get/set the ranges of read articles.

`gnus-info-marks'
`gnus-info-set-marks'
     Get/set the lists of ranges of marked articles.

`gnus-info-method'
`gnus-info-set-method'
     Get/set the group select method.

`gnus-info-params'
`gnus-info-set-params'
     Get/set the group parameters.

All the getter functions take one parameter--the info list.  The
setter functions take two parameters--the info list and the new value.

The last three elements in the group info aren't mandatory, so it may
be necessary to extend the group info before setting the element.  If
this is necessary, you can just pass on a non-`nil' third parameter to
the three final setter functions to have this happen automatically.




File: gnus, Node: Extended Interactive, Next: Emacs/XEmacs Code, Prev: Group Info, Up: Gnus Reference Guide

Extended Interactive
--------------------

Gnus extends the standard Emacs `interactive' specification slightly
to allow easy use of the symbolic prefix (*Note Symbolic Prefixes::).
Here's an example of how this is used:

     (defun gnus-summary-increase-score (&optional score symp)
       (interactive (gnus-interactive "P\ny"))
       ...
       )

The best thing to do would have been to implement
`gnus-interactive' as a macro which would have returned an
`interactive' form, but this isn't possible since Emacs checks
whether a function is interactive or not by simply doing an `assq'
on the lambda form.  So, instead we have `gnus-interactive'
function that takes a string and returns values that are usable to
`interactive'.

This function accepts (almost) all normal `interactive' specs, but
adds a few more.

`y'
     The current symbolic prefix--the `gnus-current-prefix-symbol'
     variable.

`Y'
     A list of the current symbolic prefixes--the
     `gnus-current-prefix-symbol' variable.

`A'
     The current article number--the `gnus-summary-article-number'
     function.

`H'
     The current article header--the `gnus-summary-article-header'
     function.

`g'
     The current group name--the `gnus-group-group-name' function.





File: gnus, Node: Emacs/XEmacs Code, Next: Various File Formats, Prev: Extended Interactive, Up: Gnus Reference Guide

Emacs/XEmacs Code
-----------------

While Gnus runs under Emacs, XEmacs and Mule, I decided that one of
the platforms must be the primary one.  I chose Emacs.  Not because I
don't like XEmacs or Mule, but because it comes first alphabetically.

This means that Gnus will byte-compile under Emacs with nary a
warning, while XEmacs will pump out gigabytes of warnings while
byte-compiling.  As I use byte-compilation warnings to help me root
out trivial errors in Gnus, that's very useful.

I've also consistently used Emacs function interfaces, but have used
Gnusey aliases for the functions.  To take an example: Emacs defines a
`run-at-time' function while XEmacs defines a `start-itimer' function.
I then define a function called `gnus-run-at-time' that takes the same
parameters as the Emacs `run-at-time'.  When running Gnus under Emacs,
the former function is just an alias for the latter.  However, when
running under XEmacs, the former is an alias for the following
function:

     (defun gnus-xmas-run-at-time (time repeat function &rest args)
       (start-itimer
        "gnus-run-at-time"
        `(lambda ()
           (,function ,@args))
        time repeat))

This sort of thing has been done for bunches of functions.  Gnus does
not redefine any native Emacs functions while running under XEmacs--it
does this `defalias' thing with Gnus equivalents instead.  Cleaner all
over.

In the cases where the XEmacs function interface was obviously
cleaner, I used it instead.  For example `gnus-region-active-p' is an
alias for `region-active-p' in XEmacs, whereas in Emacs it is a
function.

Of course, I could have chosen XEmacs as my native platform and done
mapping functions the other way around.  But I didn't.  The
performance hit these indirections impose on Gnus under XEmacs should
be slight.




File: gnus, Node: Various File Formats, Prev: Emacs/XEmacs Code, Up: Gnus Reference Guide

Various File Formats
--------------------

* Menu:

* Active File Format::          Information on articles and groups available.
* Newsgroups File Format::      Group descriptions.




File: gnus, Node: Active File Format, Next: Newsgroups File Format, Prev: Various File Formats, Up: Various File Formats

Active File Format
..................

The active file lists all groups available on the server in question.
It also lists the highest and lowest current article numbers in each
group.

Here's an excerpt from a typical active file:

     soc.motss 296030 293865 y
     alt.binaries.pictures.fractals 3922 3913 n
     comp.sources.unix 1605 1593 m
     comp.binaries.ibm.pc 5097 5089 y
     no.general 1000 900 y

Here's a pseudo-BNF definition of this file:

     active      = *group-line
     group-line  = group spc high-number spc low-number spc flag <NEWLINE>
     group       = <non-white-space string>
     spc         = " "
     high-number = <non-negative integer>
     low-number  = <positive integer>
     flag        = "y" / "n" / "m" / "j" / "x" / "=" group

For a full description of this file, see the manual pages for
`innd', in particular `active(5)'.




File: gnus, Node: Newsgroups File Format, Prev: Active File Format, Up: Various File Formats

Newsgroups File Format
......................

The newsgroups file lists groups along with their descriptions.  Not
all groups on the server have to be listed, and not all groups in the
file have to exist on the server.  The file is meant purely as
information to the user.

The format is quite simple; a group name, a tab, and the description.
Here's the definition:

     newsgroups    = *line
     line          = group tab description <NEWLINE>
     group         = <non-white-space string>
     tab           = <TAB>
     description   = <string>




File: gnus, Node: Emacs for Heathens, Prev: Gnus Reference Guide, Up: Appendices

Emacs for Heathens
==================

Believe it or not, but some people who use Gnus haven't really used
Emacs much before they embarked on their journey on the Gnus Love
Boat.  If you are one of those unfortunates whom "`C-M-a'", "kill the
region", and "set `gnus-flargblossen' to an alist where the key is a
regexp that is used for matching on the group name" are magical
phrases with little or no meaning, then this appendix is for you.  If
you are already familiar with Emacs, just ignore this and go fondle
your cat instead.

* Menu:

* Keystrokes::                  Entering text and executing commands.
* Emacs Lisp::                  The built-in Emacs programming language.




File: gnus, Node: Keystrokes, Next: Emacs Lisp, Prev: Emacs for Heathens, Up: Emacs for Heathens

Keystrokes
----------

   * Q: What is an experienced Emacs user?

   * A: A person who wishes that the terminal had pedals.

Yes, when you use Emacs, you are apt to use the control key, the shift
key and the meta key a lot.  This is very annoying to some people
(notably `vi'le users), and the rest of us just love the hell out of
it.  Just give up and submit.  Emacs really does stand for
Escape-Meta-Alt-Control-Shift", and not "Editing Macros", as you may
have heard from other disreputable sources (like the Emacs author).

The shift keys are normally located near your pinky fingers, and are
normally used to get capital letters and stuff.  You probably use it
all the time.  The control key is normally marked "CTRL" or something
like that.  The meta key is, funnily enough, never marked as such on
any keyboard.  The one I'm currently at has a key that's marked "Alt",
which is the meta key on this keyboard.  It's usually located
somewhere to the left hand side of the keyboard, usually on the bottom
row.

Now, us Emacs people don't say "press the meta-control-m key", because
that's just too inconvenient.  We say "press the `C-M-m' key".  `M-'
is the prefix that means "meta" and "C-" is the prefix that means
control".  So "press `C-k'" means "press down the control key, and
hold it down while you press `k'".  "Press `C-M-k'" means "press down
and hold down the meta key and the control key and then press `k'".
Simple, ay?

This is somewhat complicated by the fact that not all keyboards have a
meta key.  In that case you can use the "escape" key.  Then `M-k'
means "press escape, release escape, press `k'".  That's much more
work than if you have a meta key, so if that's the case, I
respectfully suggest you get a real keyboard with a meta key.  You
can't live without it.





File: gnus, Node: Emacs Lisp, Prev: Keystrokes, Up: Emacs for Heathens

Emacs Lisp
----------

Emacs is the King of Editors because it's really a Lisp interpreter.
Each and every key you tap runs some Emacs Lisp code snippet, and
since Emacs Lisp is an interpreted language, that means that you can
configure any key to run any arbitrary code.  You just, like, do it.

Gnus is written in Emacs Lisp, and is run as a bunch of interpreted
functions.  (These are byte-compiled for speed, but it's still
interpreted.)  If you decide that you don't like the way Gnus does
certain things, it's trivial to have it do something a different way.
(Well, at least if you know how to write Lisp code.)  However, that's
beyond the scope of this manual, so we are simply going to talk about
some common constructs that you normally use in your `~/.gnus.el'
file to customize Gnus.  (You can also use the `~/.emacs' file, but
in order to set things of Gnus up, it is much better to use the
`~/.gnus.el' file, *Note Startup Files::.)

If you want to set the variable `gnus-florgbnize' to four (4), you
write the following:

     (setq gnus-florgbnize 4)

This function (really "special form") `setq' is the one that can set a
variable to some value.  This is really all you need to know.  Now you
can go and fill your `~/.gnus.el' file with lots of these to change
how Gnus works.

If you have put that thing in your `~/.gnus.el' file, it will be read
and `eval'ed (which is Lisp-ese for "run") the next time you start
Gnus.  If you want to change the variable right away, simply say `C-x
C-e' after the closing parenthesis.  That will `eval' the previous
form", which is a simple `setq' statement here.

Go ahead--just try it, if you're located at your Emacs.  After you
`C-x C-e', you will see `4' appear in the echo area, which is the
return value of the form you `eval'ed.

Some pitfalls:

If the manual says "set `gnus-read-active-file' to `some'", that
means:

     (setq gnus-read-active-file 'some)

On the other hand, if the manual says "set `gnus-nntp-server' to
`nntp.ifi.uio.no'", that means:

     (setq gnus-nntp-server "nntp.ifi.uio.no")

So be careful not to mix up strings (the latter) with symbols (the
former).  The manual is unambiguous, but it can be confusing.




File: gnus, Node: Frequently Asked Questions

Frequently Asked Questions
==========================

* Menu:

* FAQ - Changes::
* FAQ - Introduction::                       About Gnus and this FAQ.
* FAQ 1 - Installation FAQ::                 Installation of Gnus.
* FAQ 2 - Startup / Group buffer::           Start up questions and the
                                             first buffer Gnus shows you.
* FAQ 3 - Getting Messages::                 Making Gnus read your mail
                                             and news.
* FAQ 4 - Reading messages::                 How to efficiently read
                                             messages.
* FAQ 5 - Composing messages::               Composing mails or Usenet
                                             postings.
* FAQ 6 - Old messages::                     Importing, archiving,
                                             searching and deleting messages.
* FAQ 7 - Gnus in a dial-up environment::    Reading mail and news while
                                             offline.
* FAQ 8 - Getting help::                     When this FAQ isn't enough.
* FAQ 9 - Tuning Gnus::                      How to make Gnus faster.
* FAQ - Glossary::                           Terms used in the FAQ
                                             explained.


Abstract
--------

This is the new Gnus Frequently Asked Questions list.
If you have a Web browser, the official hypertext version is at
`http://my.gnus.org/FAQ/',
the Docbook source is available from
http://sourceforge.net (http://sourceforge.net/projects/gnus/).

Please submit features and suggestions to the FAQ discussion list
<faq-discuss@my.gnus.org>.  The list is protected against junk mail
with qconfirm (http://smarden.org/qconfirm/index.html). As a
subscriber, your submissions will automatically pass.  You can also
subscribe to the list by sending a blank email to
faq-discuss-subscribe@my.gnus.org <faq-discuss-subscribe@my.gnus.org>
and browse the archive (BROKEN)
(http://mail1.kens.com/cgi-bin/ezmlm-browse?command=monthbythread%26list=faq-discuss).



File: gnus, Node: FAQ - Changes

Changes
-------




   * Updated FAQ to reflect release of Gnus 5.10 and start of No Gnus
     development.



File: gnus, Node: FAQ - Introduction

Introduction
------------

This is the Gnus Frequently Asked Questions list.

Gnus is a Usenet Newsreader and Electronic Mail User Agent implemented
as a part of Emacs. It's been around in some form for almost a decade
now, and has been distributed as a standard part of Emacs for much of
that time. Gnus 5 is the latest (and greatest) incarnation. The
original version was called GNUS, and was written by Masanobu UMEDA.
When autumn crept up in '94, Lars Magne Ingebrigtsen grew bored and
decided to rewrite Gnus.

Its biggest strength is the fact that it is extremely customizable. It
is somewhat intimidating at first glance, but most of the complexity
can be ignored until you're ready to take advantage of it. If you
receive a reasonable volume of e-mail (you're on various mailing
lists), or you would like to read high-volume mailing lists but cannot
keep up with them, or read high volume newsgroups or are just bored,
then Gnus is what you want.

This FAQ was maintained by Justin Sheehy until March 2002. He would
like to thank Steve Baur and Per Abrahamsen for doing a wonderful job
with this FAQ before him. We would like to do the same - thanks,
Justin!

If you have a Web browser, the official hypertext version is at:
`http://my.gnus.org/FAQ/'.  This version is much nicer than the
unofficial hypertext versions that are archived at Utrecht, Oxford,
Smart Pages, Ohio State, and other FAQ archives. See the resources
question below if you want information on obtaining it in another
format.

The information contained here was compiled with the assistance of the
Gnus development mailing list, and any errors or misprints are the
my.gnus.org team's fault, sorry.



File: gnus, Node: FAQ 1 - Installation FAQ

Installation FAQ
----------------

* Menu:

* [1.1]::    What is the latest version of Gnus?
* [1.2]::    What's new in 5.10?
* [1.3]::    Where and how to get Gnus?
* [1.4]::    What to do with the tarball now?
* [1.5]::    I sometimes read references to No Gnus and Oort Gnus, what
             are those?
* [1.6]::    Which version of Emacs do I need?
* [1.7]::    How do I run Gnus on both Emacs and XEmacs?



File: gnus, Node: [1.1]

Question 1.1
............

What is the latest version of Gnus?


Answer
......

Jingle please: Gnus 5.10 is released, get it while it's hot! As well
as the step in version number is rather small, Gnus 5.10 has tons of
new features which you shouldn't miss. The current release (5.13)
should be at least as stable as the latest release of the 5.8 series.



File: gnus, Node: [1.2]

Question 1.2
............

What's new in 5.10?


Answer
......

First of all, you should have a look into the file GNUS-NEWS in the
toplevel directory of the Gnus tarball, there the most important
changes are listed. Here's a short list of the changes I find
especially important/interesting:


   * Major rewrite of the Gnus agent, Gnus agent is now active by
     default.

   * Many new article washing functions for dealing with ugly
     formatted articles.

   * Anti Spam features.

   * Message-utils now included in Gnus.

   * New format specifiers for summary lines, e.g. %B for a complex
     trn-style thread tree.



File: gnus, Node: [1.3]

Question 1.3
............

Where and how to get Gnus?


Answer
......

Gnus is released independent from releases of Emacs and XEmacs.
Therefore, the version bundled with Emacs or the version in XEmacs'
package system might not be up to date (e.g. Gnus 5.9 bundled with
Emacs 20 is outdated).
You can get the latest released version of Gnus from
`http://www.gnus.org/dist/gnus.tar.gz' or via anonymous FTP from
`ftp://ftp.gnus.org/pub/gnus/gnus.tar.gz'.



File: gnus, Node: [1.4]

Question 1.4
............

What to do with the tarball now?


Answer
......

Untar it via `tar xvzf gnus.tar.gz' and do the common `./configure;
make; make install' circle.  (under MS-Windows either get the Cygwin
environment from `http://www.cygwin.com' which allows you to do what's
described above or unpack the tarball with some packer (e.g. Winace
from `http://www.winace.com') and use the batch-file make.bat included
in the tarball to install Gnus.) If you don't want to (or aren't
allowed to) install Gnus system-wide, you can install it in your home
directory and add the following lines to your ~/.xemacs/init.el or
~/.emacs:

     (add-to-list 'load-path "/path/to/gnus/lisp")
     (if (featurep 'xemacs)
         (add-to-list 'Info-directory-list "/path/to/gnus/texi/")
       (add-to-list 'Info-default-directory-list "/path/to/gnus/texi/"))
@noindent

Make sure that you don't have any Gnus related stuff before this line,
on MS Windows use something like "C:/path/to/lisp" (yes, "/").



File: gnus, Node: [1.5]

Question 1.5
............

I sometimes read references to No Gnus and Oort Gnus, what are those?


Answer
......

Oort Gnus was the name of the development version of Gnus, which
became Gnus 5.10 in autumn 2003. No Gnus is the name of the current
development version which will once become Gnus 5.12 or Gnus 6. (If
you're wondering why not 5.11, the odd version numbers are normally
used for the Gnus versions bundled with Emacs)



File: gnus, Node: [1.6]

Question 1.6
............

Which version of Emacs do I need?


Answer
......

Gnus 5.10 requires an Emacs version that is greater than or equal to
Emacs 20.7 or XEmacs 21.1.  The development versions of Gnus (aka No
Gnus) requires Emacs 21 or XEmacs 21.4.



File: gnus, Node: [1.7]

Question 1.7
............

How do I run Gnus on both Emacs and XEmacs?


Answer
......

You can't use the same copy of Gnus in both as the Lisp files are
byte-compiled to a format which is different depending on which Emacs
did the compilation. Get one copy of Gnus for Emacs and one for
XEmacs.



File: gnus, Node: FAQ 2 - Startup / Group buffer

Startup / Group buffer
----------------------

* Menu:

* [2.1]::    Every time I start Gnus I get a message "Gnus auto-save
             file exists. Do you want to read it?", what does this mean and
             how to prevent it?
* [2.2]::    Gnus doesn't remember which groups I'm subscribed to,
             what's this?
* [2.3]::    How to change the format of the lines in Group buffer?
* [2.4]::    My group buffer becomes a bit crowded, is there a way to
             sort my groups into categories so I can easier browse through
             them?
* [2.5]::    How to manually sort the groups in Group buffer? How to
             sort the groups in a topic?



File: gnus, Node: [2.1]

Question 2.1
............

Every time I start Gnus I get a message "Gnus auto-save file
exists. Do you want to read it?", what does this mean and how to
prevent it?


Answer
......

This message means that the last time you used Gnus, it wasn't
properly exited and therefor couldn't write its informations to disk
(e.g. which messages you read), you are now asked if you want to
restore those informations from the auto-save file.

To prevent this message make sure you exit Gnus via `q' in group
buffer instead of just killing Emacs.



File: gnus, Node: [2.2]

Question 2.2
............

Gnus doesn't remember which groups I'm subscribed to, what's this?


Answer
......

You get the message described in the q/a pair above while starting
Gnus, right? It's an other symptom for the same problem, so read the
answer above.



File: gnus, Node: [2.3]

Question 2.3
............

How to change the format of the lines in Group buffer?


Answer
......

You've got to tweak the value of the variable
gnus-group-line-format. See the manual node "Group Line Specification"
for information on how to do this. An example for this (guess from
whose .gnus :-)):

     (setq gnus-group-line-format "%P%M%S[%5t]%5y : %(%g%)\n")
@noindent



File: gnus, Node: [2.4]

Question 2.4
............

My group buffer becomes a bit crowded, is there a way to sort my
groups into categories so I can easier browse through them?


Answer
......

Gnus offers the topic mode, it allows you to sort your groups in,
well, topics, e.g. all groups dealing with Linux under the topic
linux, all dealing with music under the topic music and all dealing
with scottish music under the topic scottish which is a subtopic of
music.

To enter topic mode, just hit t while in Group buffer. Now you can use
`T n' to create a topic at point and `T m' to move a group to a
specific topic. For more commands see the manual or the menu. You
might want to include the %P specifier at the beginning of your
gnus-group-line-format variable to have the groups nicely indented.



File: gnus, Node: [2.5]

Question 2.5
............

How to manually sort the groups in Group buffer? How to sort the
groups in a topic?


Answer
......

Move point over the group you want to move and hit `C-k', now move
point to the place where you want the group to be and hit `C-y'.



File: gnus, Node: FAQ 3 - Getting Messages

Getting Messages
----------------

* Menu:

* [3.1]::     I just installed Gnus, started it via  `M-x gnus'
              but it only says "nntp (news) open error", what to do?
* [3.2]::     I'm working under Windows and have no idea what ~/.gnus.el
              means.
* [3.3]::     My news server requires authentication, how to store user
              name and password on disk?
* [3.4]::     Gnus seems to start up OK, but I can't find out how to
              subscribe to a group.
* [3.5]::     Gnus doesn't show all groups / Gnus says I'm not allowed
              to post on this server as well as I am, what's that?
* [3.6]::     I want Gnus to fetch news from several servers, is this
              possible?
* [3.7]::     And how about local spool files?
* [3.8]::     OK, reading news works now, but I want to be able to read
              my mail with Gnus, too. How to do it?
* [3.9]::     And what about IMAP?
* [3.10]::    At the office we use one of those MS Exchange servers, can
              I use Gnus to read my mail from it?
* [3.11]::    Can I tell Gnus not to delete the mails on the server it
              retrieves via POP3?



File: gnus, Node: [3.1]

Question 3.1
............

I just installed Gnus, started it via `M-x gnus' but it only says
nntp (news) open error", what to do?


Answer
......

You've got to tell Gnus where to fetch the news from. Read the
documentation for information on how to do this. As a first start, put
those lines in ~/.gnus.el:

     (setq gnus-select-method '(nntp "news.yourprovider.net"))
     (setq user-mail-address "you@yourprovider.net")
     (setq user-full-name "Your Name")
@noindent



File: gnus, Node: [3.2]

Question 3.2
............

I'm working under Windows and have no idea what ~/.gnus.el means.


Answer
......

The ~/ means the home directory where Gnus and Emacs look for the
configuration files.  However, you don't really need to know what this
means, it suffices that Emacs knows what it means :-) You can type
`C-x C-f ~/.gnus.el RET ' (yes, with the forward slash, even on
Windows), and Emacs will open the right file for you.  (It will most
likely be new, and thus empty.)  However, I'd discourage you from
doing so, since the directory Emacs chooses will most certainly not be
what you want, so let's do it the correct way.  The first thing you've
got to do is to create a suitable directory (no blanks in directory
name please) e.g. c:\myhome. Then you must set the environment
variable HOME to this directory.  To do this under Win9x or Me include
the line

     SET HOME=C:\myhome
@noindent

in your autoexec.bat and reboot.  Under NT, 2000 and XP, hit
Winkey+Pause/Break to enter system options (if it doesn't work, go to
Control Panel -> System -> Advanced). There you'll find the
possibility to set environment variables.  Create a new one with name
HOME and value C:\myhome.  Rebooting is not necessary.

Now to create ~/.gnus.el, say `C-x C-f ~/.gnus.el RET C-x C-s'.  in
Emacs.



File: gnus, Node: [3.3]

Question 3.3
............

My news server requires authentication, how to store user name and
password on disk?


Answer
......

Create a file ~/.authinfo which includes for each server a line like
this

     machine news.yourprovider.net login YourUserName password YourPassword
.
Make sure that the file isn't readable to others if you work on a OS
which is capable of doing so.  (Under Unix say
     chmod 600 ~/.authinfo
@noindent

in a shell.)



File: gnus, Node: [3.4]

Question 3.4
............

Gnus seems to start up OK, but I can't find out how to subscribe to a
group.


Answer
......

If you know the name of the group say `U name.of.group RET' in group
buffer (use the tab-completion Luke). Otherwise hit ^ in group buffer,
this brings you to the server buffer. Now place point (the cursor)
over the server which carries the group you want, hit `RET', move
point to the group you want to subscribe to and say `u' to subscribe
to it.



File: gnus, Node: [3.5]

Question 3.5
............

Gnus doesn't show all groups / Gnus says I'm not allowed to post on
this server as well as I am, what's that?


Answer
......

Some providers allow restricted anonymous access and full access only
after authorization. To make Gnus send authinfo to those servers
append

     force yes
@noindent

to the line for those servers in ~/.authinfo.



File: gnus, Node: [3.6]

Question 3.6
............

I want Gnus to fetch news from several servers, is this possible?


Answer
......

Of course. You can specify more sources for articles in the variable
gnus-secondary-select-methods. Add something like this in ~/.gnus.el:

     (add-to-list 'gnus-secondary-select-methods
                  '(nntp "news.yourSecondProvider.net"))
     (add-to-list 'gnus-secondary-select-methods
                  '(nntp "news.yourThirdProvider.net"))
@noindent



File: gnus, Node: [3.7]

Question 3.7
............

And how about local spool files?


Answer
......

No problem, this is just one more select method called nnspool, so you
want this:

     (add-to-list 'gnus-secondary-select-methods '(nnspool ""))
@noindent

Or this if you don't want an NNTP Server as primary news source:

     (setq gnus-select-method '(nnspool ""))
@noindent

Gnus will look for the spool file in /usr/spool/news, if you want
something different, change the line above to something like this:

     (add-to-list 'gnus-secondary-select-methods
                  '(nnspool ""
                       (nnspool-directory "/usr/local/myspoolddir")))
@noindent

This sets the spool directory for this server only.  You might have to
specify more stuff like the program used to post articles, see the
Gnus manual on how to do this.



File: gnus, Node: [3.8]

Question 3.8
............

OK, reading news works now, but I want to be able to read my mail with
Gnus, too. How to do it?


Answer
......

That's a bit harder since there are many possible sources for mail,
many possible ways for storing mail and many different ways for
sending mail. The most common cases are these: 1: You want to read
your mail from a pop3 server and send them directly to a SMTP Server
2: Some program like fetchmail retrieves your mail and stores it on
disk from where Gnus shall read it. Outgoing mail is sent by Sendmail,
Postfix or some other MTA. Sometimes, you even need a combination of
the above cases.

However, the first thing to do is to tell Gnus in which way it should
store the mail, in Gnus terminology which back end to use. Gnus
supports many different back ends, the most commonly used one is
nnml. It stores every mail in one file and is therefor quite
fast. However you might prefer a one file per group approach if your
file system has problems with many small files, the nnfolder back end
is then probably the choice for you.  To use nnml add the following to
~/.gnus.el:

     (add-to-list 'gnus-secondary-select-methods '(nnml ""))
@noindent

As you might have guessed, if you want nnfolder, it's

     (add-to-list 'gnus-secondary-select-methods '(nnfolder ""))
@noindent

Now we need to tell Gnus, where to get it's mail from. If it's a POP3
server, then you need something like this:

     (eval-after-load "mail-source"
       '(add-to-list 'mail-sources '(pop :server "pop.YourProvider.net"
                                         :user "yourUserName"
                                         :password "yourPassword")))
@noindent

Make sure ~/.gnus.el isn't readable to others if you store your
password there. If you want to read your mail from a traditional spool
file on your local machine, it's

     (eval-after-load "mail-source"
       '(add-to-list 'mail-sources '(file :path "/path/to/spool/file"))
@noindent

If it's a Maildir, with one file per message as used by postfix, Qmail
and (optionally) fetchmail it's

     (eval-after-load "mail-source"
       '(add-to-list 'mail-sources '(maildir :path "/path/to/Maildir/"
                                             :subdirs ("cur" "new")))
@noindent

And finally if you want to read your mail from several files in one
directory, for example because procmail already split your mail, it's

     (eval-after-load "mail-source"
       '(add-to-list 'mail-sources
                '(directory :path "/path/to/procmail-dir/"
                            :suffix ".prcml")))
@noindent

Where :suffix ".prcml" tells Gnus only to use files with the
suffix .prcml.

OK, now you only need to tell Gnus how to send mail. If you want to
send mail via sendmail (or whichever MTA is playing the role of
sendmail on your system), you don't need to do anything. However, if
you want to send your mail to an SMTP Server you need the following in
your ~/.gnus.el

     (setq send-mail-function 'smtpmail-send-it)
     (setq message-send-mail-function 'smtpmail-send-it)
     (setq smtpmail-default-smtp-server "smtp.yourProvider.net")
@noindent



File: gnus, Node: [3.9]

Question 3.9
............

And what about IMAP?


Answer
......

There are two ways of using IMAP with Gnus. The first one is to use
IMAP like POP3, that means Gnus fetches the mail from the IMAP server
and stores it on disk. If you want to do this (you don't really want
to do this) add the following to ~/.gnus.el

     (add-to-list 'mail-sources '(imap :server "mail.mycorp.com"
                                       :user "username"
                                       :pass "password"
                                       :stream network
                                       :authentication login
                                       :mailbox "INBOX"
                                       :fetchflag "\\Seen"))
@noindent

You might have to tweak the values for stream and/or authentication,
see the Gnus manual node "Mail Source Specifiers" for possible values.

If you want to use IMAP the way it's intended, you've got to follow a
different approach.  You've got to add the nnimap back end to your
select method and give the information about the server there.

     (add-to-list 'gnus-secondary-select-methods
             '(nnimap "Give the baby a name"
                      (nnimap-address "imap.yourProvider.net")
                      (nnimap-port 143)
                      (nnimap-list-pattern "archive.*")))
@noindent

Again, you might have to specify how to authenticate to the server if
Gnus can't guess the correct way, see the Manual Node "IMAP" for
detailed information.



File: gnus, Node: [3.10]

Question 3.10
.............

At the office we use one of those MS Exchange servers, can I use Gnus
to read my mail from it?


Answer
......

Offer your administrator a pair of new running shoes for activating
IMAP on the server and follow the instructions above.



File: gnus, Node: [3.11]

Question 3.11
.............

Can I tell Gnus not to delete the mails on the server it retrieves via
POP3?


Answer
......

First of all, that's not the way POP3 is intended to work, if you have
the possibility, you should use the IMAP Protocol if you want your
messages to stay on the server. Nevertheless there might be situations
where you need the feature, but sadly Gnus itself has no predefined
functionality to do so.

However this is Gnus county so there are possibilities to achieve what
you want. The easiest way is to get an external program which
retrieves copies of the mail and stores them on disk, so Gnus can read
it from there. On Unix systems you could use e.g. fetchmail for this,
on MS Windows you can use Hamster, an excellent local news and mail
server.

The other solution would be, to replace the method Gnus uses to get
mail from POP3 servers by one which is capable of leaving the mail on
the server. If you use XEmacs, get the package mail-lib, it includes
an enhanced pop3.el, look in the file, there's documentation on how to
tell Gnus to use it and not to delete the retrieved mail. For GNU
Emacs look for the file epop3.el which can do the same (If you know
the home of this file, please send me an e-mail). You can also tell
Gnus to use an external program (e.g. fetchmail) to fetch your mail,
see the info node "Mail Source Specifiers" in the Gnus manual on how
to do it.



File: gnus, Node: FAQ 4 - Reading messages

Reading messages
----------------

* Menu:

* [4.1]::     When I enter a group, all read messages are gone. How to
              view them again?
* [4.2]::     How to tell Gnus to show an important message every time I
              enter a group, even when it's read?
* [4.3]::     How to view the headers of a message?
* [4.4]::     How to view the raw unformatted message?
* [4.5]::     How can I change the headers Gnus displays by default at
              the top of the article buffer?
* [4.6]::     I'd like Gnus NOT to render HTML-mails but show me the
              text part if it's available. How to do it?
* [4.7]::     Can I use some other browser than w3 to render my
              HTML-mails?
* [4.8]::     Is there anything I can do to make poorly formatted mails
              more readable?
* [4.9]::     Is there a way to automatically ignore posts by specific
              authors or with specific words in the subject? And can I highlight
              more interesting ones in some way?
* [4.10]::    How can I disable threading in some (e.g. mail-) groups,
              or set other variables specific for some groups?
* [4.11]::    Can I highlight messages written by me and follow-ups to
              those?
* [4.12]::    The number of total messages in a group which Gnus
              displays in group buffer is by far to high, especially in mail
              groups. Is this a bug?
* [4.13]::    I don't like the layout of summary and article buffer, how
              to change it? Perhaps even a three pane display?
* [4.14]::    I don't like the way the Summary buffer looks, how to
              tweak it?
* [4.15]::    How to split incoming mails in several groups?



File: gnus, Node: [4.1]

Question 4.1
............

When I enter a group, all read messages are gone. How to view them
again?


Answer
......

If you enter the group by saying
`RET'
in group buffer with point over the group, only unread and ticked messages are loaded. Say
`C-u RET'
instead to load all available messages. If you want only the e.g. 300 newest say
`C-u 300 RET'

Loading only unread messages can be annoying if you have threaded view
enabled, say

     (setq gnus-fetch-old-headers 'some)
@noindent

in ~/.gnus.el to load enough old articles to prevent teared threads,
replace 'some with t to load all articles (Warning: Both settings
enlarge the amount of data which is fetched when you enter a group and
slow down the process of entering a group).

If you already use Gnus 5.10, you can say `/o N' In summary buffer to
load the last N messages, this feature is not available in 5.8.8

If you don't want all old messages, but the parent of the message
you're just reading, you can say `^', if you want to retrieve the
whole thread the message you're just reading belongs to, `A T' is your
friend.



File: gnus, Node: [4.2]

Question 4.2
............

How to tell Gnus to show an important message every time I enter a
group, even when it's read?


Answer
......

You can tick important messages. To do this hit `u' while point is in
summary buffer over the message. When you want to remove the mark, hit
either `d' (this deletes the tick mark and set's unread mark) or `M c'
(which deletes all marks for the message).



File: gnus, Node: [4.3]

Question 4.3
............

How to view the headers of a message?


Answer
......

Say `t' to show all headers, one more `t' hides them again.



File: gnus, Node: [4.4]

Question 4.4
............

How to view the raw unformatted message?


Answer
......

Say `C-u g' to show the raw message `g' returns to normal view.



File: gnus, Node: [4.5]

Question 4.5
............

How can I change the headers Gnus displays by default at the top of
the article buffer?


Answer
......

The variable gnus-visible-headers controls which headers are shown,
its value is a regular expression, header lines which match it are
shown. So if you want author, subject, date, and if the header exists,
Followup-To and MUA / NUA say this in ~/.gnus.el:

     (setq gnus-visible-headers
           '("^From" "^Subject" "^Date" "^Newsgroups" "^Followup-To"
        "^User-Agent" "^X-Newsreader" "^X-Mailer"))
@noindent



File: gnus, Node: [4.6]

Question 4.6
............

I'd like Gnus NOT to render HTML-mails but show me the text part if
it's available. How to do it?


Answer
......

Say

     (eval-after-load "mm-decode"
      '(progn
           (add-to-list 'mm-discouraged-alternatives "text/html")
           (add-to-list 'mm-discouraged-alternatives "text/richtext")))
@noindent

in ~/.gnus.el. If you don't want HTML rendered, even if there's no
text alternative add

     (setq mm-automatic-display (remove "text/html" mm-automatic-display))
@noindent

too.



File: gnus, Node: [4.7]

Question 4.7
............

Can I use some other browser than w3 to render my HTML-mails?


Answer
......

Only if you use Gnus 5.10 or younger. In this case you've got the
choice between w3, w3m, links, lynx and html2text, which one is used
can be specified in the variable mm-text-html-renderer, so if you want
links to render your mail say

     (setq mm-text-html-renderer 'links)
@noindent



File: gnus, Node: [4.8]

Question 4.8
............

Is there anything I can do to make poorly formatted mails more
readable?


Answer
......

Gnus offers you several functions to "wash" incoming mail, you can
find them if you browse through the menu, item Article->Washing. The
most interesting ones are probably "Wrap long lines" (`W w'), "Decode
ROT13" (`W r') and "Outlook Deuglify" which repairs the dumb quoting
used by many users of Microsoft products (`W Y f' gives you full
deuglify.  See `W Y C-h' or have a look at the menus for other
deuglifications).  Outlook deuglify is only available since Gnus 5.10.



File: gnus, Node: [4.9]

Question 4.9
............

Is there a way to automatically ignore posts by specific authors or
with specific words in the subject? And can I highlight more
interesting ones in some way?


Answer
......

You want Scoring. Scoring means, that you define rules which assign
each message an integer value. Depending on the value the message is
highlighted in summary buffer (if it's high, say +2000) or
automatically marked read (if the value is low, say -800) or some
other action happens.

There are basically three ways of setting up rules which assign
the scoring-value to messages. The first and easiest way is to set
up rules based on the article you are just reading. Say you're
reading a message by a guy who always writes nonsense and you want
to ignore his messages in the future. Hit
`L', to set up a rule which lowers the score.
Now Gnus asks you which the criteria for lowering the Score shall
be. Hit `?' twice to see all possibilities,
we want `a' which means the author (the from
header). Now Gnus wants to know which kind of matching we want.
Hit either `e' for an exact match or
`s' for substring-match and delete afterwards
everything but the name to score down all authors with the given
name no matter which email address is used. Now you need to tell
Gnus when to apply the rule and how long it should last, hit e.g.
`p' to apply the rule now and let it last
forever. If you want to raise the score instead of lowering it say
`I' instead of `L'.

You can also set up rules by hand. To do this say `V f' in summary
buffer. Then you are asked for the name of the score file, it's
name.of.group.SCORE for rules valid in only one group or all.Score for
rules valid in all groups. See the Gnus manual for the exact syntax,
basically it's one big list whose elements are lists again. the first
element of those lists is the header to score on, then one more list
with what to match, which score to assign, when to expire the rule and
how to do the matching. If you find me very interesting, you could
e.g. add the following to your all.Score:

     (("references" ("hschmi22.userfqdn.rz-online.de" 500 nil s))
      ("message-id" ("hschmi22.userfqdn.rz-online.de" 999 nil s)))
@noindent

This would add 999 to the score of messages written by me and 500 to
the score of messages which are a (possibly indirect) answer to a
message written by me. Of course nobody with a sane mind would do this
:-)

The third alternative is adaptive scoring. This means Gnus watches you
and tries to find out what you find interesting and what annoying and
sets up rules which reflect this. Adaptive scoring can be a huge help
when reading high traffic groups. If you want to activate adaptive
scoring say

     (setq gnus-use-adaptive-scoring t)
@noindent

in ~/.gnus.el.



File: gnus, Node: [4.10]

Question 4.10
.............

How can I disable threading in some (e.g. mail-) groups, or set other
variables specific for some groups?


Answer
......

While in group buffer move point over the group and hit `G c', this
opens a buffer where you can set options for the group. At the bottom
of the buffer you'll find an item that allows you to set variables
locally for the group. To disable threading enter gnus-show-threads as
name of variable and nil as value. Hit button done at the top of the
buffer when you're ready.



File: gnus, Node: [4.11]

Question 4.11
.............

Can I highlight messages written by me and follow-ups to those?


Answer
......

Stop those "Can I ..." questions, the answer is always yes
in Gnus Country :-). It's a three step process: First we
make faces (specifications of how summary-line shall look
like) for those postings, then we'll give them some
special score and finally we'll tell Gnus to use the new
faces. You can find detailed instructions on how to do it on
my.gnus.org (http://my.gnus.org/node/view/224)



File: gnus, Node: [4.12]

Question 4.12
.............

The number of total messages in a group which Gnus displays in group
buffer is by far to high, especially in mail groups. Is this a bug?


Answer
......

No, that's a matter of design of Gnus, fixing this would mean
reimplementation of major parts of Gnus' back ends. Gnus thinks
highest-article-number - lowest-article-number =
total-number-of-articles". This works OK for Usenet groups, but if you
delete and move many messages in mail groups, this fails. To cure the
symptom, enter the group via `C-u RET' (this makes Gnus get all
messages), then hit `M P b' to mark all messages and then say `B m
name.of.group' to move all messages to the group they have been in
before, they get new message numbers in this process and the count is
right again (until you delete and move your mail to other groups
again).



File: gnus, Node: [4.13]

Question 4.13
.............

I don't like the layout of summary and article buffer, how to change
it? Perhaps even a three pane display?


Answer
......

You can control the windows configuration by calling the function
gnus-add-configuration. The syntax is a bit complicated but explained
very well in the manual node "Window Layout". Some popular examples:

Instead 25% summary 75% article buffer 35% summary and 65% article
(the 1.0 for article means "take the remaining space"):

     (gnus-add-configuration
      '(article (vertical 1.0 (summary .35 point) (article 1.0))))
@noindent

A three pane layout, Group buffer on the left, summary buffer
top-right, article buffer bottom-right:

     (gnus-add-configuration
      '(article
        (horizontal 1.0
               (vertical 25
                         (group 1.0))
               (vertical 1.0
                         (summary 0.25 point)
                         (article 1.0)))))
     (gnus-add-configuration
      '(summary
        (horizontal 1.0
               (vertical 25
                         (group 1.0))
               (vertical 1.0
                         (summary 1.0 point)))))
@noindent



File: gnus, Node: [4.14]

Question 4.14
.............

I don't like the way the Summary buffer looks, how to tweak it?


Answer
......

You've got to play around with the variable
gnus-summary-line-format. It's value is a string of symbols which
stand for things like author, date, subject etc. A list of the
available specifiers can be found in the manual node "Summary Buffer
Lines" and the often forgotten node "Formatting Variables" and it's
sub-nodes. There you'll find useful things like positioning the cursor
and tabulators which allow you a summary in table form, but sadly hard
tabulators are broken in 5.8.8.

Since 5.10, Gnus offers you some very nice new specifiers, e.g. %B
which draws a thread-tree and %&user-date which gives you a date where
the details are dependent of the articles age. Here's an example which
uses both:

     (setq gnus-summary-line-format ":%U%R %B %s %-60=|%4L |%-20,20f |%&user-date; \n")
@noindent

resulting in:

     :O     Re: [Richard Stallman] rfc2047.el          |  13 |Lars Magne Ingebrigt |Sat 23:06
     :O     Re: Revival of the ding-patches list       |  13 |Lars Magne Ingebrigt |Sat 23:12
     :R  >  Re: Find correct list of articles for a gro|  25 |Lars Magne Ingebrigt |Sat 23:16
     :O  \->  ...                                      |  21 |Kai Grossjohann      | 0:01
     :R  >  Re: Cry for help: deuglify.el - moving stuf|  28 |Lars Magne Ingebrigt |Sat 23:34
     :O  \->  ...                                      | 115 |Raymond Scholz       | 1:24
     :O    \->  ...                                    |  19 |Lars Magne Ingebrigt |15:33
     :O     Slow mailing list                          |  13 |Lars Magne Ingebrigt |Sat 23:49
     :O     Re: `@' mark not documented                |  13 |Lars Magne Ingebrigt |Sat 23:50
     :R  >  Re: Gnus still doesn't count messages prope|  23 |Lars Magne Ingebrigt |Sat 23:57
     :O  \->  ...                                      |  18 |Kai Grossjohann      | 0:35
     :O    \->  ...                                    |  13 |Lars Magne Ingebrigt | 0:56
@noindent



File: gnus, Node: [4.15]

Question 4.15
.............

How to split incoming mails in several groups?


Answer
......

Gnus offers two possibilities for splitting mail, the easy
nnmail-split-methods and the more powerful Fancy Mail Splitting. I'll
only talk about the first one, refer to the manual, node "Fancy Mail
Splitting" for the latter.

The value of nnmail-split-methods is a list, each element is a list
which stands for a splitting rule. Each rule has the form "group where
matching articles should go to", "regular expression which has to be
matched", the first rule which matches wins. The last rule must always
be a general rule (regular expression .*) which denotes where articles
should go which don't match any other rule. If the folder doesn't
exist yet, it will be created as soon as an article lands there.  By
default the mail will be send to all groups whose rules match. If you
don't want that (you probably don't want), say

     (setq nnmail-crosspost nil)
@noindent

in ~/.gnus.el.

An example might be better than thousand words, so here's my
nnmail-split-methods. Note that I send duplicates in a special group
and that the default group is spam, since I filter all mails out which
are from some list I'm subscribed to or which are addressed directly
to me before. Those rules kill about 80% of the Spam which reaches me
(Email addresses are changed to prevent spammers from using them):

     (setq nnmail-split-methods
       '(("duplicates" "^Gnus-Warning:.*duplicate")
         ("XEmacs-NT" "^\\(To:\\|CC:\\).*localpart@xemacs.invalid.*")
         ("Gnus-Tut" "^\\(To:\\|CC:\\).*localpart@socha.invalid.*")
         ("tcsh" "^\\(To:\\|CC:\\).*localpart@mx.gw.invalid.*")
         ("BAfH" "^\\(To:\\|CC:\\).*localpart@.*uni-muenchen.invalid.*")
         ("Hamster-src" "^\\(CC:\\|To:\\).*hamster-sourcen@yahoogroups.\\(de\\|com\\).*")
         ("Tagesschau" "^From: tagesschau <localpart@www.tagesschau.invalid>$")
         ("Replies" "^\\(CC:\\|To:\\).*localpart@Frank-Schmitt.invalid.*")
         ("EK" "^From:.*\\(localpart@privateprovider.invalid\\|localpart@workplace.invalid\\).*")
         ("Spam" "^Content-Type:.*\\(ks_c_5601-1987\\|EUC-KR\\|big5\\|iso-2022-jp\\).*")
         ("Spam" "^Subject:.*\\(This really work\\|XINGA\\|ADV:\\|XXX\\|adult\\|sex\\).*")
         ("Spam" "^Subject:.*\\(\=\?ks_c_5601-1987\?\\|\=\?euc-kr\?\\|\=\?big5\?\\).*")
         ("Spam" "^X-Mailer:\\(.*BulkMailer.*\\|.*MIME::Lite.*\\|\\)")
         ("Spam" "^X-Mailer:\\(.*CyberCreek Avalanche\\|.*http\:\/\/GetResponse\.com\\)")
         ("Spam" "^From:.*\\(verizon\.net\\|prontomail\.com\\|money\\|ConsumerDirect\\).*")
         ("Spam" "^Delivered-To: GMX delivery to spamtrap@gmx.invalid$")
         ("Spam" "^Received: from link2buy.com")
         ("Spam" "^CC: .*azzrael@t-online.invalid")
         ("Spam" "^X-Mailer-Version: 1.50 BETA")
         ("Uni" "^\\(CC:\\|To:\\).*localpart@uni-koblenz.invalid.*")
         ("Inbox" "^\\(CC:\\|To:\\).*\\(my\ name\\|address@one.invalid\\|adress@two.invalid\\)")
         ("Spam" "")))



File: gnus, Node: FAQ 5 - Composing messages

Composing messages
------------------

* Menu:

* [5.1]::     What are the basic commands I need to know for sending
              mail and postings?
* [5.2]::     How to enable automatic word-wrap when composing messages?
* [5.3]::     How to set stuff like From, Organization, Reply-To,
              signature...?
* [5.4]::     Can I set things like From, Signature etc group based on
              the group I post too?
* [5.5]::     Is there a spell-checker? Perhaps even on-the-fly
              spell-checking?
* [5.6]::     Can I set the dictionary based on the group I'm posting
              to?
* [5.7]::     Is there some kind of address-book, so I needn't remember
              all those email addresses?
* [5.8]::     Sometimes I see little images at the top of article
              buffer. What's that and how can I send one with my postings, too?
* [5.9]::     Sometimes I accidentally hit r instead of f in newsgroups.
              Can Gnus warn me, when I'm replying by mail in newsgroups?
* [5.10]::    How to tell Gnus not to generate a sender header?
* [5.11]::    I want Gnus to locally store copies of my send mail and
              news, how to do it?
* [5.12]::    People tell me my Message-IDs are not correct, why aren't
              they and how to fix it?



File: gnus, Node: [5.1]

Question 5.1
............

What are the basic commands I need to know for sending mail and
postings?


Answer
......

To start composing a new mail hit `m'
either in Group or Summary buffer, for a posting, it's
either `a' in Group buffer and
filling the Newsgroups header manually
or `a' in the Summary buffer of the
group where the posting shall be send to. Replying by mail
is
`r' if you don't want to cite the
author, or import the cited text manually and
`R' to cite the text of the original
message. For a follow up to a newsgroup, it's
`f' and `F'
(analogously to `r' and
`R').

Enter new headers above the line saying "--text follows this line--",
enter the text below the line. When ready hit `C-c C-c', to send the
message, if you want to finish it later hit `C-c C-d' to save it in
the drafts group, where you can start editing it again by saying `D
e'.



File: gnus, Node: [5.2]

Question 5.2
............

How to enable automatic word-wrap when composing messages?


Answer
......

Starting from No Gnus, automatic word-wrap is already enabled by
default, see the variable message-fill-column.

For other versions of Gnus, say

     (unless (boundp 'message-fill-column)
       (add-hook 'message-mode-hook
                 (lambda ()
                   (setq fill-column 72)
                   (turn-on-auto-fill))))
@noindent

in ~/.gnus.el.

You can reformat a paragraph by hitting `M-q' (as usual).



File: gnus, Node: [5.3]

Question 5.3
............

How to set stuff like From, Organization, Reply-To, signature...?


Answer
......

There are other ways, but you should use posting styles for this. (See
below why).  This example should make the syntax clear:

     (setq gnus-posting-styles
       '((".*"
          (name "Frank Schmitt")
          (address "me@there.invalid")
          (organization "Hamme net, kren mer och nimmi")
          (signature-file "~/.signature")
          ("X-SampleHeader" "foobar")
          (eval (setq some-variable "Foo bar")))))
@noindent

The ".*" means that this settings are the default ones (see below),
valid values for the first element of the following lists are
signature, signature-file, organization, address, name or body.  The
attribute name can also be a string.  In that case, this will be used
as a header name, and the value will be inserted in the headers of the
article; if the value is `nil', the header name will be removed. You
can also say (eval (foo bar)), then the function foo will be evaluated
with argument bar and the result will be thrown away.



File: gnus, Node: [5.4]

Question 5.4
............

Can I set things like From, Signature etc group based on the group I
post too?


Answer
......

That's the strength of posting styles. Before, we used ".*" to set the
default for all groups. You can use a regexp like "^gmane" and the
following settings are only applied to postings you send to the gmane
hierarchy, use ".*binaries" instead and they will be applied to
postings send to groups containing the string binaries in their name
etc.

You can instead of specifying a regexp specify a function which is
evaluated, only if it returns true, the corresponding settings take
effect. Two interesting candidates for this are message-news-p which
returns t if the current Group is a newsgroup and the corresponding
message-mail-p.

Note that all forms that match are applied, that means in the example
below, when I post to gmane.mail.spam.spamassassin.general, the
settings under ".*" are applied and the settings under message-news-p
and those under "^gmane" and those under
^gmane\\.mail\\.spam\\.spamassassin\\.general$". Because of this put
general settings at the top and specific ones at the bottom.

     (setq gnus-posting-styles
           '((".*" ;;default
              (name "Frank Schmitt")
              (organization "Hamme net, kren mer och nimmi")
              (signature-file "~/.signature"))
             ((message-news-p) ;;Usenet news?
              (address "mySpamTrap@Frank-Schmitt.invalid")
              (reply-to "hereRealRepliesOnlyPlease@Frank-Schmitt.invalid"))
             ((message-mail-p) ;;mail?
              (address "usedForMails@Frank-Schmitt.invalid"))
             ("^gmane" ;;this is mail, too in fact
              (address "usedForMails@Frank-Schmitt.invalid")
              (reply-to nil))
             ("^gmane\\.mail\\.spam\\.spamassassin\\.general$"
              (eval (set (make-local-variable 'message-sendmail-envelope-from)
                         "Azzrael@rz-online.de")))))
@noindent



File: gnus, Node: [5.5]

Question 5.5
............

Is there a spell-checker? Perhaps even on-the-fly spell-checking?


Answer
......

You can use ispell.el to spell-check stuff in Emacs. So the first
thing to do is to make sure that you've got either ispell
(http://fmg-www.cs.ucla.edu/fmg-members/geoff/ispell.html) or aspell
(http://aspell.sourceforge.net/) installed and in your Path. Then you
need ispell.el (http://www.kdstevens.com/~stevens/ispell-page.html)
and for on-the-fly spell-checking flyspell.el
(http://www-sop.inria.fr/mimosa/personnel/Manuel.Serrano/flyspell/flyspell.html).
Ispell.el is shipped with Emacs and available through the XEmacs
package system, flyspell.el is shipped with Emacs and part of XEmacs
text-modes package which is available through the package system, so
there should be no need to install them manually.

Ispell.el assumes you use ispell, if you choose aspell say

     (setq ispell-program-name "aspell")
@noindent

in your Emacs configuration file.

If you want your outgoing messages to be spell-checked, say

     (add-hook 'message-send-hook 'ispell-message)
@noindent

In your ~/.gnus.el, if you prefer on-the-fly spell-checking say

     (add-hook 'message-mode-hook (lambda () (flyspell-mode 1)))
@noindent



File: gnus, Node: [5.6]

Question 5.6
............

Can I set the dictionary based on the group I'm posting to?


Answer
......

Yes, say something like

     (add-hook 'gnus-select-group-hook
               (lambda ()
                 (cond
                  ((string-match
                    "^de\\." (gnus-group-real-name gnus-newsgroup-name))
                   (ispell-change-dictionary "deutsch8"))
                  (t
                   (ispell-change-dictionary "english")))))
@noindent

in ~/.gnus.el. Change "^de\\." and "deutsch8" to something that suits
your needs.



File: gnus, Node: [5.7]

Question 5.7
............

Is there some kind of address-book, so I needn't remember all those
email addresses?


Answer
......

There's an very basic solution for this, mail aliases.  You can store
your mail addresses in a ~/.mailrc file using a simple alias syntax:

     alias al	"Al <al@english-heritage.invalid>"
@noindent

Then typing your alias (followed by a space or punctuation character)
on a To: or Cc: line in the message buffer will cause Gnus to insert
the full address for you. See the node "Mail Aliases" in Message (not
Gnus) manual for details.

However, what you really want is the Insidious Big Brother Database
bbdb. Get it through the XEmacs package system or from bbdb's homepage
(http://bbdb.sourceforge.net/).  Now place the following in
~/.gnus.el, to activate bbdb for Gnus:

     (require 'bbdb)
     (bbdb-initialize 'gnus 'message)
@noindent

Now you probably want some general bbdb configuration, place them in
~/.emacs:

     (require 'bbdb)
     ;;If you don't live in Northern America, you should disable the
     ;;syntax check for telephone numbers by saying
     (setq bbdb-north-american-phone-numbers-p nil)
     ;;Tell bbdb about your email address:
     (setq bbdb-user-mail-names
           (regexp-opt '("Your.Email@here.invalid"
                         "Your.other@mail.there.invalid")))
     ;;cycling while completing email addresses
     (setq bbdb-complete-name-allow-cycling t)
     ;;No popup-buffers
     (setq bbdb-use-pop-up nil)
@noindent

Now you should be ready to go. Say `M-x bbdb RET RET' to open a bbdb
buffer showing all entries. Say `c' to create a new entry, `b' to
search your BBDB and `C-o' to add a new field to an entry. If you want
to add a sender to the BBDB you can also just hit `:' on the posting
in the summary buffer and you are done. When you now compose a new
mail, hit `TAB' to cycle through know recipients.



File: gnus, Node: [5.8]

Question 5.8
............

Sometimes I see little images at the top of article buffer. What's
that and how can I send one with my postings, too?


Answer
......

Those images are called X-Faces. They are 48*48 pixel b/w pictures,
encoded in a header line. If you want to include one in your posts,
you've got to convert some image to a X-Face. So fire up some image
manipulation program (say Gimp), open the image you want to include,
cut out the relevant part, reduce color depth to 1 bit, resize to
48*48 and save as bitmap. Now you should get the compface package from
this site (ftp://ftp.cs.indiana.edu:/pub/faces/).  and create the
actual X-face by saying

     cat file.xbm | xbm2ikon | compface > file.face
     cat file.face | sed 's/\\/\\\\/g;s/\"/\\\"/g;' > file.face.quoted
@noindent

If you can't use compface, there's an online X-face converter at
`http://www.dairiki.org/xface/'.  If you use MS Windows, you could
also use the WinFace program from
`http://www.xs4all.nl/~walterln/winface/'.  Now you only have to tell
Gnus to include the X-face in your postings by saying

     (setq message-default-headers
             (with-temp-buffer
               (insert "X-Face: ")
               (insert-file-contents "~/.xface")
               (buffer-string)))
@noindent

in ~/.gnus.el.  If you use Gnus 5.10, you can simply add an entry

     (x-face-file "~/.xface")
@noindent

to gnus-posting-styles.



File: gnus, Node: [5.9]

Question 5.9
............

Sometimes I accidentally hit r instead of f in newsgroups. Can Gnus
warn me, when I'm replying by mail in newsgroups?


Answer
......

Put this in ~/.gnus.el:

     (setq gnus-confirm-mail-reply-to-news t)
@noindent

if you already use Gnus 5.10, if you still use 5.8.8 or 5.9 try this
instead:

     (eval-after-load "gnus-msg"
       '(unless (boundp 'gnus-confirm-mail-reply-to-news)
          (defadvice gnus-summary-reply (around reply-in-news activate)
            "Request confirmation when replying to news."
            (interactive)
            (when (or (not (gnus-news-group-p gnus-newsgroup-name))
                      (y-or-n-p "Really reply by mail to article author? "))
              ad-do-it))))
@noindent



File: gnus, Node: [5.10]

Question 5.10
.............

How to tell Gnus not to generate a sender header?


Answer
......

Since 5.10 Gnus doesn't generate a sender header by default. For older
Gnus' try this in ~/.gnus.el:

     (eval-after-load "message"
           '(add-to-list 'message-syntax-checks '(sender . disabled)))
@noindent



File: gnus, Node: [5.11]

Question 5.11
.............

I want Gnus to locally store copies of my send mail and news, how to
do it?


Answer
......

You must set the variable gnus-message-archive-group to do this. You
can set it to a string giving the name of the group where the copies
shall go or like in the example below use a function which is
evaluated and which returns the group to use.

     (setq gnus-message-archive-group
        '((if (message-news-p)
              "nnml:Send-News"
            "nnml:Send-Mail")))
@noindent



File: gnus, Node: [5.12]

Question 5.12
.............

People tell me my Message-IDs are not correct, why aren't they and how
to fix it?


Answer
......

The message-ID is an unique identifier for messages you send. To make
it unique, Gnus need to know which machine name to put after the
@". If the name of the machine where Gnus is running isn't suitable
(it probably isn't at most private machines) you can tell Gnus what to
use by saying:

     (setq message-user-fqdn "yourmachine.yourdomain.tld")
@noindent

in ~/.gnus.el.  If you use Gnus 5.9 or earlier, you can use this
instead (works for newer versions a well):

     (eval-after-load "message"
       '(let ((fqdn "yourmachine.yourdomain.tld"));; <-- Edit this!
          (if (boundp 'message-user-fqdn)
              (setq message-user-fqdn fqdn)
            (gnus-message 1 "Redefining `message-make-fqdn'.")
            (defun message-make-fqdn ()
              "Return user's fully qualified domain name."
              fqdn))))
@noindent

If you have no idea what to insert for "yourmachine.yourdomain.tld",
you've got several choices. You can either ask your provider if he
allows you to use something like yourUserName.userfqdn.provider.net,
or you can use somethingUnique.yourdomain.tld if you own the domain
yourdomain.tld, or you can register at a service which gives private
users a FQDN for free.

Finally you can tell Gnus not to generate a Message-ID for News at all
(and letting the server do the job) by saying

     (setq message-required-news-headers
       (remove' Message-ID message-required-news-headers))
@noindent

you can also tell Gnus not to generate Message-IDs for mail by saying

     (setq message-required-mail-headers
       (remove' Message-ID message-required-mail-headers))
@noindent

, however some mail servers don't generate proper Message-IDs, too, so
test if your Mail Server behaves correctly by sending yourself a Mail
and looking at the Message-ID.



