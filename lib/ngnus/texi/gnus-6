Info file: gnus,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus: (gnus).         The newsreader Gnus.
END-INFO-DIR-ENTRY








File: gnus, Node: Article Hiding, Next: Article Washing, Prev: Article Fontisizing, Up: Article Treatment

Article Hiding
--------------

Or rather, hiding certain things in each article.  There usually is
much too much cruft in most articles.


`W W a'
     Do quite a lot of hiding on the article buffer
     (`gnus-article-hide').  In particular, this function will hide
     headers, PGP, cited text and the signature.

`W W h'
     Hide headers (`gnus-article-hide-headers').  *Note Hiding
     Headers::.

`W W b'
     Hide headers that aren't particularly interesting
     (`gnus-article-hide-boring-headers').  *Note Hiding Headers::.

`W W s'
     Hide signature (`gnus-article-hide-signature').  *Note Article
     Signature::.

`W W l'
     Strip list identifiers specified in `gnus-list-identifiers'.
     These are strings some mailing list servers add to the beginning
     of all `Subject' headers--for example, `[zebra 4711]'.  Any
     leading `Re: ' is skipped before stripping.
     `gnus-list-identifiers' may not contain `\\(..\\)'.


     `gnus-list-identifiers'
          A regular expression that matches list identifiers to be
          removed from subject.  This can also be a list of regular
          expressions.


`W W P'
     Hide PEM (privacy enhanced messages) cruft
     (`gnus-article-hide-pem').

`W W B'
     Strip the banner specified by the `banner' group parameter
     (`gnus-article-strip-banner').  This is mainly used to hide those
     annoying banners and/or signatures that some mailing lists and
     moderated groups adds to all the messages.  The way to use this
     function is to add the `banner' group parameter (*Note Group
     Parameters::) to the group you want banners stripped from.  The
     parameter either be a string, which will be interpreted as a
     regular expression matching text to be removed, or the symbol
     `signature', meaning that the (last) signature should be removed,
     or other symbol, meaning that the corresponding regular
     expression in `gnus-article-banner-alist' is used.

     Regardless of a group, you can hide things like advertisements only when
     the sender of an article has a certain mail address specified in
     `gnus-article-address-banner-alist'.


     `gnus-article-address-banner-alist'
          Alist of mail addresses and banners.  Each element has the
          form `(ADDRESS . BANNER)', where ADDRESS is a regexp
          matching a mail address in the From header, BANNER is one of
          a symbol `signature', an item in
          `gnus-article-banner-alist', a regexp and `nil'.  If ADDRESS
          matches author's mail address, it will remove things like
          advertisements.  For example, if a sender has the mail
          address `hail@yoo-hoo.co.jp' and there is a banner something
          like `Do You Yoo-hoo!?' in all articles he sends, you can
          use the following element to remove them:

               ("@yoo-hoo\\.co\\.jp\\'" .
                "\n_+\nDo You Yoo-hoo!\\?\n.*\n.*\n")


`W W c'
     Hide citation (`gnus-article-hide-citation').  Some variables for
     customizing the hiding:


     `gnus-cited-opened-text-button-line-format'
     `gnus-cited-closed-text-button-line-format'
          Gnus adds buttons to show where the cited text has been
          hidden, and to allow toggle hiding the text.  The format of
          the variable is specified by these format-like variable
          (*Note Formatting Variables::).  These specs are valid:

          `b'
               Starting point of the hidden text.
          `e'
               Ending point of the hidden text.
          `l'
               Number of characters in the hidden region.
          `n'
               Number of lines of hidden text.

     `gnus-cited-lines-visible'
          The number of lines at the beginning of the cited text to
          leave shown.  This can also be a cons cell with the number
          of lines at the top and bottom of the text, respectively, to
          remain visible.


`W W C-c'

     Hide citation (`gnus-article-hide-citation-maybe') depending on
     the following two variables:

     `gnus-cite-hide-percentage'
          If the cited text is of a bigger percentage than this
          variable (default 50), hide the cited text.

     `gnus-cite-hide-absolute'
          The cited text must have at least this length (default 10)
          before it is hidden.

`W W C'
     Hide cited text in articles that aren't roots
     (`gnus-article-hide-citation-in-followups').  This isn't very
     useful as an interactive command, but might be a handy function
     to stick have happen automatically (*Note Customizing
     Articles::).


All these "hiding" commands are toggles, but if you give a negative
prefix to these commands, they will show what they have previously
hidden.  If you give a positive prefix, they will always hide.

Also *Note Article Highlighting:: for further variables for citation
customization.

*Note Customizing Articles::, for how to hide article elements
automatically.




File: gnus, Node: Article Washing, Next: Article Header, Prev: Article Hiding, Up: Article Treatment

Article Washing
---------------

We call this "article washing" for a really good reason.  Namely, the
`A' key was taken, so we had to use the `W' key instead.

"Washing" is defined by us as "changing something from something to
something else", but normally results in something looking better.
Cleaner, perhaps.

*Note Customizing Articles::, if you want to change how Gnus displays
articles by default.


`C-u g'
     This is not really washing, it's sort of the opposite of washing.
     If you type this, you see the article exactly as it exists on
     disk or on the server.

`g'
     Force redisplaying of the current article
     (`gnus-summary-show-article').  This is also not really washing.
     If you type this, you see the article without any previously
     applied interactive Washing functions but with all default
     treatments (*Note Customizing Articles::).

`W l'
     Remove page breaks from the current article
     (`gnus-summary-stop-page-breaking').  *Note Misc Article::, for
     page delimiters.

`W r'
     Do a Caesar rotate (rot13) on the article buffer
     (`gnus-summary-caesar-message').  Unreadable articles that tell
     you to read them with Caesar rotate or rot13.  (Typically
     offensive jokes and such.)

     It's commonly called "rot13" because each letter is rotated 13
     positions in the alphabet, e. g. `B' (letter #2) -> `O' (letter
     #15).  It is sometimes referred to as "Caesar rotate" because
     Caesar is rumored to have employed this form of, uh, somewhat
     weak encryption.

`W m'
     Morse decode the article buffer (`gnus-summary-morse-message').

`W i'
     Decode IDNA encoded domain names in the current articles.  IDNA
     encoded domain names looks like `xn--bar'.  If a string remain
     unencoded after running invoking this, it is likely an invalid
     IDNA string (`xn--bar' is invalid).  You must have GNU Libidn
     (`http://www.gnu.org/software/libidn/') installed for this
     command to work.

`W t'
`t'
     Toggle whether to display all headers in the article buffer
     (`gnus-summary-toggle-header').

`W v'
     Toggle whether to display all headers in the article buffer
     permanently (`gnus-summary-verbose-headers').

`W o'
     Treat overstrike (`gnus-article-treat-overstrike').

`W d'
     Treat M****s*** sm*rtq**t*s according to
     `gnus-article-dumbquotes-map' (`gnus-article-treat-dumbquotes').
     Note that this function guesses whether a character is a
     sm*rtq**t* or not, so it should only be used interactively.

     Sm*rtq**t*s are M****s***'s unilateral extension to the character
     map in an attempt to provide more quoting characters.  If you see
     something like `\222' or `\264' where you're expecting some kind
     of apostrophe or quotation mark, then try this wash.

`W Y f'
     Full deuglify of broken Outlook (Express) articles: Treat
     dumbquotes, unwrap lines, repair attribution and rearrange
     citation.  (`gnus-article-outlook-deuglify-article').

`W Y u'
     Unwrap lines that appear to be wrapped citation lines.  You can
     control what lines will be unwrapped by frobbing
     `gnus-outlook-deuglify-unwrap-min' and
     `gnus-outlook-deuglify-unwrap-max', indicating the minimum and
     maximum length of an unwrapped citation line.
     (`gnus-article-outlook-unwrap-lines').

`W Y a'
     Repair a broken attribution line.
     (`gnus-article-outlook-repair-attribution').

`W Y c'
     Repair broken citations by rearranging the text.
     (`gnus-article-outlook-rearrange-citation').

`W w'
     Do word wrap (`gnus-article-fill-cited-article').

     You can give the command a numerical prefix to specify the width
     to use when filling.

`W Q'
     Fill long lines (`gnus-article-fill-long-lines').

`W C'
     Capitalize the first word in each sentence
     (`gnus-article-capitalize-sentences').

`W c'
     Translate CRLF pairs (i. e., `^M's on the end of the lines) into
     LF (this takes care of DOS line endings), and then translate any
     remaining CRs into LF (this takes care of Mac line endings)
     (`gnus-article-remove-cr').

`W q'
     Treat quoted-printable (`gnus-article-de-quoted-unreadable').
     Quoted-Printable is one common MIME encoding employed when
     sending non-ASCII (i.e., 8-bit) articles.  It typically makes
     strings like `d'ej`a vu' look like `d=E9j=E0 vu', which doesn't
     look very readable to me.  Note that this is usually done
     automatically by Gnus if the message in question has a
     `Content-Transfer-Encoding' header that says that this encoding
     has been done.  If a prefix is given, a charset will be asked
     for.

`W 6'
     Treat base64 (`gnus-article-de-base64-unreadable').  Base64 is
     one common MIME encoding employed when sending non-ASCII (i.e.,
     8-bit) articles.  Note that this is usually done automatically by
     Gnus if the message in question has a `Content-Transfer-Encoding'
     header that says that this encoding has been done.  If a prefix
     is given, a charset will be asked for.

`W Z'
     Treat HZ or HZP (`gnus-article-decode-HZ').  HZ (or HZP) is one
     common encoding employed when sending Chinese articles.  It
     typically makes strings look like `~{<:Ky2;S{#,NpJ)l6HK!#~}'.

`W A'
     Translate ANSI SGR control sequences into overlays or extents
     (`gnus-article-treat-ansi-sequences').  ANSI sequences are used
     in some Chinese hierarchies for highlighting.

`W u'
     Remove newlines from within URLs.  Some mailers insert newlines
     into outgoing email messages to keep lines short.  This
     reformatting can split long URLs onto multiple lines.  Repair
     those URLs by removing the newlines
     (`gnus-article-unsplit-urls').

`W h'
     Treat HTML (`gnus-article-wash-html').  Note that this is
     usually done automatically by Gnus if the message in question has a
     `Content-Type' header that says that the message is HTML.

     If a prefix is given, a charset will be asked for.  If it is a
     number, the charset defined in
     `gnus-summary-show-article-charset-alist' (*Note Paging the
     Article::) will be used.

     The default is to use the function specified by
     `mm-text-html-renderer' (*Note Display Customization:
     (emacs-mime)Display Customization.) to convert the HTML, but this
     is controlled by the `gnus-article-wash-function' variable.
     Pre-defined functions you can use include:

     `w3'
          Use Emacs/W3.

     `w3m'
          Use emacs-w3m (http://emacs-w3m.namazu.org/).

     `w3m-standalone'
          Use w3m (http://w3m.sourceforge.net/).

     `links'
          Use Links (http://links.sf.net/).

     `lynx'
          Use Lynx (http://lynx.isc.org/).

     `html2text'
          Use html2text--a simple HTML converter included with Gnus.


`W b'
     Add clickable buttons to the article (`gnus-article-add-buttons').
     *Note Article Buttons::.

`W B'
     Add clickable buttons to the article headers
     (`gnus-article-add-buttons-to-head').

`W p'
     Verify a signed control message
     (`gnus-article-verify-x-pgp-sig').  Control messages such as
     `newgroup' and `checkgroups' are usually signed by the hierarchy
     maintainer.  You need to add the PGP public key of the maintainer
     to your keyring to verify the message. (1) (*Note Article
     Washing-Footnotes::)

`W s'
     Verify a signed (PGP, PGP/MIME or S/MIME) message
     (`gnus-summary-force-verify-and-decrypt'). *Note Security::.

`W a'
     Strip headers like the `X-No-Archive' header from the beginning
     of article bodies (`gnus-article-strip-headers-in-body').

`W E l'
     Remove all blank lines from the beginning of the article
     (`gnus-article-strip-leading-blank-lines').

`W E m'
     Replace all blank lines with empty lines and then all multiple
     empty lines with a single empty line.
     (`gnus-article-strip-multiple-blank-lines').

`W E t'
     Remove all blank lines at the end of the article
     (`gnus-article-remove-trailing-blank-lines').

`W E a'
     Do all the three commands above
     (`gnus-article-strip-blank-lines').

`W E A'
     Remove all blank lines (`gnus-article-strip-all-blank-lines').

`W E s'
     Remove all white space from the beginning of all lines of the
     article body (`gnus-article-strip-leading-space').

`W E e'
     Remove all white space from the end of all lines of the article
     body (`gnus-article-strip-trailing-space').


*Note Customizing Articles::, for how to wash articles automatically.



File: gnus  Node: Article Washing-Footnotes, Up: Article Washing

(1) PGP keys for many hierarchies are available at
`ftp://ftp.isc.org/pub/pgpcontrol/README.html'



File: gnus, Node: Article Header, Next: Article Buttons, Prev: Article Washing, Up: Article Treatment

Article Header
--------------

These commands perform various transformations of article header.


`W G u'
     Unfold folded header lines (`gnus-article-treat-unfold-headers').

`W G n'
     Fold the `Newsgroups' and `Followup-To' headers
     (`gnus-article-treat-fold-newsgroups').

`W G f'
     Fold all the message headers (`gnus-article-treat-fold-headers').

`W E w'
     Remove excessive whitespace from all headers
     (`gnus-article-remove-leading-whitespace').





File: gnus, Node: Article Buttons, Next: Article Button Levels, Prev: Article Header, Up: Article Treatment

Article Buttons
---------------

People often include references to other stuff in articles, and it
would be nice if Gnus could just fetch whatever it is that people talk
about with the minimum of fuzz when you hit `RET' or use the middle
mouse button on these references.

Gnus adds "buttons" to certain standard references by default:
Well-formed URLs, mail addresses, Message-IDs, Info links, man pages
and Emacs or Gnus related references.  This is controlled by two
variables, one that handles article bodies and one that handles
article heads:


`gnus-button-alist'
     This is an alist where each entry has this form:

          (REGEXP BUTTON-PAR USE-P FUNCTION DATA-PAR)


     REGEXP
          All text that match this regular expression (case insensitive) will be
          considered an external reference.  Here's a typical regexp that matches
          embedded URLs: `<URL:\\([^\n\r>]*\\)>'.  This can also be a
          variable containing a regexp, useful variables to use include
          `gnus-button-url-regexp' and `gnus-button-mid-or-mail-regexp'.

     BUTTON-PAR
          Gnus has to know which parts of the matches is to be
          highlighted.  This is a number that says what sub-expression
          of the regexp is to be highlighted.  If you want it all
          highlighted, you use 0 here.

     USE-P
          This form will be `eval'ed, and if the result is non-`nil',
          this is considered a match.  This is useful if you want
          extra sifting to avoid false matches.  Often variables named
          `gnus-button-*-level' are used here, *Note Article Button
          Levels::, but any other form may be used too.


     FUNCTION
          This function will be called when you click on this button.

     DATA-PAR
          As with BUTTON-PAR, this is a sub-expression number, but
          this one says which part of the match is to be sent as data
          to FUNCTION.


     So the full entry for buttonizing URLs is then

          ("<URL:\\([^\n\r>]*\\)>" 0 t gnus-button-url 1)

`gnus-header-button-alist'
     This is just like the other alist, except that it is applied to
     the article head only, and that each entry has an additional
     element that is used to say what headers to apply the buttonize
     coding to:

          (HEADER REGEXP BUTTON-PAR USE-P FUNCTION DATA-PAR)

     HEADER is a regular expression.


Related variables and functions
...............................

`gnus-button-*-level'
     *Note Article Button Levels::.


`gnus-button-url-regexp'
     A regular expression that matches embedded URLs.  It is used in
     the default values of the variables above.


`gnus-button-man-handler'
     The function to use for displaying man pages.  It must take at
     least one argument with a string naming the man page.


`gnus-button-mid-or-mail-regexp'
     Regular expression that matches a message ID or a mail address.

`gnus-button-prefer-mid-or-mail'
     This variable determines what to do when the button on a string as
     `foo123@bar.invalid' is pushed.  Strings like this can be either a
     message ID or a mail address.  If it is one of the symbols `mid' or
     `mail', Gnus will always assume that the string is a message ID or
     a mail address, respectively.  If this variable is set to the symbol
     `ask', always query the user what to do.  If it is a function, this
     function will be called with the string as its only argument.  The
     function must return `mid', `mail', `invalid' or
     `ask'.  The default value is the function
     `gnus-button-mid-or-mail-heuristic'.

`gnus-button-mid-or-mail-heuristic'
     Function that guesses whether its argument is a message ID or a
     mail address.  Returns `mid' if it's a message IDs, `mail' if
     it's a mail address, `ask' if unsure and `invalid' if the string
     is invalid.

`gnus-button-mid-or-mail-heuristic-alist'
     An alist of `(RATE . REGEXP)' pairs used by the function
     `gnus-button-mid-or-mail-heuristic'.


`gnus-button-ctan-handler'
     The function to use for displaying CTAN links.  It must take one
     argument, the string naming the URL.

`gnus-ctan-url'
     Top directory of a CTAN (Comprehensive TeX Archive Network)
     archive used by `gnus-button-ctan-handler'.


`gnus-article-button-face'
     Face used on buttons.

`gnus-article-mouse-face'
     Face used when the mouse cursor is over a button.


*Note Customizing Articles::, for how to buttonize articles automatically.




File: gnus, Node: Article Button Levels, Next: Article Date, Prev: Article Buttons, Up: Article Treatment

Article button levels
---------------------
The higher the value of the variables `gnus-button-*-level', the more
buttons will appear.  If the level is zero, no corresponding buttons
are displayed.  With the default value (which is 5) you should already
see quite a lot of buttons.  With higher levels, you will see more
buttons, but you may also get more false positives.  To avoid them,
you can set the variables `gnus-button-*-level' local to specific
groups (*Note Group Parameters::).  Here's an example for the variable
`gnus-parameters':

     ;; increase `gnus-button-*-level' in some groups:
     (setq gnus-parameters
           '(("\\<\\(emacs\\|gnus\\)\\>" (gnus-button-emacs-level 10))
             ("\\<unix\\>"               (gnus-button-man-level 10))
             ("\\<tex\\>"                (gnus-button-tex-level 10))))


`gnus-button-browse-level'
     Controls the display of references to message IDs, mail addresses and
     news URLs.  Related variables and functions include
     `gnus-button-url-regexp', `browse-url', and
     `browse-url-browser-function'.

`gnus-button-emacs-level'
     Controls the display of Emacs or Gnus references.  Related functions are
     `gnus-button-handle-custom',
     `gnus-button-handle-describe-function',
     `gnus-button-handle-describe-variable',
     `gnus-button-handle-symbol',
     `gnus-button-handle-describe-key',
     `gnus-button-handle-apropos',
     `gnus-button-handle-apropos-command',
     `gnus-button-handle-apropos-variable',
     `gnus-button-handle-apropos-documentation', and
     `gnus-button-handle-library'.

`gnus-button-man-level'
     Controls the display of references to (Unix) man pages.  See
     `gnus-button-man-handler'.

`gnus-button-message-level'
     Controls the display of message IDs, mail addresses and news URLs.
     Related variables and functions include
     `gnus-button-mid-or-mail-regexp',
     `gnus-button-prefer-mid-or-mail',
     `gnus-button-mid-or-mail-heuristic', and
     `gnus-button-mid-or-mail-heuristic-alist'.

`gnus-button-tex-level'
     Controls the display of references to TeX or LaTeX stuff, e.g. for CTAN
     URLs.  See the variables `gnus-ctan-url',
     `gnus-button-ctan-handler',
     `gnus-button-ctan-directory-regexp', and
     `gnus-button-handle-ctan-bogus-regexp'.





File: gnus, Node: Article Date, Next: Article Display, Prev: Article Button Levels, Up: Article Treatment

Article Date
------------

The date is most likely generated in some obscure timezone you've
never heard of, so it's quite nice to be able to find out what the
time was when the article was sent.


`W T u'
     Display the date in UT (aka. GMT, aka ZULU)
     (`gnus-article-date-ut').

`W T i'
     Display the date in international format, aka. ISO 8601
     (`gnus-article-date-iso8601').

`W T l'
     Display the date in the local timezone
     (`gnus-article-date-local').

`W T p'
     Display the date in a format that's easily pronounceable in
     English (`gnus-article-date-english').

`W T s'
     Display the date using a user-defined format
     (`gnus-article-date-user').  The format is specified by the
     `gnus-article-time-format' variable, and is a string that's
     passed to `format-time-string'.  See the documentation of that
     variable for a list of possible format specs.

`W T e'
     Say how much time has elapsed between the article was posted and
     now (`gnus-article-date-lapsed').  It looks something like:

          X-Sent: 6 weeks, 4 days, 1 hour, 3 minutes, 8 seconds ago

     The value of `gnus-article-date-lapsed-new-header' determines
     whether this header will just be added below the old Date one, or
     will replace it.

     An advantage of using Gnus to read mail is that it converts
     simple bugs into wonderful absurdities.

     If you want to have this line updated continually, you can put

          (gnus-start-date-timer)

     in your `~/.gnus.el' file, or you can run it off of some hook.
     If you want to stop the timer, you can use the
     `gnus-stop-date-timer' command.

`W T o'
     Display the original date (`gnus-article-date-original').  This can
     be useful if you normally use some other conversion function and are
     worried that it might be doing something totally wrong.  Say, claiming
     that the article was posted in 1854.  Although something like that is
     *totally* impossible.  Don't you trust me? *titter*


*Note Customizing Articles::, for how to display the date in your
preferred format automatically.




File: gnus, Node: Article Display, Next: Article Signature, Prev: Article Date, Up: Article Treatment

Article Display
---------------

These commands add various frivolous display gimmicks to the article
buffer in Emacs versions that support them.

`X-Face' headers are small black-and-white images supplied by the
message headers (*Note X-Face::).

`Face' headers are small colored images supplied by the message
headers (*Note Face::).

Smileys are those little `:-)' symbols that people like to litter
their messages with (*Note Smileys::).

Picons, on the other hand, reside on your own system, and Gnus will
try to match the headers to what you have (*Note Picons::).

All these functions are toggles--if the elements already exist,
they'll be removed.

`W D x'
     Display an `X-Face' in the `From' header.
     (`gnus-article-display-x-face').

`W D d'
     Display a `Face' in the `From' header.
     (`gnus-article-display-face').

`W D s'
     Display smileys (`gnus-treat-smiley').

`W D f'
     Piconify the `From' header (`gnus-treat-from-picon').

`W D m'
     Piconify all mail headers (i. e., `Cc', `To')
     (`gnus-treat-mail-picon').

`W D n'
     Piconify all news headers (i. e., `Newsgroups' and
     `Followup-To') (`gnus-treat-newsgroups-picon').

`W D D'
     Remove all images from the article buffer
     (`gnus-article-remove-images').






File: gnus, Node: Article Signature, Next: Article Miscellanea, Prev: Article Display, Up: Article Treatment

Article Signature
-----------------

Each article is divided into two parts--the head and the body.  The
body can be divided into a signature part and a text part.  The
variable that says what is to be considered a signature is
`gnus-signature-separator'.  This is normally the standard `^-- $' as
mandated by son-of-RFC 1036.  However, many people use non-standard
signature separators, so this variable can also be a list of regular
expressions to be tested, one by one.  (Searches are done from the end
of the body towards the beginning.)  One likely value is:

     (setq gnus-signature-separator
           '("^-- $"         ; The standard
             "^-- *$"        ; A common mangling
             "^-------*$"    ; Many people just use a looong
                             ; line of dashes.  Shame!
             "^ *--------*$" ; Double-shame!
             "^________*$"   ; Underscores are also popular
             "^========*$")) ; Pervert!

The more permissive you are, the more likely it is that you'll get
false positives.

`gnus-signature-limit' provides a limit to what is considered a
signature when displaying articles.

  1. If it is an integer, no signature may be longer (in characters)
     than that integer.
  2. If it is a floating point number, no signature may be longer (in
     lines) than that number.
  3. If it is a function, the function will be called without any
     parameters, and if it returns `nil', there is no signature in the
     buffer.
  4. If it is a string, it will be used as a regexp.  If it matches,
     the text in question is not a signature.

This variable can also be a list where the elements may be of the
types listed above.  Here's an example:

     (setq gnus-signature-limit
           '(200.0 "^---*Forwarded article"))

This means that if there are more than 200 lines after the signature
separator, or the text after the signature separator is matched by the
regular expression `^---*Forwarded article', then it isn't a signature
after all.




File: gnus, Node: Article Miscellanea, Prev: Article Signature, Up: Article Treatment

Article Miscellanea
-------------------

`A t'
     Translate the article from one language to another
     (`gnus-article-babel').





File: gnus, Node: MIME Commands, Next: Charsets, Prev: Article Treatment, Up: Summary Buffer

MIME Commands
=============

The following commands all understand the numerical prefix.  For
instance, `3 K v' means "view the third MIME part".

`b'
`K v'
     View the MIME part.

`K o'
     Save the MIME part.

`K O'
     Prompt for a file name, then save the MIME part and strip it from
     the article.  The stripped MIME object will be referred via the
     message/external-body MIME type.

`K r'
     Replace the MIME part with an external body.

`K d'
     Delete the MIME part and add some information about the removed
     part.

`K c'
     Copy the MIME part.

`K e'
     View the MIME part externally.

`K i'
     View the MIME part internally.

`K |'
     Pipe the MIME part to an external command.

The rest of these MIME commands do not use the numerical prefix in the
same manner:

`K H'
     View `text/html' parts of the current article with a WWW browser.
     The message header is added to the beginning of every html part
     unless the prefix argument is given.

     Warning: Spammers use links to images in HTML articles to verify
     whether you have read the message.  As this command passes the
     HTML content to the browser without eliminating these "web bugs"
     you should only use it for mails from trusted senders.

     If you always want to display HTML parts in the browser, set
     `mm-text-html-renderer' to `nil'.

`K b'
     Make all the MIME parts have buttons in front of them.  This is
     mostly useful if you wish to save (or perform other actions) on
     inlined parts.

`K m'
     Some multipart messages are transmitted with missing or faulty
     headers.  This command will attempt to "repair" these messages so
     that they can be viewed in a more pleasant manner
     (`gnus-summary-repair-multipart').

`X m'
     Save all parts matching a MIME type to a directory
     (`gnus-summary-save-parts').  Understands the process/prefix
     convention (*Note Process/Prefix::).

`M-t'
     Toggle the buttonized display of the article buffer
     (`gnus-summary-toggle-display-buttonized').

`W M w'
     Decode RFC 2047-encoded words in the article headers
     (`gnus-article-decode-mime-words').

`W M c'
     Decode encoded article bodies as well as charsets
     (`gnus-article-decode-charset').

     This command looks in the `Content-Type' header to determine the
     charset.  If there is no such header in the article, you can give
     it a prefix, which will prompt for the charset to decode as.  In
     regional groups where people post using some common encoding (but
     do not include MIME headers), you can set the `charset'
     group/topic parameter to the required charset (*Note Group
     Parameters::).

`W M v'
     View all the MIME parts in the current article
     (`gnus-mime-view-all-parts').


Relevant variables:

`gnus-ignored-mime-types'
     This is a list of regexps.  MIME types that match a regexp from
     this list will be completely ignored by Gnus.  The default value is
     `nil'.

     To have all Vcards be ignored, you'd say something like this:

          (setq gnus-ignored-mime-types
                '("text/x-vcard"))

`gnus-article-loose-mime'
     If non-`nil', Gnus won't require the `MIME-Version' header before
     interpreting the message as a MIME message.  This helps when
     reading messages from certain broken mail user agents.  The
     default is `t'.

`gnus-article-emulate-mime'
     There are other, non-MIME encoding methods used.  The most common
     is `uuencode', but yEncode is also getting to be popular.  If
     this variable is non-`nil', Gnus will look in message bodies to
     see if it finds these encodings, and if so, it'll run them
     through the Gnus MIME machinery.  The default is `t'.  Only
     single-part yEnc encoded attachments can be decoded.  There's no
     support for encoding in Gnus.

`gnus-unbuttonized-mime-types'
     This is a list of regexps.  MIME types that match a regexp from
     this list won't have MIME buttons inserted unless they aren't
     displayed or this variable is overridden by
     `gnus-buttonized-mime-types'.  The default value is
     `(".*/.*")'.  This variable is only used when
     `gnus-inhibit-mime-unbuttonizing' is `nil'.

`gnus-buttonized-mime-types'
     This is a list of regexps.  MIME types that match a regexp from
     this list will have MIME buttons inserted unless they aren't
     displayed.  This variable overrides
     `gnus-unbuttonized-mime-types'.  The default value is `nil'.
     This variable is only used when `gnus-inhibit-mime-unbuttonizing'
     is `nil'.

     To see e.g. security buttons but no other buttons, you could set this
     variable to `("multipart/signed")' and leave
     `gnus-unbuttonized-mime-types' at the default value.

     You could also add `"multipart/alternative"' to this list to
     display radio buttons that allow you to choose one of two media
     types those mails include.  See also
     `mm-discouraged-alternatives' (*Note Display Customization:
     (emacs-mime)Display Customization.).

`gnus-inhibit-mime-unbuttonizing'
     If this is non-`nil', then all MIME parts get buttons.  The
     default value is `nil'.

`gnus-article-mime-part-function'
     For each MIME part, this function will be called with the MIME
     handle as the parameter.  The function is meant to be used to
     allow users to gather information from the article (e. g., add
     Vcard info to the bbdb database) or to do actions based on parts
     (e. g., automatically save all jpegs into some directory).

     Here's an example function the does the latter:

          (defun my-save-all-jpeg-parts (handle)
            (when (equal (car (mm-handle-type handle)) "image/jpeg")
              (with-temp-buffer
                (insert (mm-get-part handle))
                (write-region (point-min) (point-max)
                              (read-file-name "Save jpeg to: ")))))
          (setq gnus-article-mime-part-function
                'my-save-all-jpeg-parts)

`gnus-mime-multipart-functions'
     Alist of MIME multipart types and functions to handle them.

`gnus-mime-display-multipart-alternative-as-mixed'
     Display "multipart/alternative" parts as "multipart/mixed".

`gnus-mime-display-multipart-related-as-mixed'
     Display "multipart/related" parts as "multipart/mixed".

     If displaying `text/html' is discouraged, see
     `mm-discouraged-alternatives', images or other material inside a
     multipart/related" part might be overlooked when this variable is
     `nil'.  *Note Display Customization: (emacs-mime)Display
     Customization.

`gnus-mime-display-multipart-as-mixed'
     Display "multipart" parts as "multipart/mixed".  If `t', it
     overrides `nil' values of
     `gnus-mime-display-multipart-alternative-as-mixed' and
     `gnus-mime-display-multipart-related-as-mixed'.

`mm-file-name-rewrite-functions'
     List of functions used for rewriting file names of MIME parts.
     Each function takes a file name as input and returns a file name.

     Ready-made functions include
     `mm-file-name-delete-whitespace',
     `mm-file-name-trim-whitespace',
     `mm-file-name-collapse-whitespace', and
     `mm-file-name-replace-whitespace'.  The later uses the value of
     the variable `mm-file-name-replace-whitespace' to replace each
     whitespace character in a file name with that string; default value
     is `"_"' (a single underscore).

     The standard functions `capitalize', `downcase',
     `upcase', and `upcase-initials' may be useful, too.

     Everybody knows that whitespace characters in file names are
     evil, except those who don't know.  If you receive lots of
     attachments from such unenlightened users, you can make live
     easier by adding

          (setq mm-file-name-rewrite-functions
                '(mm-file-name-trim-whitespace
                  mm-file-name-collapse-whitespace
                  mm-file-name-replace-whitespace))

     to your `~/.gnus.el' file.





File: gnus, Node: Charsets, Next: Article Commands, Prev: MIME Commands, Up: Summary Buffer

Charsets
========

People use different charsets, and we have MIME to let us know what
charsets they use.  Or rather, we wish we had.  Many people use
newsreaders and mailers that do not understand or use MIME, and just
send out messages without saying what character sets they use.  To
help a bit with this, some local news hierarchies have policies that
say what character set is the default.  For instance, the `fj'
hierarchy uses `iso-2022-jp'.

This knowledge is encoded in the `gnus-group-charset-alist' variable,
which is an alist of regexps (use the first item to match full group
names) and default charsets to be used when reading these groups.

In addition, some people do use soi-disant MIME-aware agents that
aren't.  These blithely mark messages as being in `iso-8859-1' even if
they really are in `koi-8'.  To help here, the
`gnus-newsgroup-ignored-charsets' variable can be used.  The charsets
that are listed here will be ignored.  The variable can be set on a
group-by-group basis using the group parameters (*Note Group
Parameters::).  The default value is `(unknown-8bit x-unknown)', which
includes values some agents insist on having in there.

When posting, `gnus-group-posting-charset-alist' is used to determine
which charsets should not be encoded using the MIME encodings.  For
instance, some hierarchies discourage using quoted-printable header
encoding.

This variable is an alist of regexps and permitted unencoded charsets
for posting.  Each element of the alist has the form `('TEST HEADER
BODY-LIST`)', where:

TEST
     is either a regular expression matching the newsgroup header or a
     variable to query,
HEADER
     is the charset which may be left unencoded in the header (`nil'
     means encode all charsets),
BODY-LIST
     is a list of charsets which may be encoded using 8bit
     content-transfer encoding in the body, or one of the special
     values `nil' (always encode using quoted-printable) or `t'
     (always use 8bit).


*Note Encoding Customization: (emacs-mime)Encoding Customization, for
additional variables that control which MIME charsets are used when
sending messages.

Other charset tricks that may be useful, although not Gnus-specific:

If there are several MIME charsets that encode the same Emacs charset,
you can choose what charset to use by saying the following:

     (put-charset-property 'cyrillic-iso8859-5
                           'preferred-coding-system 'koi8-r)

This means that Russian will be encoded using `koi8-r' instead of the
default `iso-8859-5' MIME charset.

If you want to read messages in `koi8-u', you can cheat and say

     (define-coding-system-alias 'koi8-u 'koi8-r)

This will almost do the right thing.

And finally, to read charsets like `windows-1251', you can say
something like

     (codepage-setup 1251)
     (define-coding-system-alias 'windows-1251 'cp1251)




File: gnus, Node: Article Commands, Next: Summary Sorting, Prev: Charsets, Up: Summary Buffer

Article Commands
================


`A P'
     Generate and print a PostScript image of the article buffer
     (`gnus-summary-print-article').  `gnus-ps-print-hook' will be run
     just before printing the buffer.  An alternative way to print
     article is to use Muttprint (*Note Saving Articles::).





File: gnus, Node: Summary Sorting, Next: Finding the Parent, Prev: Article Commands, Up: Summary Buffer

Summary Sorting
===============

You can have the summary buffer sorted in various ways, even though I
can't really see why you'd want that.


`C-c C-s C-n'
     Sort by article number (`gnus-summary-sort-by-number').

`C-c C-s C-a'
     Sort by author (`gnus-summary-sort-by-author').

`C-c C-s C-t'
     Sort by recipient (`gnus-summary-sort-by-recipient').

`C-c C-s C-s'
     Sort by subject (`gnus-summary-sort-by-subject').

`C-c C-s C-d'
     Sort by date (`gnus-summary-sort-by-date').

`C-c C-s C-l'
     Sort by lines (`gnus-summary-sort-by-lines').

`C-c C-s C-c'
     Sort by article length (`gnus-summary-sort-by-chars').

`C-c C-s C-i'
     Sort by score (`gnus-summary-sort-by-score').

`C-c C-s C-r'
     Randomize (`gnus-summary-sort-by-random').

`C-c C-s C-o'
     Sort using the default sorting method
     (`gnus-summary-sort-by-original').

These functions will work both when you use threading and when you
don't use threading.  In the latter case, all summary lines will be
sorted, line by line.  In the former case, sorting will be done on a
root-by-root basis, which might not be what you were looking for.  To
toggle whether to use threading, type `T T' (*Note Thread Commands::).




File: gnus, Node: Finding the Parent, Next: Alternative Approaches, Prev: Summary Sorting, Up: Summary Buffer

Finding the Parent
==================

`^'
     If you'd like to read the parent of the current article, and it
     is not displayed in the summary buffer, you might still be able
     to.  That is, if the current group is fetched by NNTP, the parent
     hasn't expired and the `References' in the current article are
     not mangled, you can just press `^' or `A r'
     (`gnus-summary-refer-parent-article').  If everything goes well,
     you'll get the parent.  If the parent is already displayed in the
     summary buffer, point will just move to this article.

     If given a positive numerical prefix, fetch that many articles
     back into the ancestry.  If given a negative numerical prefix,
     fetch just that ancestor.  So if you say `3 ^', Gnus will fetch
     the parent, the grandparent and the grandgrandparent of the
     current article.  If you say `-3 ^', Gnus will only fetch the
     grandgrandparent of the current article.

`A R (Summary)'
     Fetch all articles mentioned in the `References' header of the
     article (`gnus-summary-refer-references').

`A T (Summary)'
     Display the full thread where the current article appears
     (`gnus-summary-refer-thread').  This command has to fetch all the
     headers in the current group to work, so it usually takes a
     while.  If you do it often, you may consider setting
     `gnus-fetch-old-headers' to `invisible' (*Note Filling In
     Threads::).  This won't have any visible effects normally, but
     it'll make this command work a whole lot faster.  Of course,
     it'll make group entry somewhat slow.

     The `gnus-refer-thread-limit' variable says how many old (i. e.,
     articles before the first displayed in the current group) headers
     to fetch when doing this command.  The default is 200.  If `t',
     all the available headers will be fetched.  This variable can be
     overridden by giving the `A T' command a numerical prefix.

`M-^ (Summary)'
     You can also ask Gnus for an arbitrary article, no matter what
     group it belongs to.  `M-^' (`gnus-summary-refer-article') will
     ask you for a `Message-ID', which is one of those long,
     hard-to-read thingies that look something like
     `<38o6up$6f2@hymir.ifi.uio.no>'.  You have to get it all exactly
     right.  No fuzzy searches, I'm afraid.

     Gnus looks for the `Message-ID' in the headers that have already
     been fetched, but also tries all the select methods specified by
     `gnus-refer-article-method' if it is not found.

If the group you are reading is located on a back end that does not
support fetching by `Message-ID' very well (like `nnspool'), you can
set `gnus-refer-article-method' to an NNTP method.  It would, perhaps,
be best if the NNTP server you consult is the one updating the spool
you are reading from, but that's not really necessary.

It can also be a list of select methods, as well as the special symbol
`current', which means to use the current select method.  If it is a
list, Gnus will try all the methods in the list until it finds a
match.

Here's an example setting that will first try the current method, and
then ask Google if that fails:

     (setq gnus-refer-article-method
           '(current
             (nnweb "google" (nnweb-type google))))

Most of the mail back ends support fetching by `Message-ID', but do
not do a particularly excellent job at it.  That is, `nnmbox',
`nnbabyl', `nnmaildir', `nnml', are able to locate articles from any
groups, while `nnfolder', and `nnimap' are only able to locate
articles that have been posted to the current group.  (Anything else
would be too time consuming.)  `nnmh' does not support this at all.




File: gnus, Node: Alternative Approaches, Next: Tree Display, Prev: Finding the Parent, Up: Summary Buffer

Alternative Approaches
======================

Different people like to read news using different methods.  This
being Gnus, we offer a small selection of minor modes for the summary
buffers.

* Menu:

* Pick and Read::               First mark articles and then read them.
* Binary Groups::               Auto-decode all articles.




File: gnus, Node: Pick and Read, Next: Binary Groups, Prev: Alternative Approaches, Up: Alternative Approaches

Pick and Read
-------------

Some newsreaders (like `nn' and, uhm, `Netnews' on VM/CMS) use a
two-phased reading interface.  The user first marks in a summary
buffer the articles she wants to read.  Then she starts reading the
articles with just an article buffer displayed.

Gnus provides a summary buffer minor mode that allows
this---`gnus-pick-mode'.  This basically means that a few process mark
commands become one-keystroke commands to allow easy marking, and it
provides one additional command for switching to the summary buffer.

Here are the available keystrokes when using pick mode:

`.'
     Pick the article or thread on the current line
     (`gnus-pick-article-or-thread').  If the variable
     `gnus-thread-hide-subtree' is true, then this key selects the
     entire thread when used at the first article of the thread.
     Otherwise, it selects just the article.  If given a numerical
     prefix, go to that thread or article and pick it.  (The line
     number is normally displayed at the beginning of the summary pick
     lines.)

`SPACE'
     Scroll the summary buffer up one page (`gnus-pick-next-page').
     If at the end of the buffer, start reading the picked articles.

`u'
     Unpick the thread or article
     (`gnus-pick-unmark-article-or-thread').  If the variable
     `gnus-thread-hide-subtree' is true, then this key unpicks the
     thread if used at the first article of the thread.  Otherwise it
     unpicks just the article.  You can give this key a numerical
     prefix to unpick the thread or article at that line.

`RET'
     Start reading the picked articles (`gnus-pick-start-reading').
     If given a prefix, mark all unpicked articles as read first.  If
     `gnus-pick-display-summary' is non-`nil', the summary buffer will
     still be visible when you are reading.


All the normal summary mode commands are still available in the
pick-mode, with the exception of `u'.  However `!' is available
which is mapped to the same function
`gnus-summary-tick-article-forward'.

If this sounds like a good idea to you, you could say:

     (add-hook 'gnus-summary-mode-hook 'gnus-pick-mode)

`gnus-pick-mode-hook' is run in pick minor mode buffers.

If `gnus-mark-unpicked-articles-as-read' is non-`nil', mark all
unpicked articles as read.  The default is `nil'.

The summary line format in pick mode is slightly different from the
standard format.  At the beginning of each line the line number is
displayed.  The pick mode line format is controlled by the
`gnus-summary-pick-line-format' variable (*Note Formatting Variables::).  It accepts the same format specs that
`gnus-summary-line-format' does (*Note Summary Buffer Lines::).




File: gnus, Node: Binary Groups, Prev: Pick and Read, Up: Alternative Approaches

Binary Groups
-------------

If you spend much time in binary groups, you may grow tired of hitting
`X u', `n', `RET' all the time.  `M-x gnus-binary-mode' is a minor
mode for summary buffers that makes all ordinary Gnus article
selection functions uudecode series of articles and display the result
instead of just displaying the articles the normal way.

The only way, in fact, to see the actual articles is the `g' command,
when you have turned on this mode (`gnus-binary-show-article').

`gnus-binary-mode-hook' is called in binary minor mode buffers.




File: gnus, Node: Tree Display, Next: Mail Group Commands, Prev: Alternative Approaches, Up: Summary Buffer

Tree Display
============

If you don't like the normal Gnus summary display, you might try
setting `gnus-use-trees' to `t'.  This will create (by default) an
additional "tree buffer".  You can execute all summary mode commands
in the tree buffer.

There are a few variables to customize the tree display, of course:

`gnus-tree-mode-hook'
     A hook called in all tree mode buffers.

`gnus-tree-mode-line-format'
     A format string for the mode bar in the tree mode buffers (*Note
     Mode Line Formatting::).  The default is `Gnus: %%b %S %Z'.  For
     a list of valid specs, *Note Summary Buffer Mode Line::.

`gnus-selected-tree-face'
     Face used for highlighting the selected article in the tree
     buffer.  The default is `modeline'.

`gnus-tree-line-format'
     A format string for the tree nodes.  The name is a bit of a
     misnomer, though--it doesn't define a line, but just the node.
     The default value is `%(%[%3,3n%]%)', which displays the first
     three characters of the name of the poster.  It is vital that all
     nodes are of the same length, so you *must* use `%4,4n'-like
     specifiers.

     Valid specs are:

     `n'
          The name of the poster.
     `f'
          The `From' header.
     `N'
          The number of the article.
     `['
          The opening bracket.
     `]'
          The closing bracket.
     `s'
          The subject.

     *Note Formatting Variables::.

     Variables related to the display are:

     `gnus-tree-brackets'
          This is used for differentiating between "real" articles and
          sparse" articles.  The format is ((REAL-OPEN . REAL-CLOSE)
          (SPARSE-OPEN . SPARSE-CLOSE) (DUMMY-OPEN . DUMMY-CLOSE)) and
          the default is `((?[ . ?]) (?( . ?)) (?{ . ?}) (?< . ?>))'.

     `gnus-tree-parent-child-edges'
          This is a list that contains the characters used for
          connecting parent nodes to their children.  The default is
          `(?- ?\\ ?|)'.


`gnus-tree-minimize-window'
     If this variable is non-`nil', Gnus will try to keep the tree
     buffer as small as possible to allow more room for the other Gnus
     windows.  If this variable is a number, the tree buffer will
     never be higher than that number.  The default is `t'.  Note that
     if you have several windows displayed side-by-side in a frame and
     the tree buffer is one of these, minimizing the tree window will
     also resize all other windows displayed next to it.

     You may also wish to add the following hook to keep the window
     minimized at all times:

          (add-hook 'gnus-configure-windows-hook
                    'gnus-tree-perhaps-minimize)

`gnus-generate-tree-function'
     The function that actually generates the thread tree.  Two predefined
     functions are available: `gnus-generate-horizontal-tree' and
     `gnus-generate-vertical-tree' (which is the default).


Here's an example from a horizontal tree buffer:

     {***}-(***)-[odd]-[Gun]
          |      \[Jan]
          |      \[odd]-[Eri]
          |      \(***)-[Eri]
          |            \[odd]-[Paa]
          \[Bjo]
          \[Gun]
          \[Gun]-[Jor]

Here's the same thread displayed in a vertical tree buffer:

     {***}
       |--------------------------\-----\-----\
     (***)                         [Bjo] [Gun] [Gun]
       |--\-----\-----\                          |
     [odd] [Jan] [odd] (***)                   [Jor]
       |           |     |--\
     [Gun]       [Eri] [Eri] [odd]
                               |
                             [Paa]

If you're using horizontal trees, it might be nice to display the
trees side-by-side with the summary buffer.  You could add something
like the following to your `~/.gnus.el' file:

     (setq gnus-use-trees t
           gnus-generate-tree-function 'gnus-generate-horizontal-tree
           gnus-tree-minimize-window nil)
     (gnus-add-configuration
      '(article
        (vertical 1.0
                  (horizontal 0.25
                              (summary 0.75 point)
                              (tree 1.0))
                  (article 1.0))))

*Note Window Layout::.




