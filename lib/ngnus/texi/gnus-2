Info file: gnus,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus: (gnus).         The newsreader Gnus.
END-INFO-DIR-ENTRY








File: gnus, Node: Auto Save, Next: The Active File, Prev: Startup Files, Up: Starting Up

Auto Save
=========

Whenever you do something that changes the Gnus data (reading
articles, catching up, killing/subscribing groups), the change is
added to a special "dribble buffer".  This buffer is auto-saved the
normal Emacs way.  If your Emacs should crash before you have saved
the `.newsrc' files, all changes you have made can be recovered from
this file.

If Gnus detects this file at startup, it will ask the user whether to
read it.  The auto save file is deleted whenever the real startup file
is saved.

If `gnus-use-dribble-file' is `nil', Gnus won't create and maintain a
dribble buffer.  The default is `t'.

Gnus will put the dribble file(s) in `gnus-dribble-directory'.  If
this variable is `nil', which it is by default, Gnus will dribble into
the directory where the `.newsrc' file is located.  (This is normally
the user's home directory.)  The dribble file will get the same file
permissions as the `.newsrc' file.

If `gnus-always-read-dribble-file' is non-`nil', Gnus will read the
dribble file on startup without querying the user.




File: gnus, Node: The Active File, Next: Startup Variables, Prev: Auto Save, Up: Starting Up

The Active File
===============

When Gnus starts, or indeed whenever it tries to determine whether new
articles have arrived, it reads the active file.  This is a very large
file that lists all the active groups and articles on the server.

Before examining the active file, Gnus deletes all lines that match
the regexp `gnus-ignored-newsgroups'.  This is done primarily to
reject any groups with bogus names, but you can use this variable to
make Gnus ignore hierarchies you aren't ever interested in.  However,
this is not recommended.  In fact, it's highly discouraged.  Instead,
*Note New Groups:: for an overview of other variables that can be used
instead.


The active file can be rather Huge, so if you have a slow network, you
can set `gnus-read-active-file' to `nil' to prevent Gnus from reading
the active file.  This variable is `some' by default.

Gnus will try to make do by getting information just on the groups
that you actually subscribe to.

Note that if you subscribe to lots and lots of groups, setting this
variable to `nil' will probably make Gnus slower, not faster.  At
present, having this variable `nil' will slow Gnus down considerably,
unless you read news over a 2400 baud modem.

This variable can also have the value `some'.  Gnus will then attempt
to read active info only on the subscribed groups.  On some servers
this is quite fast (on sparkling, brand new INN servers that support
the `LIST ACTIVE group' command), on others this isn't fast at all.
In any case, `some' should be faster than `nil', and is certainly
faster than `t' over slow lines.

Some news servers (old versions of Leafnode and old versions of INN,
for instance) do not support the `LIST ACTIVE group'.  For these
servers, `nil' is probably the most efficient value for this variable.

If this variable is `nil', Gnus will ask for group info in total
lock-step, which isn't very fast.  If it is `some' and you use an
NNTP server, Gnus will pump out commands as fast as it can, and
read all the replies in one swoop.  This will normally result in better
performance, but if the server does not support the aforementioned
`LIST ACTIVE group' command, this isn't very nice to the server.

If you think that starting up Gnus takes too long, try all the three
different values for this variable and see what works best for you.

In any case, if you use `some' or `nil', you should definitely kill
all groups that you aren't interested in to speed things up.

Note that this variable also affects active file retrieval from
secondary select methods.




File: gnus, Node: Startup Variables, Prev: The Active File, Up: Starting Up

Startup Variables
=================


`gnus-load-hook'
     A hook run while Gnus is being loaded.  Note that this hook will
     normally be run just once in each Emacs session, no matter how
     many times you start Gnus.

`gnus-before-startup-hook'
     A hook run after starting up Gnus successfully.

`gnus-startup-hook'
     A hook run as the very last thing after starting up Gnus

`gnus-started-hook'
     A hook that is run as the very last thing after starting up Gnus
     successfully.

`gnus-setup-news-hook'
     A hook that is run after reading the `.newsrc' file(s), but
     before generating the group buffer.

`gnus-check-bogus-newsgroups'
     If non-`nil', Gnus will check for and delete all bogus groups at
     startup.  A "bogus group" is a group that you have in your
     `.newsrc' file, but doesn't exist on the news server.  Checking
     for bogus groups can take quite a while, so to save time and
     resources it's best to leave this option off, and do the checking
     for bogus groups once in a while from the group buffer instead
     (*Note Group Maintenance::).

`gnus-inhibit-startup-message'
     If non-`nil', the startup message won't be displayed.  That way,
     your boss might not notice as easily that you are reading news instead
     of doing your job.  Note that this variable is used before
     `~/.gnus.el' is loaded, so it should be set in `.emacs' instead.

`gnus-no-groups-message'
     Message displayed by Gnus when no groups are available.

`gnus-play-startup-jingle'
     If non-`nil', play the Gnus jingle at startup.

`gnus-startup-jingle'
     Jingle to be played if the above variable is non-`nil'.  The
     default is `Tuxedomoon.Jingle4.au'.





File: gnus, Node: Group Buffer, Next: Summary Buffer, Prev: Starting Up, Up: Top

Group Buffer
************



The "group buffer" lists all (or parts) of the available groups.  It
is the first buffer shown when Gnus starts, and will never be killed
as long as Gnus is active.


* Menu:

* Group Buffer Format::         Information listed and how you can change it.
* Group Maneuvering::           Commands for moving in the group buffer.
* Selecting a Group::           Actually reading news.
* Subscription Commands::       Unsubscribing, killing, subscribing.
* Group Data::                  Changing the info for a group.
* Group Levels::                Levels? What are those, then?
* Group Score::                 A mechanism for finding out what groups you like.
* Marking Groups::              You can mark groups for later processing.
* Foreign Groups::              Creating and editing groups.
* Group Parameters::            Each group may have different parameters set.
* Listing Groups::              Gnus can list various subsets of the groups.
* Sorting Groups::              Re-arrange the group order.
* Group Maintenance::           Maintaining a tidy `.newsrc' file.
* Browse Foreign Server::       You can browse a server.  See what it has to offer.
* Exiting Gnus::                Stop reading news and get some work done.
* Group Topics::                A folding group mode divided into topics.
* Non-ASCII Group Names::       Accessing groups of non-English names.
* Misc Group Stuff::            Other stuff that you can to do.




File: gnus, Node: Group Buffer Format, Next: Group Maneuvering, Prev: Group Buffer, Up: Group Buffer

Group Buffer Format
===================

* Menu:

* Group Line Specification::    Deciding how the group buffer is to look.
* Group Mode Line Specification::  The group buffer mode line.
* Group Highlighting::          Having nice colors in the group buffer.

You can customize the Group Mode tool bar, see `M-x customize-apropos
RET gnus-group-tool-bar'.  This feature is only available in Emacs.

The tool bar icons are now (de)activated correctly depending on the
cursor position.  Therefore, moving around in the Group Buffer is
slower.  You can disable this via the variable
`gnus-group-update-tool-bar'.  Its default value depends on your Emacs
version.



File: gnus, Node: Group Line Specification, Next: Group Mode Line Specification, Prev: Group Buffer Format, Up: Group Buffer Format

Group Line Specification
------------------------

The default format of the group buffer is nice and dull, but you can
make it as exciting and ugly as you feel like.

Here's a couple of example group lines:

          25: news.announce.newusers
      *    0: alt.fan.andrea-dworkin

Quite simple, huh?

You can see that there are 25 unread articles in
`news.announce.newusers'.  There are no unread articles, but some
ticked articles, in `alt.fan.andrea-dworkin' (see that little asterisk
at the beginning of the line?).

You can change that format to whatever you want by fiddling with the
`gnus-group-line-format' variable.  This variable works along the
lines of a `format' specification, which is pretty much the same as
a `printf' specifications, for those of you who use (feh!) C.
*Note Formatting Variables::.

`%M%S%5y:%B%(%g%)\n' is the value that produced those lines above.

There should always be a colon on the line; the cursor always moves to
the colon after performing an operation.  *Note Positioning Point::.
Nothing else is required--not even the group name.  All displayed text
is just window dressing, and is never examined by Gnus.  Gnus stores
all real information it needs using text properties.

(Note that if you make a really strange, wonderful, spreadsheet-like
layout, everybody will believe you are hard at work with the
accounting instead of wasting time reading news.)

Here's a list of all available format characters:


`M'
     An asterisk if the group only has marked articles.

`S'
     Whether the group is subscribed.

`L'
     Level of subscribedness.

`N'
     Number of unread articles.

`I'
     Number of dormant articles.

`T'
     Number of ticked articles.

`R'
     Number of read articles.

`U'
     Number of unseen articles.

`t'
     Estimated total number of articles.  (This is really MAX-NUMBER
     minus MIN-NUMBER plus 1.)

     Gnus uses this estimation because the NNTP protocol provides
     efficient access to MAX-NUMBER and MIN-NUMBER but getting the
     true unread message count is not possible efficiently.  For
     hysterical raisins, even the mail back ends, where the true
     number of unread messages might be available efficiently, use the
     same limited interface.  To remove this restriction from Gnus
     means that the back end interface has to be changed, which is not
     an easy job.

     The nnml backend (*Note Mail Spool::) has a feature called "group
     compaction" which circumvents this deficiency: the idea is to
     renumber all articles from 1, removing all gaps between numbers,
     hence getting a correct total count.  Other backends may support
     this in the future.  In order to keep your total article count
     relatively up to date, you might want to compact your groups (or
     even directly your server) from time to time. *Note Misc Group
     Stuff::, *Note Server Commands::.

`y'
     Number of unread, unticked, non-dormant articles.

`i'
     Number of ticked and dormant articles.

`g'
     Full group name.

`G'
     Group name.

`C'
     Group comment (*Note Group Parameters::) or group name if there
     is no comment element in the group parameters.

`D'
     Newsgroup description.  You need to read the group descriptions
     before these will appear, and to do that, you either have to set
     `gnus-read-active-file' or use the group buffer `M-d' command.

`o'
     `m' if moderated.

`O'
     `(m)' if moderated.

`s'
     Select method.

`B'
     If the summary buffer for the group is open or not.

`n'
     Select from where.

`z'
     A string that looks like `<%s:%n>' if a foreign select method is
     used.

`P'
     Indentation based on the level of the topic (*Note Group
     Topics::).

`c'
     Short (collapsed) group name.  The `gnus-group-uncollapsed-levels'
     variable says how many levels to leave at the end of the group name.
     The default is 1--this will mean that group names like
     `gnu.emacs.gnus' will be shortened to `g.e.gnus'.

`m'
     `%' (`gnus-new-mail-mark') if there has arrived new mail to the
     group lately.

`p'
     `#' (`gnus-process-mark') if the group is process marked.

`d'
     A string that says when you last read the group (*Note Group
     Timestamp::).

`F'
     The disk space used by the articles fetched by both the cache and
     agent.  The value is automatically scaled to bytes(B),
     kilobytes(K), megabytes(M), or gigabytes(G) to minimize the
     column width.  A format of %7F is sufficient for a fixed-width
     column.

`u'
     User defined specifier.  The next character in the format string
     should be a letter.  Gnus will call the function
     `gnus-user-format-function-'`X', where `X' is the letter
     following `%u'.  The function will be passed a single dummy
     parameter as argument.  The function should return a string,
     which will be inserted into the buffer just like information from
     any other specifier.

All the "number-of" specs will be filled with an asterisk (`*') if no
info is available--for instance, if it is a non-activated foreign
group, or a bogus native group.




File: gnus, Node: Group Mode Line Specification, Next: Group Highlighting, Prev: Group Line Specification, Up: Group Buffer Format

Group Mode Line Specification
-----------------------------

The mode line can be changed by setting `gnus-group-mode-line-format'
(*Note Mode Line Formatting::).  It doesn't understand that many
format specifiers:

`S'
     The native news server.
`M'
     The native select method.




File: gnus, Node: Group Highlighting, Prev: Group Mode Line Specification, Up: Group Buffer Format

Group Highlighting
------------------

Highlighting in the group buffer is controlled by the
`gnus-group-highlight' variable.  This is an alist with elements that
look like `(FORM . FACE)'.  If FORM evaluates to something non-`nil',
the FACE will be used on the line.

Here's an example value for this variable that might look nice if the
background is dark:

     (cond (window-system
            (setq custom-background-mode 'light)
            (defface my-group-face-1
              '((t (:foreground "Red" :bold t))) "First group face")
            (defface my-group-face-2
              '((t (:foreground "DarkSeaGreen4" :bold t)))
              "Second group face")
            (defface my-group-face-3
              '((t (:foreground "Green4" :bold t))) "Third group face")
            (defface my-group-face-4
              '((t (:foreground "SteelBlue" :bold t))) "Fourth group face")
            (defface my-group-face-5
              '((t (:foreground "Blue" :bold t))) "Fifth group face")))

     (setq gnus-group-highlight
           '(((> unread 200) . my-group-face-1)
             ((and (< level 3) (zerop unread)) . my-group-face-2)
             ((< level 3) . my-group-face-3)
             ((zerop unread) . my-group-face-4)
             (t . my-group-face-5)))

Also *Note Faces and Fonts::.

Variables that are dynamically bound when the forms are evaluated
include:

`group'
     The group name.
`unread'
     The number of unread articles in the group.
`method'
     The select method.
`mailp'
     Whether the group is a mail group.
`level'
     The level of the group.
`score'
     The score of the group.
`ticked'
     The number of ticked articles in the group.
`total'
     The total number of articles in the group.  Or rather,
     MAX-NUMBER minus MIN-NUMBER plus one.
`topic'
     When using the topic minor mode, this variable is bound to the
     current topic being inserted.

When the forms are `eval'ed, point is at the beginning of the line of
the group in question, so you can use many of the normal Gnus
functions for snarfing info on the group.

`gnus-group-update-hook' is called when a group line is changed.  It
will not be called when `gnus-visual' is `nil'.  This hook calls
`gnus-group-highlight-line' by default.




File: gnus, Node: Group Maneuvering, Next: Selecting a Group, Prev: Group Buffer Format, Up: Group Buffer

Group Maneuvering
=================

All movement commands understand the numeric prefix and will behave as
expected, hopefully.


`n'
     Go to the next group that has unread articles
     (`gnus-group-next-unread-group').

`p'
`DEL'
     Go to the previous group that has unread articles
     (`gnus-group-prev-unread-group').

`N'
     Go to the next group (`gnus-group-next-group').

`P'
     Go to the previous group (`gnus-group-prev-group').

`M-n'
     Go to the next unread group on the same (or lower) level
     (`gnus-group-next-unread-group-same-level').

`M-p'
     Go to the previous unread group on the same (or lower) level
     (`gnus-group-prev-unread-group-same-level').

Three commands for jumping to groups:


`j'
     Jump to a group (and make it visible if it isn't already)
     (`gnus-group-jump-to-group').  Killed groups can be jumped to,
     just like living groups.

`,'
     Jump to the unread group with the lowest level
     (`gnus-group-best-unread-group').

`.'
     Jump to the first group with unread articles
     (`gnus-group-first-unread-group').

If `gnus-group-goto-unread' is `nil', all the movement commands will
move to the next group, not the next unread group.  Even the commands
that say they move to the next unread group.  The default is `t'.

If `gnus-summary-next-group-on-exit' is `t', when a summary is
exited, the point in the group buffer is moved to the next unread group.
Otherwise, the point is set to the group just exited.  The default is
`t'.



File: gnus, Node: Selecting a Group, Next: Subscription Commands, Prev: Group Maneuvering, Up: Group Buffer

Selecting a Group
=================


`SPACE'
     Select the current group, switch to the summary buffer and
     display the first unread article (`gnus-group-read-group').  If
     there are no unread articles in the group, or if you give a
     non-numerical prefix to this command, Gnus will offer to fetch
     all the old articles in this group from the server.  If you give
     a numerical prefix N, N determines the number of articles Gnus
     will fetch.  If N is positive, Gnus fetches the N newest
     articles, if N is negative, Gnus fetches the `abs(N)' oldest
     articles.

     Thus, `SPC' enters the group normally, `C-u SPC' offers old
     articles, `C-u 4 2 SPC' fetches the 42 newest articles, and `C-u
     - 4 2 SPC' fetches the 42 oldest ones.

     When you are in the group (in the Summary buffer), you can type
     `M-g' to fetch new articles, or `C-u M-g' to also show the old
     ones.

`RET'
     Select the current group and switch to the summary buffer
     (`gnus-group-select-group').  Takes the same arguments as
     `gnus-group-read-group'---the only difference is that this
     command does not display the first unread article automatically
     upon group entry.

`M-RET'
     This does the same as the command above, but tries to do it with
     the minimum amount of fuzz (`gnus-group-quick-select-group').  No
     scoring/killing will be performed, there will be no highlights
     and no expunging.  This might be useful if you're in a real hurry
     and have to enter some humongous group.  If you give a 0 prefix
     to this command (i.e., `0 M-RET'), Gnus won't even generate the
     summary buffer, which is useful if you want to toggle threading
     before generating the summary buffer (*Note Summary Generation
     Commands::).

`M-SPACE'
     This is yet one more command that does the same as the `RET'
     command, but this one does it without expunging and hiding
     dormants (`gnus-group-visible-select-group').

`C-M-RET'
     Finally, this command selects the current group ephemerally
     without doing any processing of its contents
     (`gnus-group-select-group-ephemerally').  Even threading has been
     turned off.  Everything you do in the group after selecting it in
     this manner will have no permanent effects.


The `gnus-large-newsgroup' variable says what Gnus should consider to
be a big group.  If it is `nil', no groups are considered big.  The
default value is 200.  If the group has more (unread and/or ticked)
articles than this, Gnus will query the user before entering the
group.  The user can then specify how many articles should be fetched
from the server.  If the user specifies a negative number (-N), the N
oldest articles will be fetched.  If it is positive, the N articles
that have arrived most recently will be fetched.

`gnus-large-ephemeral-newsgroup' is the same as
`gnus-large-newsgroup', but is only used for ephemeral newsgroups.

In groups in some news servers, there might be a big gap between a few
very old articles that will never be expired and the recent ones.  In
such a case, the server will return the data like `(1 . 30000000)' for
the `LIST ACTIVE group' command, for example.  Even if there are
actually only the articles 1-10 and 29999900-30000000, Gnus doesn't
know it at first and prepares for getting 30000000 articles.  However,
it will consume hundreds megabytes of memories and might make Emacs
get stuck as the case may be.  If you use such news servers, set the
variable `gnus-newsgroup-maximum-articles' to a positive number.  The
value means that Gnus ignores articles other than this number of the
latest ones in every group.  For instance, the value 10000 makes Gnus
get only the articles 29990001-30000000 (if the latest article number
is 30000000 in a group).  Note that setting this variable to a number
might prevent you from reading very old articles.  The default value
of the variable `gnus-newsgroup-maximum-articles' is `nil', which
means Gnus never ignores old articles.

If `gnus-auto-select-first' is non-`nil', select an article
automatically when entering a group with the `SPACE' command.  Which
article this is is controlled by the `gnus-auto-select-subject'
variable.  Valid values for this variable are:


`unread'
     Place point on the subject line of the first unread article.

`first'
     Place point on the subject line of the first article.

`unseen'
     Place point on the subject line of the first unseen article.

`unseen-or-unread'
     Place point on the subject line of the first unseen article, and
     if there is no such article, place point on the subject line of
     the first unread article.

`best'
     Place point on the subject line of the highest-scored unread
     article.


This variable can also be a function.  In that case, that function
will be called to place point on a subject line.

If you want to prevent automatic selection in some group (say, in a
binary group with Huge articles) you can set the
`gnus-auto-select-first' variable to `nil' in
`gnus-select-group-hook', which is called when a group is selected.




File: gnus, Node: Subscription Commands, Next: Group Data, Prev: Selecting a Group, Up: Group Buffer

Subscription Commands
=====================


`S t'
`u'
     Toggle subscription to the current group
     (`gnus-group-unsubscribe-current-group').

`S s'
`U'
     Prompt for a group to subscribe, and then subscribe it.  If it
     was subscribed already, unsubscribe it instead
     (`gnus-group-unsubscribe-group').

`S k'
`C-k'
     Kill the current group (`gnus-group-kill-group').

`S y'
`C-y'
     Yank the last killed group (`gnus-group-yank-group').

`C-x C-t'
     Transpose two groups (`gnus-group-transpose-groups').  This isn't
     really a subscription command, but you can use it instead of a
     kill-and-yank sequence sometimes.

`S w'
`C-w'
     Kill all groups in the region (`gnus-group-kill-region').

`S z'
     Kill all zombie groups (`gnus-group-kill-all-zombies').

`S C-k'
     Kill all groups on a certain level (`gnus-group-kill-level').
     These groups can't be yanked back after killing, so this command should
     be used with some caution.  The only time where this command comes in
     really handy is when you have a `.newsrc' with lots of unsubscribed
     groups that you want to get rid off.  `S C-k' on level 7 will
     kill off all unsubscribed groups that do not have message numbers in the
     `.newsrc' file.


Also *Note Group Levels::.




File: gnus, Node: Group Data, Next: Group Levels, Prev: Subscription Commands, Up: Group Buffer

Group Data
==========


`c'
     Mark all unticked articles in this group as read
     (`gnus-group-catchup-current').  `gnus-group-catchup-group-hook'
     is called when catching up a group from the group buffer.

`C'
     Mark all articles in this group, even the ticked ones, as read
     (`gnus-group-catchup-current-all').

`M-c'
     Clear the data from the current group--nix out marks and the list
     of read articles (`gnus-group-clear-data').

`M-x gnus-group-clear-data-on-native-groups'
     If you have switched from one NNTP server to another, all your
     marks and read ranges have become worthless.  You can use this
     command to clear out all data that you have on your native
     groups.  Use with caution.





File: gnus, Node: Group Levels, Next: Group Score, Prev: Group Data, Up: Group Buffer

Group Levels
============

All groups have a level of "subscribedness".  For instance, if a group
is on level 2, it is more subscribed than a group on level 5.  You can
ask Gnus to just list groups on a given level or lower (*Note Listing
Groups::), or to just check for new articles in groups on a given
level or lower (*Note Scanning New Messages::).

Remember: The higher the level of the group, the less important it is.


`S l'
     Set the level of the current group.  If a numeric prefix is
     given, the next N groups will have their levels set.  The user
     will be prompted for a level.

Gnus considers groups from levels 1 to `gnus-level-subscribed'
(inclusive) (default 5) to be subscribed, `gnus-level-subscribed'
(exclusive) and `gnus-level-unsubscribed' (inclusive) (default 7) to
be unsubscribed, `gnus-level-zombie' to be zombies (walking dead)
(default 8) and `gnus-level-killed' to be killed (completely dead)
(default 9).  Gnus treats subscribed and unsubscribed groups exactly
the same, but zombie and killed groups have no information on what
articles you have read, etc, stored.  This distinction between dead
and living groups isn't done because it is nice or clever, it is done
purely for reasons of efficiency.

It is recommended that you keep all your mail groups (if any) on quite
low levels (e.g. 1 or 2).

Maybe the following description of the default behavior of Gnus helps
to understand what these levels are all about.  By default, Gnus shows
you subscribed nonempty groups, but by hitting `L' you can have it
show empty subscribed groups and unsubscribed groups, too.  Type `l'
to go back to showing nonempty subscribed groups again.  Thus,
unsubscribed groups are hidden, in a way.

Zombie and killed groups are similar to unsubscribed groups in that
they are hidden by default.  But they are different from subscribed
and unsubscribed groups in that Gnus doesn't ask the news server for
information (number of messages, number of unread messages) on zombie
and killed groups.  Normally, you use `C-k' to kill the groups you
aren't interested in.  If most groups are killed, Gnus is faster.

Why does Gnus distinguish between zombie and killed groups?  Well,
when a new group arrives on the server, Gnus by default makes it a
zombie group.  This means that you are normally not bothered with new
groups, but you can type `A z' to get a list of all new groups.
Subscribe the ones you like and kill the ones you don't want.  (`A k'
shows a list of killed groups.)

If you want to play with the level variables, you should show some
care.  Set them once, and don't touch them ever again.  Better yet,
don't touch them at all unless you know exactly what you're doing.

Two closely related variables are `gnus-level-default-subscribed'
(default 3) and `gnus-level-default-unsubscribed' (default 6), which
are the levels that new groups will be put on if they are
(un)subscribed.  These two variables should, of course, be inside the
relevant valid ranges.

If `gnus-keep-same-level' is non-`nil', some movement commands will
only move to groups of the same level (or lower).  In particular,
going from the last article in one group to the next group will go to
the next group of the same level (or lower).  This might be handy if
you want to read the most important groups before you read the rest.

If this variable is `best', Gnus will make the next newsgroup the one
with the best level.

All groups with a level less than or equal to
`gnus-group-default-list-level' will be listed in the group buffer by
default.

If `gnus-group-list-inactive-groups' is non-`nil', non-active groups
will be listed along with the unread groups.  This variable is `t' by
default.  If it is `nil', inactive groups won't be listed.

If `gnus-group-use-permanent-levels' is non-`nil', once you give a
level prefix to `g' or `l', all subsequent commands will use this
level as the "work" level.

Gnus will normally just activate (i. e., query the server about)
groups on level `gnus-activate-level' or less.  If you don't want to
activate unsubscribed groups, for instance, you might set this
variable to 5.  The default is 6.




File: gnus, Node: Group Score, Next: Marking Groups, Prev: Group Levels, Up: Group Buffer

Group Score
===========

You would normally keep important groups on high levels, but that
scheme is somewhat restrictive.  Don't you wish you could have Gnus
sort the group buffer according to how often you read groups, perhaps?
Within reason?

This is what "group score" is for.  You can have Gnus assign a score
to each group through the mechanism described below.  You can then
sort the group buffer based on this score.  Alternatively, you can
sort on score and then level.  (Taken together, the level and the
score is called the "rank" of the group.  A group that is on level 4
and has a score of 1 has a higher rank than a group on level 5 that
has a score of 300.  (The level is the most significant part and the
score is the least significant part.))

If you want groups you read often to get higher scores than groups you
read seldom you can add the `gnus-summary-bubble-group' function to
the `gnus-summary-exit-hook' hook.  This will result (after sorting)
in a bubbling sort of action.  If you want to see that in action after
each summary exit, you can add `gnus-group-sort-groups-by-rank' or
`gnus-group-sort-groups-by-score' to the same hook, but that will slow
things down somewhat.




File: gnus, Node: Marking Groups, Next: Foreign Groups, Prev: Group Score, Up: Group Buffer

Marking Groups
==============

If you want to perform some command on several groups, and they appear
subsequently in the group buffer, you would normally just give a
numerical prefix to the command.  Most group commands will then do
your bidding on those groups.

However, if the groups are not in sequential order, you can still
perform a command on several groups.  You simply mark the groups first
with the process mark and then execute the command.


`#'
`M m'
     Set the mark on the current group (`gnus-group-mark-group').

`M-#'
`M u'
     Remove the mark from the current group
     (`gnus-group-unmark-group').

`M U'
     Remove the mark from all groups (`gnus-group-unmark-all-groups').

`M w'
     Mark all groups between point and mark
     (`gnus-group-mark-region').

`M b'
     Mark all groups in the buffer (`gnus-group-mark-buffer').

`M r'
     Mark all groups that match some regular expression
     (`gnus-group-mark-regexp').

Also *Note Process/Prefix::.

If you want to execute some command on all groups that have been
marked with the process mark, you can use the `M-&'
(`gnus-group-universal-argument') command.  It will prompt you for the
command to be executed.




File: gnus, Node: Foreign Groups, Next: Group Parameters, Prev: Marking Groups, Up: Group Buffer

Foreign Groups
==============

Below are some group mode commands for making and editing general
foreign groups, as well as commands to ease the creation of a few
special-purpose groups.  All these commands insert the newly created
groups under point---`gnus-subscribe-newsgroup-method' is not
consulted.

Changes from the group editing commands are stored in `~/.newsrc.eld'
(`gnus-startup-file').  An alternative is the variable
`gnus-parameters', *Note Group Parameters::.


`G m'
     Make a new group (`gnus-group-make-group').  Gnus will prompt you
     for a name, a method and possibly an "address".  For an easier
     way to subscribe to NNTP groups (*Note Browse Foreign Server::).

`G M'
     Make an ephemeral group (`gnus-group-read-ephemeral-group').
     Gnus will prompt you for a name, a method and an "address".

`G r'
     Rename the current group to something else
     (`gnus-group-rename-group').  This is valid only on some
     groups--mail groups mostly.  This command might very well be
     quite slow on some back ends.

`G c'
     Customize the group parameters (`gnus-group-customize').

`G e'
     Enter a buffer where you can edit the select method of the
     current group (`gnus-group-edit-group-method').

`G p'
     Enter a buffer where you can edit the group parameters
     (`gnus-group-edit-group-parameters').

`G E'
     Enter a buffer where you can edit the group info
     (`gnus-group-edit-group').

`G d'
     Make a directory group (*Note Directory Groups::).  You will be
     prompted for a directory name
     (`gnus-group-make-directory-group').

`G h'
     Make the Gnus help group (`gnus-group-make-help-group').

`G a'
     Make a Gnus archive group (`gnus-group-make-archive-group').  By
     default a group pointing to the most recent articles will be
     created (`gnus-group-recent-archive-directory'), but given a
     prefix, a full group will be created from
     `gnus-group-archive-directory'.

`G k'
     Make a kiboze group.  You will be prompted for a name, for a regexp to
     match groups to be "included" in the kiboze group, and a series of
     strings to match on headers (`gnus-group-make-kiboze-group').
     *Note Kibozed Groups::.

`G D'
     Read an arbitrary directory as if it were a newsgroup with the
     `nneething' back end (`gnus-group-enter-directory').
     *Note Anything Groups::.

`G f'
     Make a group based on some file or other
     (`gnus-group-make-doc-group').  If you give a prefix to this
     command, you will be prompted for a file name and a file type.
     Currently supported types are `mbox', `babyl', `digest', `news',
     `rnews', `mmdf', `forward', `rfc934', `rfc822-forward',
     `mime-parts', `standard-digest', `slack-digest', `clari-briefs',
     `nsmail', `outlook', `oe-dbx', and `mailman'.  If you run this
     command without a prefix, Gnus will guess at the file type.
     *Note Document Groups::.

`G u'
     Create one of the groups mentioned in `gnus-useful-groups'
     (`gnus-group-make-useful-group').

`G w'
     Make an ephemeral group based on a web search
     (`gnus-group-make-web-group').  If you give a prefix to this
     command, make a solid group instead.  You will be prompted for the
     search engine type and the search string.  Valid search engine types
     include `google', `dejanews', and `gmane'.
     *Note Web Searches::.

     If you use the `google' search engine, you can limit the search
     to a particular group by using a match string like
     `shaving group:alt.sysadmin.recovery'.

`G R'
     Make a group based on an RSS feed
     (`gnus-group-make-rss-group').  You will be prompted for an URL.
     *Note RSS::.

`G DEL'
     This function will delete the current group
     (`gnus-group-delete-group').  If given a prefix, this function
     will actually delete all the articles in the group, and forcibly
     remove the group itself from the face of the Earth.  Use a prefix
     only if you are absolutely sure of what you are doing.  This
     command can't be used on read-only groups (like `nntp' groups),
     though.

`G V'
     Make a new, fresh, empty `nnvirtual' group
     (`gnus-group-make-empty-virtual').  *Note Virtual Groups::.

`G v'
     Add the current group to an `nnvirtual' group
     (`gnus-group-add-to-virtual').  Uses the process/prefix
     convention.

*Note Select Methods::, for more information on the various select
methods.

If `gnus-activate-foreign-newsgroups' is a positive number, Gnus will
check all foreign groups with this level or lower at startup.  This
might take quite a while, especially if you subscribe to lots of
groups from different NNTP servers.  Also *Note Group Levels::;
`gnus-activate-level' also affects activation of foreign newsgroups.


The following commands create ephemeral groups.  They can be called
not only from the Group buffer, but in any Gnus buffer.

`gnus-read-ephemeral-gmane-group'
     Read an ephemeral group on Gmane.org.  The articles are
     downloaded via HTTP using the URL specified by
     `gnus-gmane-group-download-format'.  Gnus will prompt you for a
     group name, the start article number and an the article range.

`gnus-read-ephemeral-gmane-group-url'
     This command is similar to `gnus-read-ephemeral-gmane-group', but
     the group name and the article number and range are constructed from a
     given URL.  Supported URL formats include e.g.
     `http://thread.gmane.org/gmane.foo.bar/12300/focus=12399',
     `http://thread.gmane.org/gmane.foo.bar/12345/',
     `http://article.gmane.org/gmane.foo.bar/12345/',
     `http://permalink.gmane.org/gmane.foo.bar/12345/', and
     `http://news.gmane.org/group/gmane.foo.bar/thread=12345'.

`gnus-read-ephemeral-emacs-bug-group'
     Read an Emacs bug report in an ephemeral group.  Gnus will prompt
     for a bug number.  The default is the number at point.  The URL
     is specified in `gnus-bug-group-download-format-alist'.

`gnus-read-ephemeral-debian-bug-group'
     Read a Debian bug report in an ephemeral group.  Analog to
     `gnus-read-ephemeral-emacs-bug-group'.

Some of these command are also useful for article buttons, *Note
Article Buttons::.

Here is an example:
     (require 'gnus-art)
     (add-to-list
      'gnus-button-alist
      '("#\\([0-9]+\\)\\>" 1
        (string-match "\\<emacs\\>" (or gnus-newsgroup-name ""))
        gnus-read-ephemeral-emacs-bug-group 1))




File: gnus, Node: Group Parameters, Next: Listing Groups, Prev: Foreign Groups, Up: Group Buffer

Group Parameters
================

The group parameters store information local to a particular group.

Use the `G p' or the `G c' command to edit group parameters of a
group.  (`G p' presents you with a Lisp-based interface, `G c'
presents you with a Customize-like interface.  The latter helps avoid
silly Lisp errors.)  You might also be interested in reading about topic
parameters (*Note Topic Parameters::).
Additionally, you can set group parameters via the
`gnus-parameters' variable, see below.

Here's an example group parameter list:

     ((to-address . "ding@gnus.org")
      (auto-expire . t))

We see that each element consists of a "dotted pair"---the thing
before the dot is the key, while the thing after the dot is the value.
All the parameters have this form *except* local variable specs, which
are not dotted pairs, but proper lists.

Some parameters have correspondent customizable variables, each of
which is an alist of regexps and values.

The following group parameters can be used:

`to-address'
     Address used by when doing followups and new posts.

          (to-address . "some@where.com")

     This is primarily useful in mail groups that represent closed
     mailing lists--mailing lists where it's expected that everybody
     that writes to the mailing list is subscribed to it.  Since using
     this parameter ensures that the mail only goes to the mailing
     list itself, it means that members won't receive two copies of
     your followups.

     Using `to-address' will actually work whether the group is
     foreign or not.  Let's say there's a group on the server that is
     called `fa.4ad-l'.  This is a real newsgroup, but the server has
     gotten the articles from a mail-to-news gateway.  Posting
     directly to this group is therefore impossible--you have to send
     mail to the mailing list address instead.

     See also `gnus-parameter-to-address-alist'.

`to-list'
     Address used when doing `a' in that group.

          (to-list . "some@where.com")

     It is totally ignored when doing a followup--except that if it is
     present in a news group, you'll get mail group semantics when
     doing `f'.

     If you do an `a' command in a mail group and you have neither a
     `to-list' group parameter nor a `to-address' group parameter,
     then a `to-list' group parameter will be added automatically upon
     sending the message if `gnus-add-to-list' is set to `t'.

     If this variable is set, `gnus-mailing-list-mode' is turned on
     when entering summary buffer.

     See also `gnus-parameter-to-list-alist'.

     
`subscribed'
     If this parameter is set to `t', Gnus will consider the
     to-address and to-list parameters for this group as addresses of
     mailing lists you are subscribed to.  Giving Gnus this
     information is (only) a first step in getting it to generate
     correct Mail-Followup-To headers for your posts to these lists.
     The second step is to put the following in your `.gnus.el'

          (setq message-subscribed-address-functions
                '(gnus-find-subscribed-addresses))

     *Note Mailing Lists: (message)Mailing Lists, for a complete
     treatment of available MFT support.

`visible'
     If the group parameter list has the element `(visible . t)', that
     group will always be visible in the Group buffer, regardless of
     whether it has any unread articles.

     This parameter cannot be set via `gnus-parameters'. See
     `gnus-permanently-visible-groups' as an alternative.

`broken-reply-to'
     Elements like `(broken-reply-to . t)' signals that `Reply-To'
     headers in this group are to be ignored, and for the header to be
     hidden if `reply-to' is part of `gnus-boring-article-headers'.
     This can be useful if you're reading a mailing list group where
     the listserv has inserted `Reply-To' headers that point back to
     the listserv itself.  That is broken behavior.  So there!

`to-group'
     Elements like `(to-group . "some.group.name")' means that all
     posts in that group will be sent to `some.group.name'.

`newsgroup'
     If you have `(newsgroup . t)' in the group parameter list, Gnus
     will treat all responses as if they were responses to news
     articles.  This can be useful if you have a mail group that's
     really a mirror of a news group.

`gcc-self'
     If `(gcc-self . t)' is present in the group parameter list, newly
     composed messages will be `Gcc''d to the current group.  If
     `(gcc-self . none)' is present, no `Gcc:' header will be
     generated, if `(gcc-self . "string")' is present, this string
     will be inserted literally as a `gcc' header.  This parameter
     takes precedence over any default `Gcc' rules as described later
     (*Note Archived Messages::).

     *Caveat*: Adding `(gcc-self . t)' to the parameter list of `nntp'
     groups (or the like) isn't valid.  An `nntp' server doesn't
     accept articles.

`auto-expire'
     If the group parameter has an element that looks like `(auto-expire
     . t)', all articles read will be marked as expirable.  For an
     alternative approach, *Note Expiring Mail::.

     See also `gnus-auto-expirable-newsgroups'.

`total-expire'
     If the group parameter has an element that looks like
     `(total-expire . t)', all read articles will be put through the
     expiry process, even if they are not marked as expirable.  Use
     with caution.  Unread, ticked and dormant articles are not
     eligible for expiry.

     See also `gnus-total-expirable-newsgroups'.

`expiry-wait'
     If the group parameter has an element that looks like
     `(expiry-wait . 10)', this value will override any
     `nnmail-expiry-wait' and `nnmail-expiry-wait-function' (*Note
     Expiring Mail::) when expiring expirable messages.  The value can
     either be a number of days (not necessarily an integer) or the
     symbols `never' or `immediate'.

`expiry-target'
     Where expired messages end up.  This parameter overrides
     `nnmail-expiry-target'.

`score-file'
     Elements that look like `(score-file . "file")' will make `file'
     into the current score file for the group in question.  All
     interactive score entries will be put into this file.

`adapt-file'
     Elements that look like `(adapt-file . "file")' will make `file'
     into the current adaptive file for the group in question.  All
     adaptive score entries will be put into this file.

`admin-address'
     When unsubscribing from a mailing list you should never send the
     unsubscription notice to the mailing list itself.  Instead, you'd
     send messages to the administrative address.  This parameter
     allows you to put the admin address somewhere convenient.

`display'
     Elements that look like `(display . MODE)' say which articles to
     display on entering the group.  Valid values are:

     `all'
          Display all articles, both read and unread.

     `an integer'
          Display the last INTEGER articles in the group.  This is the
          same as entering the group with `C-u INTEGER'.

     `default'
          Display the default visible articles, which normally
          includes unread and ticked articles.

     `an array'
          Display articles that satisfy a predicate.

          Here are some examples:

          `[unread]'
               Display only unread articles.

          `[not expire]'
               Display everything except expirable articles.

          `[and (not reply) (not expire)]'
               Display everything except expirable and articles you've
               already responded to.

          The available operators are `not', `and' and `or'.
          Predicates include `tick', `unsend', `undownload',
          `unread', `dormant', `expire', `reply',
          `killed', `bookmark', `score', `save',
          `cache', `forward', `unseen' and `recent'.


     The `display' parameter works by limiting the summary buffer to
     the subset specified.  You can pop the limit by using the `/ w'
     command (*Note Limiting::).

`comment'
     Elements that look like `(comment . "This is a comment")' are
     arbitrary comments on the group.  You can display comments in the
     group line (*Note Group Line Specification::).

`charset'
     Elements that look like `(charset . iso-8859-1)' will make
     `iso-8859-1' the default charset; that is, the charset that will
     be used for all articles that do not specify a charset.

     See also `gnus-group-charset-alist'.

`ignored-charsets'
     Elements that look like `(ignored-charsets x-unknown iso-8859-1)'
     will make `iso-8859-1' and `x-unknown' ignored; that is, the
     default charset will be used for decoding articles.

     See also `gnus-group-ignored-charsets-alist'.

`posting-style'
     You can store additional posting style information for this group
     here (*Note Posting Styles::).  The format is that of an entry in
     the `gnus-posting-styles' alist, except that there's no regexp
     matching the group name (of course).  Style elements in this
     group parameter will take precedence over the ones found in
     `gnus-posting-styles'.

     For instance, if you want a funky name and signature in this
     group only, instead of hacking `gnus-posting-styles', you could
     put something like this in the group parameters:

          (posting-style
            (name "Funky Name")
            ("X-My-Header" "Funky Value")
            (signature "Funky Signature"))

     If you're using topics to organize your group buffer (*Note Group
     Topics::), note that posting styles can also be set in the topics
     parameters. Posting styles in topic parameters apply to all
     groups in this topic. More precisely, the posting-style settings
     for a group result from the hierarchical merging of all
     posting-style entries in the parameters of this group and all the
     topics it belongs to.


`post-method'
     If it is set, the value is used as the method for posting message
     instead of `gnus-post-method'.

`mail-source'
     If it is set, and the setting of `mail-sources' includes a
     `group' mail source (*Note Mail Sources::), the value is a mail
     source for this group.

`banner'
     An item like `(banner . REGEXP)' causes any part of an article
     that matches the regular expression REGEXP to be stripped.  Instead of
     REGEXP, you can also use the symbol `signature' which strips the
     last signature or any of the elements of the alist
     `gnus-article-banner-alist'.

`sieve'
     This parameter contains a Sieve test that should match incoming
     mail that should be placed in this group.  From this group
     parameter, a Sieve `IF' control structure is generated, having
     the test as the condition and `fileinto "group.name";' as the
     body.

     For example, if the `INBOX.list.sieve' group has the `(sieve
     address "sender" "sieve-admin@extundo.com")' group parameter,
     when translating the group parameter into a Sieve script (*Note
     Sieve Commands::) the following Sieve code is generated:

          if address "sender" "sieve-admin@extundo.com" {
                  fileinto "INBOX.list.sieve";
          }

     To generate tests for multiple email-addresses use a group
     parameter like `(sieve address "sender" ("name@one.org"
     else@two.org"))'.  When generating a sieve script (*Note Sieve
     Commands::) Sieve code like the following is generated:

          if address "sender" ["name@one.org", "else@two.org"] {
                  fileinto "INBOX.list.sieve";
          }

     See *Note Sieve Commands:: for commands and variables that might
     be of interest in relation to the sieve parameter.

     The Sieve language is described in RFC 3028.  *Note Emacs Sieve:
     (sieve)Top.

`(agent parameters)'
     If the agent has been enabled, you can set any of the its
     parameters to control the behavior of the agent in individual
     groups. See Agent Parameters in *Note Category Syntax::.  Most
     users will choose to set agent parameters in either an agent
     category or group topic to minimize the configuration effort.

`(VARIABLE FORM)'
     You can use the group parameters to set variables local to the group you
     are entering.  If you want to turn threading off in `news.answers',
     you could put `(gnus-show-threads nil)' in the group parameters of
     that group.  `gnus-show-threads' will be made into a local variable
     in the summary buffer you enter, and the form `nil' will be
     `eval'ed there.

     Note that this feature sets the variable locally to the summary buffer.
     But some variables are evaluated in the article buffer, or in the
     message buffer (of a reply or followup or otherwise newly created
     message).  As a workaround, it might help to add the variable in
     question to `gnus-newsgroup-variables'.  *Note Various Summary Stuff::.  So if you want to set `message-from-style' via the group
     parameters, then you may need the following statement elsewhere in your
     `~/.gnus' file:

          (add-to-list 'gnus-newsgroup-variables 'message-from-style)

     A use for this feature is to remove a mailing list identifier tag
     in the subject fields of articles.  E.g. if the news group

          nntp+news.gnus.org:gmane.text.docbook.apps

     has the tag `DOC-BOOK-APPS:' in the subject of all articles, this
     tag can be removed from the article subjects in the summary
     buffer for the group by putting `(gnus-list-identifiers
     DOCBOOK-APPS:")' into the group parameters for the group.

     This can also be used as a group-specific hook function.  If you want to
     hear a beep when you enter a group, you could put something like
     `(dummy-variable (ding))' in the parameters of that group.
     `dummy-variable' will be set to the (meaningless) result of the
     `(ding)' form.

     Alternatively, since the VARIABLE becomes local to the group,
     this pattern can be used to temporarily change a hook.  For
     example, if the following is added to a group parameter

          (gnus-summary-prepared-hook
            '(lambda nil (local-set-key "d" (local-key-binding "n"))))

     when the group is entered, the 'd' key will not mark the article
     as expired.


Group parameters can be set via the `gnus-parameters' variable too.
But some variables, such as `visible', have no effect (For this case
see `gnus-permanently-visible-groups' as an alternative.).  For
example:

     (setq gnus-parameters
           '(("mail\\..*"
              (gnus-show-threads nil)
              (gnus-use-scoring nil)
              (gnus-summary-line-format
               "%U%R%z%I%(%[%d:%ub%-23,23f%]%) %s\n")
              (gcc-self . t)
              (display . all))

             ("^nnimap:\\(foo.bar\\)$"
              (to-group . "\\1"))

             ("mail\\.me"
              (gnus-use-scoring  t))

             ("list\\..*"
              (total-expire . t)
              (broken-reply-to . t))))

String value of parameters will be subjected to regexp substitution,
as the `to-group' example shows.

By default, whether comparing the group name and one of those regexps
specified in `gnus-parameters' is done in a case-sensitive manner or a
case-insensitive manner depends on the value of `case-fold-search' at
the time when the comparison is done.  The value of `case-fold-search'
is typically `t'; it means, for example, the element `("INBOX\\.FOO"
(total-expire . t))' might be applied to both the `INBOX.FOO' group
and the `INBOX.foo' group.  If you want to make those regexps always
case-sensitive, set the value of the
`gnus-parameters-case-fold-search' variable to `nil'.  Otherwise, set
it to `t' if you want to compare them always in a case-insensitive
manner.

You can define different sorting to different groups via
`gnus-parameters'.  Here is an example to sort an NNTP
group by reverse date to see the latest news at the top and an
RSS group by subject.  In this example, the first group is the
Debian daily news group `gmane.linux.debian.user.news' from
news.gmane.org.  The RSS group corresponds to the Debian
weekly news RSS feed
`http://packages.debian.org/unstable/newpkg_main.en.rdf',
*Note RSS::.

     (setq
      gnus-parameters
      '(("nntp.*gmane\\.debian\\.user\\.news"
         (gnus-show-threads nil)
         (gnus-article-sort-functions '((not gnus-article-sort-by-date)))
         (gnus-use-adaptive-scoring nil)
         (gnus-use-scoring nil))
        ("nnrss.*debian"
         (gnus-show-threads nil)
         (gnus-article-sort-functions 'gnus-article-sort-by-subject)
         (gnus-use-adaptive-scoring nil)
         (gnus-use-scoring t)
         (gnus-score-find-score-files-function 'gnus-score-find-single)
         (gnus-summary-line-format "%U%R%z%d %I%(%[ %s %]%)\n"))))




