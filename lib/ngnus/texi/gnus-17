Info file: gnus,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus: (gnus).         The newsreader Gnus.
END-INFO-DIR-ENTRY








File: gnus, Node: Splitting mail using spam-stat, Next: Low-level interface to the spam-stat dictionary, Prev: Creating a spam-stat dictionary, Up: Spam Statistics Package

Splitting mail using spam-stat
..............................

This section describes how to use the Spam statistics
*independently* of the *Note Spam Package::.

First, add the following to your `~/.gnus.el' file:

     (require 'spam-stat)
     (spam-stat-load)

This will load the necessary Gnus code, and the dictionary you
created.

Next, you need to adapt your fancy splitting rules: You need to
determine how to use `spam-stat'.  The following examples are for the
nnml back end.  Using the nnimap back end works just as well.  Just
use `nnimap-split-fancy' instead of `nnmail-split-fancy'.

In the simplest case, you only have two groups, `mail.misc' and
`mail.spam'.  The following expression says that mail is either
spam or it should go into `mail.misc'.  If it is spam, then
`spam-stat-split-fancy' will return `mail.spam'.

     (setq nnmail-split-fancy
           `(| (: spam-stat-split-fancy)
               "mail.misc"))

 -- Variable: spam-stat-split-fancy-spam-group
     The group to use for spam.  Default is `mail.spam'.

If you also filter mail with specific subjects into other groups, use
the following expression.  Only mails not matching the regular
expression are considered potential spam.

     (setq nnmail-split-fancy
           `(| ("Subject" "\\bspam-stat\\b" "mail.emacs")
               (: spam-stat-split-fancy)
               "mail.misc"))

If you want to filter for spam first, then you must be careful when
creating the dictionary.  Note that `spam-stat-split-fancy' must
consider both mails in `mail.emacs' and in `mail.misc' as non-spam,
therefore both should be in your collection of non-spam mails, when
creating the dictionary!

     (setq nnmail-split-fancy
           `(| (: spam-stat-split-fancy)
               ("Subject" "\\bspam-stat\\b" "mail.emacs")
               "mail.misc"))

You can combine this with traditional filtering.  Here, we move all
HTML-only mails into the `mail.spam.filtered' group.  Note that since
`spam-stat-split-fancy' will never see them, the mails in
`mail.spam.filtered' should be neither in your collection of spam
mails, nor in your collection of non-spam mails, when creating the
dictionary!

     (setq nnmail-split-fancy
           `(| ("Content-Type" "text/html" "mail.spam.filtered")
               (: spam-stat-split-fancy)
               ("Subject" "\\bspam-stat\\b" "mail.emacs")
               "mail.misc"))




File: gnus, Node: Low-level interface to the spam-stat dictionary, Prev: Splitting mail using spam-stat, Up: Spam Statistics Package

Low-level interface to the spam-stat dictionary
...............................................

The main interface to using `spam-stat', are the following functions:

 -- Function: spam-stat-buffer-is-spam
     Called in a buffer, that buffer is considered to be a new spam
     mail.  Use this for new mail that has not been processed before.

 -- Function: spam-stat-buffer-is-no-spam
     Called in a buffer, that buffer is considered to be a new
     non-spam mail.  Use this for new mail that has not been processed
     before.

 -- Function: spam-stat-buffer-change-to-spam
     Called in a buffer, that buffer is no longer considered to be
     normal mail but spam.  Use this to change the status of a mail
     that has already been processed as non-spam.

 -- Function: spam-stat-buffer-change-to-non-spam
     Called in a buffer, that buffer is no longer considered to be
     spam but normal mail.  Use this to change the status of a mail
     that has already been processed as spam.

 -- Function: spam-stat-save
     Save the hash table to the file.  The filename used is stored in
     the variable `spam-stat-file'.

 -- Function: spam-stat-load
     Load the hash table from a file.  The filename used is stored in
     the variable `spam-stat-file'.

 -- Function: spam-stat-score-word
     Return the spam score for a word.

 -- Function: spam-stat-score-buffer
     Return the spam score for a buffer.

 -- Function: spam-stat-split-fancy
     Use this function for fancy mail splitting.  Add the rule `(:
     spam-stat-split-fancy)' to `nnmail-split-fancy'

Make sure you load the dictionary before using it.  This requires the
following in your `~/.gnus.el' file:

     (require 'spam-stat)
     (spam-stat-load)

Typical test will involve calls to the following functions:

     Reset: (setq spam-stat (make-hash-table :test 'equal))
     Learn spam: (spam-stat-process-spam-directory "~/Mail/mail/spam")
     Learn non-spam: (spam-stat-process-non-spam-directory "~/Mail/mail/misc")
     Save table: (spam-stat-save)
     File size: (nth 7 (file-attributes spam-stat-file))
     Number of words: (hash-table-count spam-stat)
     Test spam: (spam-stat-test-directory "~/Mail/mail/spam")
     Test non-spam: (spam-stat-test-directory "~/Mail/mail/misc")
     Reduce table size: (spam-stat-reduce-size)
     Save table: (spam-stat-save)
     File size: (nth 7 (file-attributes spam-stat-file))
     Number of words: (hash-table-count spam-stat)
     Test spam: (spam-stat-test-directory "~/Mail/mail/spam")
     Test non-spam: (spam-stat-test-directory "~/Mail/mail/misc")

Here is how you would create your dictionary:

     Reset: (setq spam-stat (make-hash-table :test 'equal))
     Learn spam: (spam-stat-process-spam-directory "~/Mail/mail/spam")
     Learn non-spam: (spam-stat-process-non-spam-directory "~/Mail/mail/misc")
     Repeat for any other non-spam group you need...
     Reduce table size: (spam-stat-reduce-size)
     Save table: (spam-stat-save)



File: gnus, Node: Other modes, Next: Various Various, Prev: Spam Package, Up: Various

Interaction with other modes
============================


Dired
-----

`gnus-dired-minor-mode' provides some useful functions for dired
buffers.  It is enabled with
     (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

`C-c C-m C-a'
     Send dired's marked files as an attachment (`gnus-dired-attach').
     You will be prompted for a message buffer.

`C-c C-m C-l'
     Visit a file according to the appropriate mailcap entry
     (`gnus-dired-find-file-mailcap').  With prefix, open file in a
     new buffer.

`C-c C-m C-p'
     Print file according to the mailcap entry (`gnus-dired-print').
     If there is no print command, print in a PostScript image.



File: gnus, Node: Various Various, Prev: Other modes, Up: Various

Various Various
===============


`gnus-home-directory'
     All Gnus file and directory variables will be initialized from
     this variable, which defaults to `~/'.

`gnus-directory'
     Most Gnus storage file and directory variables will be
     initialized from this variable, which defaults to the `SAVEDIR'
     environment variable, or `~/News/' if that variable isn't set.

     Note that Gnus is mostly loaded when the `~/.gnus.el' file is read.
     This means that other directory variables that are initialized from this
     variable won't be set properly if you set this variable in
     `~/.gnus.el'.  Set this variable in `.emacs' instead.

`gnus-default-directory'
     Not related to the above variable at all--this variable says what
     the default directory of all Gnus buffers should be.  If you
     issue commands like `C-x C-f', the prompt you'll get starts in
     the current buffer's default directory.  If this variable is
     `nil' (which is the default), the default directory will be the
     default directory of the buffer you were in when you started
     Gnus.

`gnus-verbose'
     This variable is an integer between zero and ten.  The higher the
     value, the more messages will be displayed.  If this variable is
     zero, Gnus will never flash any messages, if it is seven (which
     is the default), most important messages will be shown, and if it
     is ten, Gnus won't ever shut up, but will flash so many messages
     it will make your head swim.

`gnus-verbose-backends'
     This variable works the same way as `gnus-verbose', but it
     applies to the Gnus back ends instead of Gnus proper.

`gnus-add-timestamp-to-message'
     This variable controls whether to add timestamps to messages that are
     controlled by `gnus-verbose' and `gnus-verbose-backends' and
     are issued.  The default value is `nil' which means never to add
     timestamp.  If it is `log', add timestamps to only the messages
     that go into the `*Messages*' buffer (in XEmacs, it is the
     ` *Message-Log*' buffer).  If it is neither `nil' nor
     `log', add timestamps not only to log messages but also to the ones
     displayed in the echo area.

`nnheader-max-head-length'
     When the back ends read straight heads of articles, they all try to read
     as little as possible.  This variable (default 8192) specifies
     the absolute max length the back ends will try to read before giving up
     on finding a separator line between the head and the body.  If this
     variable is `nil', there is no upper read bound.  If it is
     `t', the back ends won't try to read the articles piece by piece,
     but read the entire articles.  This makes sense with some versions of
     `ange-ftp' or `efs'.

`nnheader-head-chop-length'
     This variable (default 2048) says how big a piece of each article
     to read when doing the operation described above.

`nnheader-file-name-translation-alist'
     This is an alist that says how to translate characters in file
     names.  For instance, if `:' is invalid as a file character in
     file names on your system (you OS/2 user you), you could say
     something like:

          (setq nnheader-file-name-translation-alist
                '((?: . ?_)))

     In fact, this is the default value for this variable on OS/2 and
     MS Windows (phooey) systems.

`gnus-hidden-properties'
     This is a list of properties to use to hide "invisible" text.  It
     is `(invisible t intangible t)' by default on most systems, which
     makes invisible text invisible and intangible.

`gnus-parse-headers-hook'
     A hook called before parsing headers.  It can be used, for
     instance, to gather statistics on the headers fetched, or perhaps
     you'd like to prune some headers.  I don't see why you'd want
     that, though.

`gnus-shell-command-separator'
     String used to separate two shell commands.  The default is `;'.

`gnus-invalid-group-regexp'

     Regexp to match "invalid" group names when querying user for a
     group name.  The default value catches some *really* invalid
     group names who could possibly mess up Gnus internally (like
     allowing `:' in a group name, which is normally used to delimit
     method and group).

     IMAP users might want to allow `/' in group names though.





File: gnus, Node: The End, Next: Appendices, Prev: Various, Up: Top

The End
*******

Well, that's the manual--you can get on with your life now.  Keep in
touch.  Say hello to your cats from me.

My *ghod*---I just can't stand goodbyes.  Sniffle.

Ol' Charles Reznikoff said it pretty well, so I leave the floor to
him:

     *Te Deum*


     Not because of victories
     I sing,
     having none,
     but for the common sunshine,
     the breeze,
     the largess of the spring.


     Not for victory
     but for the day's work done
     as well as I was able;
     not for a seat upon the dais
     but at the common table.




File: gnus, Node: Appendices, Next: GNU Free Documentation License, Prev: The End, Up: Top

Appendices
**********

* Menu:

* XEmacs::                      Requirements for installing under XEmacs.
* History::                     How Gnus got where it is today.
* On Writing Manuals::          Why this is not a beginner's guide.
* Terminology::                 We use really difficult, like, words here.
* Customization::               Tailoring Gnus to your needs.
* Troubleshooting::             What you might try if things do not work.
* Gnus Reference Guide::        Rilly, rilly technical stuff.
* Emacs for Heathens::          A short introduction to Emacsian terms.
* Frequently Asked Questions::  The Gnus FAQ




File: gnus, Node: XEmacs, Next: History, Prev: Appendices, Up: Appendices

XEmacs
======

XEmacs is distributed as a collection of packages.  You should install
whatever packages the Gnus XEmacs package requires.  The current
requirements are `gnus', `mail-lib', `xemacs-base',
`eterm', `sh-script', `net-utils', `os-utils',
`dired', `mh-e', `sieve', `ps-print', `W3',
`pgg', `mailcrypt', `ecrypto', and `sasl'.




File: gnus, Node: History, Next: The Manual, Prev: XEmacs, Up: Appendices

History
=======

GNUS was written by Masanobu UMEDA.  When autumn crept up in '94, Lars
Magne Ingebrigtsen grew bored and decided to rewrite Gnus.

If you want to investigate the person responsible for this outrage,
you can point your (feh!) web browser to `http://quimby.gnus.org/'.
This is also the primary distribution point for the new and spiffy
versions of Gnus, and is known as The Site That Destroys Newsrcs And
Drives People Mad.

During the first extended alpha period of development, the new Gnus
was called "(ding) Gnus".  "(ding)" is, of course, short for "ding is
not Gnus", which is a total and utter lie, but who cares?  (Besides,
the "Gnus" in this abbreviation should probably be pronounced "news"
as UMEDA intended, which makes it a more appropriate name, don't you
think?)

In any case, after spending all that energy on coming up with a new
and spunky name, we decided that the name was *too* spunky, so we
renamed it back again to "Gnus".  But in mixed case.  "Gnus" vs.
GNUS".  New vs. old.

* Menu:

* Gnus Versions::               What Gnus versions have been released.
* Other Gnus Versions::         Other Gnus versions that also have been released.
* Why?::                        What's the point of Gnus?
* Compatibility::               Just how compatible is Gnus with GNUS?
* Conformity::                  Gnus tries to conform to all standards.
* Emacsen::                     Gnus can be run on a few modern Emacsen.
* Gnus Development::            How Gnus is developed.
* Contributors::                Oodles of people.
* New Features::                Pointers to some of the new stuff in Gnus.




File: gnus, Node: Gnus Versions, Next: Other Gnus Versions, Prev: History, Up: History

Gnus Versions
-------------

The first "proper" release of Gnus 5 was done in November 1995 when it
was included in the Emacs 19.30 distribution (132 (ding) Gnus releases
plus 15 Gnus 5.0 releases).

In May 1996 the next Gnus generation (aka. "September Gnus" (after 99
releases)) was released under the name "Gnus 5.2" (40 releases).

On July 28th 1996 work on Red Gnus was begun, and it was released on
January 25th 1997 (after 84 releases) as "Gnus 5.4" (67 releases).

On September 13th 1997, Quassia Gnus was started and lasted 37
releases.  It was released as "Gnus 5.6" on March 8th 1998 (46
releases).

Gnus 5.6 begat Pterodactyl Gnus on August 29th 1998 and was released
as "Gnus 5.8" (after 99 releases and a CVS repository) on December 3rd
1999.

On the 26th of October 2000, Oort Gnus was begun and was released as
Gnus 5.10 on May 1st 2003 (24 releases).

On the January 4th 2004, No Gnus was begun.

If you happen upon a version of Gnus that has a prefixed name --
(ding) Gnus", "September Gnus", "Red Gnus", "Quassia Gnus",
Pterodactyl Gnus", "Oort Gnus", "No Gnus" -- don't panic.  Don't let
it know that you're frightened.  Back away.  Slowly.  Whatever you do,
don't run.  Walk away, calmly, until you're out of its reach.  Find a
proper released version of Gnus and snuggle up to that instead.




File: gnus, Node: Other Gnus Versions, Next: Why?, Prev: Gnus Versions, Up: History

Other Gnus Versions
-------------------

In addition to the versions of Gnus which have had their releases
coordinated by Lars, one major development has been Semi-gnus from
Japan.  It's based on a library called SEMI, which provides
MIME capabilities.

These Gnusae are based mainly on Gnus 5.6 and Pterodactyl Gnus.
Collectively, they are called "Semi-gnus", and different strains are
called T-gnus, ET-gnus, Nana-gnus and Chaos.  These provide powerful
MIME and multilingualization things, especially important for Japanese
users.




File: gnus, Node: Why?, Next: Compatibility, Prev: Other Gnus Versions, Up: History

Why?
----

What's the point of Gnus?

I want to provide a "rad", "happening", "way cool" and "hep"
newsreader, that lets you do anything you can think of.  That was my
original motivation, but while working on Gnus, it has become clear to
me that this generation of newsreaders really belong in the stone age.
Newsreaders haven't developed much since the infancy of the net.  If
the volume continues to rise with the current rate of increase, all
current newsreaders will be pretty much useless.  How do you deal with
newsgroups that have thousands of new articles each day?  How do you
keep track of millions of people who post?

Gnus offers no real solutions to these questions, but I would very
much like to see Gnus being used as a testing ground for new methods
of reading and fetching news.  Expanding on UMEDA-san's wise decision
to separate the newsreader from the back ends, Gnus now offers a
simple interface for anybody who wants to write new back ends for
fetching mail and news from different sources.  I have added hooks for
customizations everywhere I could imagine it being useful.  By doing
so, I'm inviting every one of you to explore and invent.

May Gnus never be complete.  `C-u 100 M-x all-hail-emacs' and
`C-u 100 M-x all-hail-xemacs'.




File: gnus, Node: Compatibility, Next: Conformity, Prev: Why?, Up: History

Compatibility
-------------

Gnus was designed to be fully compatible with GNUS.  Almost all key
bindings have been kept.  More key bindings have been added, of
course, but only in one or two obscure cases have old bindings been
changed.

Our motto is:
                        In a cloud bones of steel.

All commands have kept their names.  Some internal functions have
changed their names.

The `gnus-uu' package has changed drastically.  *Note Decoding
Articles::.

One major compatibility question is the presence of several summary
buffers.  All variables relevant while reading a group are
buffer-local to the summary buffer they belong in.  Although many
important variables have their values copied into their global
counterparts whenever a command is executed in the summary buffer,
this change might lead to incorrect values being used unless you are
careful.

All code that relies on knowledge of GNUS internals will probably
fail.  To take two examples: Sorting `gnus-newsrc-alist' (or changing
it in any way, as a matter of fact) is strictly verboten.  Gnus
maintains a hash table that points to the entries in this alist (which
speeds up many functions), and changing the alist directly will lead
to peculiar results.

Old hilit19 code does not work at all.  In fact, you should probably
remove all hilit code from all Gnus hooks (`gnus-group-prepare-hook'
and `gnus-summary-prepare-hook').  Gnus provides various integrated
functions for highlighting.  These are faster and more accurate.  To
make life easier for everybody, Gnus will by default remove all hilit
calls from all hilit hooks.  Uncleanliness!  Away!

Packages like `expire-kill' will no longer work.  As a matter of fact,
you should probably remove all old GNUS packages (and other code) when
you start using Gnus.  More likely than not, Gnus already does what
you have written code to make GNUS do.  (Snicker.)

Even though old methods of doing things are still supported, only the
new methods are documented in this manual.  If you detect a new method
of doing something while reading this manual, that does not mean you
have to stop doing it the old way.

Gnus understands all GNUS startup files.

Overall, a casual user who hasn't written much code that depends on
GNUS internals should suffer no problems.  If problems occur, please
let me know by issuing that magic command `M-x gnus-bug'.

If you are in the habit of sending bug reports *very* often, you may
find the helpful help buffer annoying after a while.  If so, set
`gnus-bug-create-help-buffer' to `nil' to avoid having it pop up at
you.




File: gnus, Node: Conformity, Next: Emacsen, Prev: Compatibility, Up: History

Conformity
----------

No rebels without a clue here, ma'am.  We conform to all standards
known to (wo)man.  Except for those standards and/or conventions we
disagree with, of course.


*RFC (2)822*
     There are no known breaches of this standard.

*RFC 1036*
     There are no known breaches of this standard, either.

*Son-of-RFC 1036*
     We do have some breaches to this one.


     *X-Newsreader*
     *User-Agent*
          These are considered to be "vanity headers", while I
          consider them to be consumer information.  After seeing so
          many badly formatted articles coming from `tin' and
          `Netscape' I know not to use either of those for posting
          articles.  I would not have known that if it wasn't for the
          `X-Newsreader' header.

*USEFOR*
     USEFOR is an IETF working group writing a successor to RFC 1036,
     based on Son-of-RFC 1036.  They have produced a number of drafts
     proposing various changes to the format of news articles.  The
     Gnus towers will look into implementing the changes when the
     draft is accepted as an RFC.

*MIME - RFC 2045-2049 etc*
     All the various MIME RFCs are supported.

*Disposition Notifications - RFC 2298*
     Message Mode is able to request notifications from the receiver.

*PGP - RFC 1991 and RFC 2440*
     RFC 1991 is the original PGP message specification, published as
     an informational RFC.  RFC 2440 was the follow-up, now called
     Open PGP, and put on the Standards Track.  Both document a
     non-MIME aware PGP format.  Gnus supports both encoding (signing
     and encryption) and decoding (verification and decryption).

*PGP/MIME - RFC 2015/3156*
     RFC 2015 (superseded by 3156 which references RFC 2440 instead of
     RFC 1991) describes the MIME-wrapping around the RFC 1991/2440
     format.  Gnus supports both encoding and decoding.

*S/MIME - RFC 2633*
     RFC 2633 describes the S/MIME format.

*IMAP - RFC 1730/2060, RFC 2195, RFC 2086, RFC 2359, RFC 2595, RFC 1731*
     RFC 1730 is IMAP version 4, updated somewhat by RFC 2060 (IMAP 4
     revision 1).  RFC 2195 describes CRAM-MD5 authentication for
     IMAP.  RFC 2086 describes access control lists (ACLs) for IMAP.
     RFC 2359 describes a IMAP protocol enhancement.  RFC 2595
     describes the proper TLS integration (STARTTLS) with IMAP.  RFC
     1731 describes the GSSAPI/Kerberos4 mechanisms for IMAP.


If you ever notice Gnus acting non-compliant with regards to the texts
mentioned above, don't hesitate to drop a note to Gnus Towers and let
us know.




File: gnus, Node: Emacsen, Next: Gnus Development, Prev: Conformity, Up: History

Emacsen
-------

This version of Gnus should work on:


   * Emacs 21.1 and up.

   * XEmacs 21.4 and up.


This Gnus version will absolutely not work on any Emacsen older than
that.  Not reliably, at least.  Older versions of Gnus may work on
older Emacs versions.  Particularly, Gnus 5.10.8 should also work on
Emacs 20.7 and XEmacs 21.1.




File: gnus, Node: Gnus Development, Next: Contributors, Prev: Emacsen, Up: History

Gnus Development
----------------

Gnus is developed in a two-phased cycle.  The first phase involves
much discussion on the development mailing list `ding@gnus.org', where
people propose changes and new features, post patches and new back
ends.  This phase is called the "alpha" phase, since the Gnusae
released in this phase are "alpha releases", or (perhaps more commonly
in other circles) "snapshots".  During this phase, Gnus is assumed to
be unstable and should not be used by casual users.  Gnus alpha
releases have names like "Oort Gnus" and "No Gnus".  *Note Gnus
Versions::.

After futzing around for 10-100 alpha releases, Gnus is declared
frozen", and only bug fixes are applied.  Gnus loses the prefix, and
is called things like "Gnus 5.10.1" instead.  Normal people are
supposed to be able to use these, and these are mostly discussed on
the `gnu.emacs.gnus' newsgroup.  This newgroup is mirrored to the
mailing list `info-gnus-english@gnu.org' which is carried on Gmane as
`gmane.emacs.gnus.user'.  These releases are finally integrated in
Emacs.

Some variable defaults differ between alpha Gnusae and released Gnusae,
in particular, `mail-source-delete-incoming'.  This is to prevent
lossage of mail if an alpha release hiccups while handling the mail.
*Note Mail Source Customization::.

The division of discussion between the ding mailing list and the Gnus
newsgroup is not purely based on publicity concerns.  It's true that
having people write about the horrible things that an alpha Gnus
release can do (sometimes) in a public forum may scare people off, but
more importantly, talking about new experimental features that have
been introduced may confuse casual users.  New features are frequently
introduced, fiddled with, and judged to be found wanting, and then
either discarded or totally rewritten.  People reading the mailing
list usually keep up with these rapid changes, while people on the
newsgroup can't be assumed to do so.

So if you have problems with or questions about the alpha versions,
direct those to the ding mailing list `ding@gnus.org'.  This list is
also available on Gmane as `gmane.emacs.gnus.general'.

Some variable defaults differ between alpha Gnusae and released Gnusae,
in particular, `mail-source-delete-incoming'.  This is to prevent
lossage of mail if an alpha release hiccups while handling the mail.
*Note Mail Source Customization::.



File: gnus, Node: Contributors, Next: New Features, Prev: Gnus Development, Up: History

Contributors
------------

The new Gnus version couldn't have been done without the help of all
the people on the (ding) mailing list.  Every day for over a year I
have gotten billions of nice bug reports from them, filling me with
joy, every single one of them.  Smooches.  The people on the list have
been tried beyond endurance, what with my "oh, that's a neat idea
<type type>, yup, I'll release it right away <ship off> no wait, that
doesn't work at all <type type>, yup, I'll ship that one off right
away <ship off> no, wait, that absolutely does not work" policy for
releases.  Micro$oft--bah.  Amateurs.  I'm *much* worse.  (Or is that
worser"? "much worser"?  "worsest"?)

I would like to take this opportunity to thank the Academy for...
oops, wrong show.


   * Masanobu UMEDA---the writer of the original GNUS.

   * Shenghuo Zhu--uudecode.el, mm-uu.el, rfc1843.el, webmail.el,
     nnwarchive and many, many other things connected with MIME and
     other types of en/decoding, as well as general bug fixing, new
     functionality and stuff.

   * Per Abrahamsen--custom, scoring, highlighting and SOUP code (as
     well as numerous other things).

   * Luis Fernandes--design and graphics.

   * Joe Reiss--creator of the smiley faces.

   * Justin Sheehy--the FAQ maintainer.

   * Erik Naggum--help, ideas, support, code and stuff.

   * Wes Hardaker---`gnus-picon.el' and the manual section on
     "picons" (*Note Picons::).

   * Kim-Minh Kaplan--further work on the picon code.

   * Brad Miller---`gnus-gl.el' and the GroupLens manual section.

   * Sudish Joseph--innumerable bug fixes.

   * Ilja Weis---`gnus-topic.el'.

   * Steven L. Baur--lots and lots and lots of bugs detections and
     fixes.

   * Vladimir Alexiev--the refcard and reference booklets.

   * Felix Lee & Jamie Zawinski--I stole some pieces from the XGnus
     distribution by Felix Lee and JWZ.

   * Scott Byer---`nnfolder.el' enhancements & rewrite.

   * Peter Mutsaers--orphan article scoring code.

   * Ken Raeburn--POP mail support.

   * Hallvard B Furuseth--various bits and pieces, especially dealing with
     .newsrc files.

   * Brian Edmonds---`gnus-bbdb.el'.

   * David Moore--rewrite of `nnvirtual.el' and many other things.

   * Kevin Davidson--came up with the name "ding", so blame him.

   * Franc,ois Pinard--many, many interesting and thorough bug
     reports, as well as autoconf support.


This manual was proof-read by Adrian Aichner, with Ricardo Nassif,
Mark Borges, and Jost Krieger proof-reading parts of the manual.

The following people have contributed many patches and suggestions:

Christopher Davis, Andrew Eskilsson, Kai Grossjohann, Kevin Greiner,
Jesper Harder, Paul Jarc, Simon Josefsson, David Kaagedal, Richard
Pieri, Fabrice Popineau, Daniel Quinlan, Michael Shields, Reiner
Steib, Jason L. Tibbitts, III, Jack Vinson, Katsumi Yamaoka, and
Teodor Zlatanov.

Also thanks to the following for patches and stuff:

Jari Aalto, Adrian Aichner, Vladimir Alexiev, Russ Allbery, Peter
Arius, Matt Armstrong, Marc Auslander, Miles Bader, Alexei
V. Barantsev, Frank Bennett, Robert Bihlmeyer, Chris Bone, Mark
Borges, Mark Boyns, Lance A. Brown, Rob Browning, Kees de Bruin,
Martin Buchholz, Joe Buehler, Kevin Buhr, Alastair Burt, Joao Cachopo,
Zlatko Calusic, Massimo Campostrini, Castor, David Charlap, Dan
Christensen, Kevin Christian, Jae-you Chung, James H. Cloos, Jr.,
Laura Conrad, Michael R. Cook, Glenn Coombs, Andrew J. Cosgriff, Neil
Crellin, Frank D. Cringle, Geoffrey T. Dairiki, Andre Deparade, Ulrik
Dickow, Dave Disser, Rui-Tao Dong, Joev Dubach, Michael Welsh Duggan,
Dave Edmondson, Paul Eggert, Mark W. Eichin, Karl Eichwalder, Enami
Tsugutomo, Michael Ernst, Luc Van Eycken, Sam Falkner, Nelson Jose dos
Santos Ferreira, Sigbjorn Finne, Sven Fischer, Paul Fisher, Decklin
Foster, Gary D. Foster, Paul Franklin, Guy Geens, Arne Georg
Gleditsch, David S. Goldberg, Michelangelo Grigni, Dale Hagglund,
D. Hall, Magnus Hammerin, Kenichi Handa, Raja R. Harinath, Yoshiki
Hayashi, P. E. Jareth Hein, Hisashige Kenji, Scott Hofmann, Tassilo
Horn, Marc Horowitz, Gunnar Horrigmo, Richard Hoskins, Brad Howes,
Miguel de Icaza, Franc,ois Felix Ingrand, Tatsuya Ichikawa, Ishikawa
Ichiro, Lee Iverson, Iwamuro Motonori, Rajappa Iyer, Andreas Jaeger,
Adam P. Jenkins, Randell Jesup, Fred Johansen, Gareth Jones, Greg
Klanderman, Karl Kleinpaste, Michael Klingbeil, Peter Skov Knudsen,
Shuhei Kobayashi, Petr Konecny, Koseki Yoshinori, Thor Kristoffersen,
Jens Lautenbacher, Martin Larose, Seokchan Lee, Joerg Lenneis, Carsten
Leonhardt, James LewisMoss, Christian Limpach, Markus Linnala, Dave
Love, Mike McEwan, Tonny Madsen, Shlomo Mahlab, Nat Makarevitch,
Istvan Marko, David Martin, Jason R. Mastaler, Gordon Matzigkeit, Timo
Metzemakers, Richard Mlynarik, Lantz Moore, Morioka Tomohiko, Erik
Toubro Nielsen, Hrvoje Niksic, Andy Norman, Fred Oberhauser,
C. R. Oldham, Alexandre Oliva, Ken Olstad, Masaharu Onishi, Hideki
Ono, Ettore Perazzoli, William Perry, Stephen Peters, Jens-Ulrik
Holger Petersen, Ulrich Pfeifer, Matt Pharr, Andy Piper, John McClary
Prevost, Bill Pringlemeir, Mike Pullen, Jim Radford, Colin Rafferty,
Lasse Rasinen, Lars Balker Rasmussen, Joe Reiss, Renaud Rioboo, Roland
B. Roberts, Bart Robinson, Christian von Roques, Markus Rost, Jason
Rumney, Wolfgang Rupprecht, Jay Sachs, Dewey M. Sasser, Conrad
Sauerwald, Loren Schall, Dan Schmidt, Ralph Schleicher, Philippe
Schnoebelen, Andreas Schwab, Randal L. Schwartz, Danny Siu, Matt
Simmons, Paul D. Smith, Jeff Sparkes, Toby Speight, Michael Sperber,
Darren Stalder, Richard Stallman, Greg Stark, Sam Steingold, Paul
Stevenson, Jonas Steverud, Paul Stodghill, Kiyokazu Suto, Kurt
Swanson, Samuel Tardieu, Teddy, Chuck Thompson, Tozawa Akihiko,
Philippe Troin, James Troup, Trung Tran-Duc, Jack Twilley, Aaron
M. Ucko, Aki Vehtari, Didier Verna, Vladimir Volovich, Jan Vroonhof,
Stefan Waldherr, Pete Ware, Barry A. Warsaw, Christoph Wedler, Joe
Wells, Lee Willis, and Lloyd Zusman.


For a full overview of what each person has done, the ChangeLogs
included in the Gnus alpha distributions should give ample reading
(550kB and counting).

Apologies to everybody that I've forgotten, of which there are many,
I'm sure.

Gee, that's quite a list of people.  I guess that must mean that there
actually are people who are using Gnus.  Who'd'a thunk it!




File: gnus, Node: New Features, Prev: Contributors, Up: History

New Features
------------

* Menu:

* ding Gnus::                   New things in Gnus 5.0/5.1, the first new Gnus.
* September Gnus::              The Thing Formally Known As Gnus 5.2/5.3.
* Red Gnus::                    Third time best--Gnus 5.4/5.5.
* Quassia Gnus::                Two times two is four, or Gnus 5.6/5.7.
* Pterodactyl Gnus::            Pentad also starts with P, AKA Gnus 5.8/5.9.
* Oort Gnus::                   It's big.  It's far out.  Gnus 5.10/5.11.
* No Gnus::                     Very punny.

These lists are, of course, just *short* overviews of the *most*
important new features.  No, really.  There are tons more.  Yes, we
have feeping creaturism in full effect.



File: gnus, Node: ding Gnus, Next: September Gnus, Prev: New Features, Up: New Features

(ding) Gnus
...........

New features in Gnus 5.0/5.1:


   * The look of all buffers can be changed by setting format-like
     variables (*Note Group Buffer Format:: and *Note Summary Buffer
     Format::).

   * Local spool and several NNTP servers can be used at once (*Note
     Select Methods::).

   * You can combine groups into virtual groups (*Note Virtual
     Groups::).

   * You can read a number of different mail formats (*Note Getting
     Mail::).  All the mail back ends implement a convenient mail
     expiry scheme (*Note Expiring Mail::).

   * Gnus can use various strategies for gathering threads that have
     lost their roots (thereby gathering loose sub-threads into one
     thread) or it can go back and retrieve enough headers to build a
     complete thread (*Note Customizing Threading::).

   * Killed groups can be displayed in the group buffer, and you can
     read them as well (*Note Listing Groups::).

   * Gnus can do partial group updates--you do not have to retrieve
     the entire active file just to check for new articles in a few
     groups (*Note The Active File::).

   * Gnus implements a sliding scale of subscribedness to groups
     (*Note Group Levels::).

   * You can score articles according to any number of criteria (*Note
     Scoring::).  You can even get Gnus to find out how to score
     articles for you (*Note Adaptive Scoring::).

   * Gnus maintains a dribble buffer that is auto-saved the normal
     Emacs manner, so it should be difficult to lose much data on what
     you have read if your machine should go down (*Note Auto Save::).

   * Gnus now has its own startup file (`~/.gnus.el') to avoid
     cluttering up the `.emacs' file.

   * You can set the process mark on both groups and articles and
     perform operations on all the marked items (*Note
     Process/Prefix::).

   * You can grep through a subset of groups and create a group from
     the results (*Note Kibozed Groups::).

   * You can list subsets of groups according to, well, anything
     (*Note Listing Groups::).

   * You can browse foreign servers and subscribe to groups from those
     servers (*Note Browse Foreign Server::).

   * Gnus can fetch articles, asynchronously, on a second connection
     to the server (*Note Asynchronous Fetching::).

   * You can cache articles locally (*Note Article Caching::).

   * The uudecode functions have been expanded and generalized (*Note
     Decoding Articles::).

   * You can still post uuencoded articles, which was a little-known
     feature of GNUS' past (*Note Uuencoding and Posting::).

   * Fetching parents (and other articles) now actually works without
     glitches (*Note Finding the Parent::).

   * Gnus can fetch FAQs and group descriptions (*Note Group
     Information::).

   * Digests (and other files) can be used as the basis for groups
     (*Note Document Groups::).

   * Articles can be highlighted and customized (*Note Customizing
     Articles::).

   * URLs and other external references can be buttonized (*Note
     Article Buttons::).

   * You can do lots of strange stuff with the Gnus window & frame
     configuration (*Note Window Layout::).

   * You can click on buttons instead of using the keyboard (*Note
     Buttons::).





File: gnus, Node: September Gnus, Next: Red Gnus, Prev: ding Gnus, Up: New Features

September Gnus
..............


New features in Gnus 5.2/5.3:


   * A new message composition mode is used.  All old customization
     variables for `mail-mode', `rnews-reply-mode' and `gnus-msg' are
     now obsolete.

   * Gnus is now able to generate "sparse" threads--threads where
     missing articles are represented by empty nodes (*Note
     Customizing Threading::).

          (setq gnus-build-sparse-threads 'some)

   * Outgoing articles are stored on a special archive server (*Note
     Archived Messages::).

   * Partial thread regeneration now happens when articles are
     referred.

   * Gnus can make use of GroupLens predictions.

   * Picons (personal icons) can be displayed under XEmacs (*Note
     Picons::).

   * A `trn'-like tree buffer can be displayed (*Note Tree Display::).

          (setq gnus-use-trees t)

   * An `nn'-like pick-and-read minor mode is available for the
     summary buffers (*Note Pick and Read::).

          (add-hook 'gnus-summary-mode-hook 'gnus-pick-mode)

   * In binary groups you can use a special binary minor mode (*Note
     Binary Groups::).

   * Groups can be grouped in a folding topic hierarchy (*Note Group
     Topics::).

          (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

   * Gnus can re-send and bounce mail (*Note Summary Mail Commands::).

   * Groups can now have a score, and bubbling based on entry
     frequency is possible (*Note Group Score::).

          (add-hook 'gnus-summary-exit-hook 'gnus-summary-bubble-group)

   * Groups can be process-marked, and commands can be performed on
     groups of groups (*Note Marking Groups::).

   * Caching is possible in virtual groups.

   * `nndoc' now understands all kinds of digests, mail boxes, rnews
     news batches, ClariNet briefs collections, and just about
     everything else (*Note Document Groups::).

   * Gnus has a new back end (`nnsoup') to create/read SOUP packets
     (*Note SOUP::).

   * The Gnus cache is much faster.

   * Groups can be sorted according to many criteria (*Note Sorting
     Groups::).

   * New group parameters have been introduced to set list-addresses
     and expiry times (*Note Group Parameters::).

   * All formatting specs allow specifying faces to be used (*Note
     Formatting Fonts::).

   * There are several more commands for setting/removing/acting on
     process marked articles on the `M P' submap (*Note Setting
     Process Marks::).

   * The summary buffer can be limited to show parts of the available
     articles based on a wide range of criteria.  These commands have
     been bound to keys on the `/' submap (*Note Limiting::).

   * Articles can be made persistent with the `*' command (*Note
     Persistent Articles::).

   * All functions for hiding article elements are now toggles.

   * Article headers can be buttonized (*Note Article Washing::).

   * All mail back ends support fetching articles by `Message-ID'.

   * Duplicate mail can now be treated properly (*Note Duplicates::).

   * All summary mode commands are available directly from the article
     buffer (*Note Article Keymap::).

   * Frames can be part of `gnus-buffer-configuration' (*Note Window
     Layout::).

   * Mail can be re-scanned by a daemonic process (*Note Daemons::).

   * Gnus can make use of NoCeM files to weed out spam (*Note
     NoCeM::).

          (setq gnus-use-nocem t)

   * Groups can be made permanently visible (*Note Listing Groups::).

          (setq gnus-permanently-visible-groups "^nnml:")

   * Many new hooks have been introduced to make customizing easier.

   * Gnus respects the `Mail-Copies-To' header.

   * Threads can be gathered by looking at the `References' header
     (*Note Customizing Threading::).

          (setq gnus-summary-thread-gathering-function
                'gnus-gather-threads-by-references)

   * Read articles can be stored in a special backlog buffer to avoid
     refetching (*Note Article Backlog::).

          (setq gnus-keep-backlog 50)

   * A clean copy of the current article is always stored in a
     separate buffer to allow easier treatment.

   * Gnus can suggest where to save articles (*Note Saving
     Articles::).

   * Gnus doesn't have to do as much prompting when saving (*Note
     Saving Articles::).

          (setq gnus-prompt-before-saving t)

   * `gnus-uu' can view decoded files asynchronously while fetching
     articles (*Note Other Decode Variables::).

          (setq gnus-uu-grabbed-file-functions 'gnus-uu-grab-view)

   * Filling in the article buffer now works properly on cited text
     (*Note Article Washing::).

   * Hiding cited text adds buttons to toggle hiding, and how much
     cited text to hide is now customizable (*Note Article Hiding::).

          (setq gnus-cited-lines-visible 2)

   * Boring headers can be hidden (*Note Article Hiding::).

   * Default scoring values can now be set from the menu bar.

   * Further syntax checking of outgoing articles have been added.





File: gnus, Node: Red Gnus, Next: Quassia Gnus, Prev: September Gnus, Up: New Features

Red Gnus
........

New features in Gnus 5.4/5.5:



   * `nntp.el' has been totally rewritten in an asynchronous fashion.

   * Article prefetching functionality has been moved up into Gnus
     (*Note Asynchronous Fetching::).

   * Scoring can now be performed with logical operators like `and',
     `or', `not', and parent redirection (*Note Advanced Scoring::).

   * Article washing status can be displayed in the article mode line
     (*Note Misc Article::).

   * `gnus.el' has been split into many smaller files.

   * Suppression of duplicate articles based on Message-ID can be done
     (*Note Duplicate Suppression::).

          (setq gnus-suppress-duplicates t)

   * New variables for specifying what score and adapt files are to be
     considered home score and adapt files (*Note Home Score File::)
     have been added.

   * `nndoc' was rewritten to be easily extendable (*Note Document
     Server Internals::).

   * Groups can inherit group parameters from parent topics (*Note
     Topic Parameters::).

   * Article editing has been revamped and is now actually usable.

   * Signatures can be recognized in more intelligent fashions (*Note
     Article Signature::).

   * Summary pick mode has been made to look more `nn'-like.  Line
     numbers are displayed and the `.' command can be used to pick
     articles (`Pick and Read').

   * Commands for moving the `.newsrc.eld' from one server to another
     have been added (*Note Changing Servers::).

   * There's a way now to specify that "uninteresting" fields be
     suppressed when generating lines in buffers (*Note Advanced
     Formatting::).

   * Several commands in the group buffer can be undone with `C-M-_'
     (*Note Undo::).

   * Scoring can be done on words using the new score type `w' (*Note
     Score File Format::).

   * Adaptive scoring can be done on a Subject word-by-word basis
     (*Note Adaptive Scoring::).

          (setq gnus-use-adaptive-scoring '(word))

   * Scores can be decayed (*Note Score Decays::).

          (setq gnus-decay-scores t)

   * Scoring can be performed using a regexp on the Date header.  The
     Date is normalized to compact ISO 8601 format first (*Note Score
     File Format::).

   * A new command has been added to remove all data on articles from
     the native server (*Note Changing Servers::).

   * A new command for reading collections of documents (`nndoc' with
     `nnvirtual' on top) has been added---`C-M-d' (*Note Really
     Various Summary Commands::).

   * Process mark sets can be pushed and popped (*Note Setting Process
     Marks::).

   * A new mail-to-news back end makes it possible to post even when
     the NNTP server doesn't allow posting (*Note Mail-To-News
     Gateways::).

   * A new back end for reading searches from Web search engines
     ("DejaNews", "Alta Vista", "InReference") has been added (*Note
     Web Searches::).

   * Groups inside topics can now be sorted using the standard sorting
     functions, and each topic can be sorted independently (*Note
     Topic Sorting::).

   * Subsets of the groups can be sorted independently (`Sorting
     Groups').

   * Cached articles can be pulled into the groups (*Note Summary
     Generation Commands::).

   * Score files are now applied in a more reliable order (*Note Score
     Variables::).

   * Reports on where mail messages end up can be generated (*Note
     Splitting Mail::).

   * More hooks and functions have been added to remove junk from
     incoming mail before saving the mail (*Note Washing Mail::).

   * Emphasized text can be properly fontisized:





File: gnus, Node: Quassia Gnus, Next: Pterodactyl Gnus, Prev: Red Gnus, Up: New Features

Quassia Gnus
............

New features in Gnus 5.6:


   * New functionality for using Gnus as an offline newsreader has been
     added.  A plethora of new commands and modes have been added.
     *Note Gnus Unplugged::, for the full story.

   * The `nndraft' back end has returned, but works differently than
     before.  All Message buffers are now also articles in the
     `nndraft' group, which is created automatically.

   * `gnus-alter-header-function' can now be used to alter header
     values.

   * `gnus-summary-goto-article' now accept Message-ID's.

   * A new Message command for deleting text in the body of a message
     outside the region: `C-c C-v'.

   * You can now post to component group in `nnvirtual' groups with
     `C-u C-c C-c'.

   *  `nntp-rlogin-program'---new variable to ease customization.

   * `C-u C-c C-c' in `gnus-article-edit-mode' will now inhibit
     re-highlighting of the article buffer.

   * New element in `gnus-boring-article-headers'---`long-to'.

   * `M-i' symbolic prefix command.  *Note Symbolic Prefixes::, for
     details.

   * `L' and `I' in the summary buffer now take the symbolic prefix
     `a' to add the score rule to the `all.SCORE' file.

   * `gnus-simplify-subject-functions' variable to allow greater
     control over simplification.

   * `A T'---new command for fetching the current thread.

   * `/ T'---new command for including the current thread in the
     limit.

   * `M-RET' is a new Message command for breaking cited text.

   * `\\1'-expressions are now valid in `nnmail-split-methods'.

   * The `custom-face-lookup' function has been removed.  If you used
     this function in your initialization files, you must rewrite them
     to use `face-spec-set' instead.

   * Canceling now uses the current select method.  Symbolic prefix
     `a' forces normal posting method.

   * New command to translate M******** sm*rtq**t*s into proper
     text---`W d'.

   * For easier debugging of `nntp', you can set
     `nntp-record-commands' to a non-`nil' value.

   * `nntp' now uses `~/.authinfo', a `.netrc'-like file, for
     controlling where and how to send AUTHINFO to NNTP servers.

   * A command for editing group parameters from the summary buffer
     has been added.

   * A history of where mails have been split is available.

   * A new article date command has been
     added---`article-date-iso8601'.

   * Subjects can be simplified when threading by setting
     `gnus-score-thread-simplify'.

   * A new function for citing in Message has been
     added---`message-cite-original-without-signature'.

   * `article-strip-all-blank-lines'---new article command.

   * A new Message command to kill to the end of the article has been
     added.

   * A minimum adaptive score can be specified by using the
     `gnus-adaptive-word-minimum' variable.

   * The "lapsed date" article header can be kept continually updated
     by the `gnus-start-date-timer' command.

   * Web listserv archives can be read with the `nnlistserv' back end.

   * Old dejanews archives can now be read by `nnweb'.




File: gnus, Node: Pterodactyl Gnus, Next: Oort Gnus, Prev: Quassia Gnus, Up: New Features

Pterodactyl Gnus
................

New features in Gnus 5.8:


   * The mail-fetching functions have changed.  See the manual for the
     many details.  In particular, all procmail fetching variables are
     gone.

     If you used procmail like in

          (setq nnmail-use-procmail t)
          (setq nnmail-spool-file 'procmail)
          (setq nnmail-procmail-directory "~/mail/incoming/")
          (setq nnmail-procmail-suffix "\\.in")

     this now has changed to

          (setq mail-sources
                '((directory :path "~/mail/incoming/"
                             :suffix ".in")))

     *Note Mail Source Specifiers::.

   * Gnus is now a MIME-capable reader.  This affects many parts of
     Gnus, and adds a slew of new commands.  See the manual for
     details.

   * Gnus has also been multilingualized.  This also affects too many
     parts of Gnus to summarize here, and adds many new variables.

   * `gnus-auto-select-first' can now be a function to be called to
     position point.

   * The user can now decide which extra headers should be included in
     summary buffers and NOV files.

   * `gnus-article-display-hook' has been removed.  Instead, a number
     of variables starting with `gnus-treat-' have been added.

   * The Gnus posting styles have been redone again and now works in a
     subtly different manner.

   * New web-based back ends have been added: `nnslashdot',
     `nnwarchive' and `nnultimate'.  nnweb has been revamped, again,
     to keep up with ever-changing layouts.

   * Gnus can now read IMAP mail via `nnimap'.




