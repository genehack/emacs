Info file: message,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `message.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Message: (message).   Mail and news composition mode that goes with Gnus.
END-INFO-DIR-ENTRY





File: message, Node: Top, Next: Interface, Prev: (dir), Up: (dir)

Message
*******

All message composition from Gnus (both mail and news) takes place in
Message mode buffers.

* Menu:

* Interface::         Setting up message buffers.
* Commands::          Commands you can execute in message mode buffers.
* Variables::         Customizing the message buffers.
* Compatibility::     Making Message backwards compatible.
* Appendices::        More technical things.
* GNU Free Documentation License:: The license for this documentation.
* Index::             Variable, function and concept index.
* Key Index::         List of Message mode keys.

Message is distributed with Gnus.  The Gnus distribution corresponding
to this manual is No Gnus v0.9.




File: message, Node: Interface, Next: Commands, Prev: Top, Up: Top

Interface
*********

When a program (or a person) wants to respond to a message--reply,
follow up, forward, cancel--the program (or person) should just put
point in the buffer where the message is and call the required
command.  `Message' will then pop up a new `message' mode buffer with
appropriate headers filled out, and the user can edit the message
before sending it.

* Menu:

* New Mail Message::     Editing a brand new mail message.
* New News Message::     Editing a brand new news message.
* Reply::                Replying via mail.
* Wide Reply::           Responding to all people via mail.
* Followup::             Following up via news.
* Canceling News::       Canceling a news article.
* Superseding::          Superseding a message.
* Forwarding::           Forwarding a message via news or mail.
* Resending::            Resending a mail message.
* Bouncing::             Bouncing a mail message.
* Mailing Lists::        Send mail to mailing lists.

You can customize the Message Mode tool bar, see `M-x
customize-apropos RET message-tool-bar'.  This feature is only
available in Emacs.



File: message, Node: New Mail Message, Next: New News Message, Prev: Interface, Up: Interface

New Mail Message
================

The `message-mail' command pops up a new message buffer.

Two optional parameters are accepted: The first will be used as the
`To' header and the second as the `Subject' header.  If these are
`nil', those two headers will be empty.




File: message, Node: New News Message, Next: Reply, Prev: New Mail Message, Up: Interface

New News Message
================

The `message-news' command pops up a new message buffer.

This function accepts two optional parameters.  The first will be used
as the `Newsgroups' header and the second as the `Subject' header.  If
these are `nil', those two headers will be empty.




File: message, Node: Reply, Next: Wide Reply, Prev: New News Message, Up: Interface

Reply
=====

The `message-reply' function pops up a message buffer that's a reply
to the message in the current buffer.

Message uses the normal methods to determine where replies are to go
(*Note Responses::), but you can change the behavior to suit your
needs by fiddling with the `message-reply-to-function' variable.

If you want the replies to go to the `Sender' instead of the
`From', you could do something like this:

     (setq message-reply-to-function
           (lambda ()
            (cond ((equal (mail-fetch-field "from") "somebody")
                    (list (cons 'To (mail-fetch-field "sender"))))
                  (t
                   nil))))

This function will be called narrowed to the head of the article that
is being replied to.

As you can see, this function should return a list.  In this case, it
returns `((To . "Whom"))' if it has an opinion as to what the To
header should be.  If it does not, it should just return `nil', and
the normal methods for determining the To header will be used.

Each list element should be a cons, where the CAR should be the name
of a header (e.g. `Cc') and the CDR should be the header value
(e.g. `larsi@ifi.uio.no').  All these headers will be inserted into
the head of the outgoing mail.




File: message, Node: Wide Reply, Next: Followup, Prev: Reply, Up: Interface

Wide Reply
==========

The `message-wide-reply' pops up a message buffer that's a wide reply
to the message in the current buffer.  A "wide reply" is a reply that
goes out to all people listed in the `To', `From' (or `Reply-to') and
`Cc' headers.

Message uses the normal methods to determine where wide replies are to go,
but you can change the behavior to suit your needs by fiddling with the
`message-wide-reply-to-function'.  It is used in the same way as
`message-reply-to-function' (*Note Reply::).

Addresses that match the `message-dont-reply-to-names' regular
expression (or list of regular expressions) will be removed from the
`Cc' header. A value of `nil' means exclude your name only.

If `message-wide-reply-confirm-recipients' is non-`nil' you will be
asked to confirm that you want to reply to multiple recipients.  The
default is `nil'.



File: message, Node: Followup, Next: Canceling News, Prev: Wide Reply, Up: Interface

Followup
========

The `message-followup' command pops up a message buffer that's a
followup to the message in the current buffer.

Message uses the normal methods to determine where followups are to go,
but you can change the behavior to suit your needs by fiddling with the
`message-followup-to-function'.  It is used in the same way as
`message-reply-to-function' (*Note Reply::).

The `message-use-followup-to' variable says what to do about
`Followup-To' headers.  If it is `use', always use the value.  If it
is `ask' (which is the default), ask whether to use the value.  If it
is `t', use the value unless it is `poster'.  If it is `nil', don't
use the value.




File: message, Node: Canceling News, Next: Superseding, Prev: Followup, Up: Interface

Canceling News
==============

The `message-cancel-news' command cancels the article in the current
buffer.

The value of `message-cancel-message' is inserted in the body of the
cancel message.  The default is `I am canceling my own article.'.

When Message posts news messages, it inserts `Cancel-Lock' headers by
default.  This is a cryptographic header that ensures that only you
can cancel your own messages, which is nice.  The downside is that if
you lose your `.emacs' file (which is where Gnus stores the secret
cancel lock password (which is generated automatically the first time
you use this feature)), you won't be able to cancel your message.  If
you want to manage a password yourself, you can put something like the
following in your `~/.gnus.el' file:

     (setq canlock-password "geheimnis"
           canlock-password-for-verify canlock-password)

Whether to insert the header or not is controlled by the
`message-insert-canlock' variable.

Not many news servers respect the `Cancel-Lock' header yet, but this
is expected to change in the future.




File: message, Node: Superseding, Next: Forwarding, Prev: Canceling News, Up: Interface

Superseding
===========

The `message-supersede' command pops up a message buffer that will
supersede the message in the current buffer.

Headers matching the `message-ignored-supersedes-headers' are
removed before popping up the new message buffer.  The default is
`^Path:\\|^Date\\|^NNTP-Posting-Host:\\|^Xref:\\|^Lines:\\|
^Received:\\|^X-From-Line:\\|^X-Trace:\\|^X-Complaints-To:\\|
Return-Path:\\|^Supersedes:\\|^NNTP-Posting-Date:\\|^X-Trace:\\|
^X-Complaints-To:\\|^Cancel-Lock:\\|^Cancel-Key:\\|^X-Hashcash:\\|
^X-Payment:\\|^Approved:'.





File: message, Node: Forwarding, Next: Resending, Prev: Superseding, Up: Interface

Forwarding
==========

The `message-forward' command pops up a message buffer to forward the
message in the current buffer.  If given a prefix, forward using news.

`message-forward-ignored-headers'
     All headers that match this regexp will be deleted when
     forwarding a message.

`message-make-forward-subject-function'
     A list of functions that are called to generate a subject header
     for forwarded messages.  The subject generated by the previous
     function is passed into each successive function.

     The provided functions are:

     `message-forward-subject-author-subject'
          Source of article (author or newsgroup), in brackets
          followed by the subject.

     `message-forward-subject-fwd'
          Subject of article with `Fwd:' prepended to it.

`message-wash-forwarded-subjects'
     If this variable is `t', the subjects of forwarded messages have
     the evidence of previous forwards (such as `Fwd:', `Re:',
     `(fwd)') removed before the new subject is constructed.  The
     default value is `nil'.

`message-forward-as-mime'
     If this variable is `t' (the default), forwarded messages are
     included as inline MIME RFC822 parts.  If it's `nil', forwarded
     messages will just be copied inline to the new message, like
     previous, non MIME-savvy versions of Gnus would do.

`message-forward-before-signature'
     If non-`nil', put forwarded message before signature, else after.





File: message, Node: Resending, Next: Bouncing, Prev: Forwarding, Up: Interface

Resending
=========

The `message-resend' command will prompt the user for an address and
resend the message in the current buffer to that address.

Headers that match the `message-ignored-resent-headers' regexp will be
removed before sending the message.




File: message, Node: Bouncing, Next: Mailing Lists, Prev: Resending, Up: Interface

Bouncing
========

The `message-bounce' command will, if the current buffer contains a
bounced mail message, pop up a message buffer stripped of the bounce
information.  A "bounced message" is typically a mail you've sent out
that has been returned by some `mailer-daemon' as undeliverable.

Headers that match the `message-ignored-bounced-headers' regexp
will be removed before popping up the buffer.  The default is
`^\\(Received\\|Return-Path\\|Delivered-To\\):'.




File: message, Node: Mailing Lists, Prev: Bouncing, Up: Interface

Mailing Lists
=============

Sometimes while posting to mailing lists, the poster needs to direct
followups to the post to specific places.  The Mail-Followup-To (MFT)
was created to enable just this.  Three example scenarios where this
is useful:

   * A mailing list poster can use MFT to express that responses
     should be sent to just the list, and not the poster as well.
     This will happen if the poster is already subscribed to the list.

   * A mailing list poster can use MFT to express that responses
     should be sent to the list and the poster as well.  This will
     happen if the poster is not subscribed to the list.

   * If a message is posted to several mailing lists, MFT may also be
     used to direct the following discussion to one list only, because
     discussions that are spread over several lists tend to be
     fragmented and very difficult to follow.


Gnus honors the MFT header in other's messages (i.e. while following
up to someone else's post) and also provides support for generating
sensible MFT headers for outgoing messages as well.



Composing a correct MFT header automagically
--------------------------------------------

The first step in getting Gnus to automagically generate a MFT header
in posts you make is to give Gnus a list of the mailing lists
addresses you are subscribed to.  You can do this in more than one
way.  The following variables would come in handy.


`message-subscribed-addresses'
     This should be a list of addresses the user is subscribed to.
     Its default value is `nil'.  Example:
          (setq message-subscribed-addresses
                '("ding@gnus.org" "bing@noose.org"))

`message-subscribed-regexps'
     This should be a list of regexps denoting the addresses of
     mailing lists subscribed to.  Default value is `nil'.  Example:
     If you want to achieve the same result as above:
          (setq message-subscribed-regexps
                '("\\(ding@gnus\\)\\|\\(bing@noose\\)\\.org")

`message-subscribed-address-functions'
     This can be a list of functions to be called (one at a time!!) to
     determine the value of MFT headers.  It is advisable that these
     functions not take any arguments.  Default value is `nil'.

     There is a pre-defined function in Gnus that is a good candidate
     for this variable.  `gnus-find-subscribed-addresses' is a
     function that returns a list of addresses corresponding to the
     groups that have the `subscribed' (*Note Group Parameters:
     (gnus)Group Parameters.) group parameter set to a non-`nil'
     value.  This is how you would do it.

          (setq message-subscribed-address-functions
                '(gnus-find-subscribed-addresses))

`message-subscribed-address-file'
     You might be one organized human freak and have a list of
     addresses of all subscribed mailing lists in a separate file!
     Then you can just set this variable to the name of the file and
     life would be good.


You can use one or more of the above variables.  All their values are
added" in some way that works :-)

Now you are all set.  Just start composing a message as you normally
do.  And just send it; as always.  Just before the message is sent
out, Gnus' MFT generation thingy kicks in and checks if the message
already has a MFT field.  If there is one, it is left alone.  (Except
if it's empty - in that case, the field is removed and is not replaced
with an automatically generated one.  This lets you disable MFT
generation on a per-message basis.)  If there is none, then the list
of recipient addresses (in the To: and Cc: headers) is checked to see
if one of them is a list address you are subscribed to.  If none of
them is a list address, then no MFT is generated; otherwise, a MFT is
added to the other headers and set to the value of all addresses in
To: and Cc:

Hm.  "So", you ask, "what if I send an email to a list I am not
subscribed to?  I want my MFT to say that I want an extra copy."
(This is supposed to be interpreted by others the same way as if there
were no MFT, but you can use an explicit MFT to override someone
else's to-address group parameter.)  The function
`message-generate-unsubscribed-mail-followup-to' might come in handy.
It is bound to `C-c C-f C-a' by default.  In any case, you can insert
a MFT of your own choice; `C-c C-f C-m'
(`message-goto-mail-followup-to') will help you get started.


Honoring an MFT post
--------------------

When you followup to a post on a mailing list, and the post has a MFT
header, Gnus' action will depend on the value of the variable
`message-use-mail-followup-to'.  This variable can be one of:

`use'
      Always honor MFTs.  The To: and Cc: headers in your followup
     will be derived from the MFT header of the original post.  This
     is the default.

`nil'
      Always dishonor MFTs (just ignore the darned thing)

`ask'
     Gnus will prompt you for an action.


It is considered good netiquette to honor MFT, as it is assumed the
fellow who posted a message knows where the followups need to go
better than you do.



File: message, Node: Commands, Next: Variables, Prev: Interface, Up: Top

Commands
********

* Menu:

* Buffer Entry::        Commands after entering a Message buffer.
* Header Commands::     Commands for moving headers or changing headers.
* Movement::            Moving around in message buffers.
* Insertion::           Inserting things into message buffers.
* MIME::                MIME considerations.
* IDNA::                Non-ASCII domain name considerations.
* Security::            Signing and encrypting messages.
* Various Commands::    Various things.
* Sending::             Actually sending the message.
* Mail Aliases::        How to use mail aliases.
* Spelling::            Having Emacs check your spelling.




File: message, Node: Buffer Entry, Next: Header Commands, Prev: Commands, Up: Commands

Buffer Entry
============

You most often end up in a Message buffer when responding to some
other message of some sort.  Message does lots of handling of quoted
text, and may remove signatures, reformat the text, or the
like--depending on which used settings you're using.  Message usually
gets things right, but sometimes it stumbles.  To help the user unwind
these stumblings, Message sets the undo boundary before each major
automatic action it takes.  If you press the undo key (usually located
at `C-_') a few times, you will get back the un-edited message you're
responding to.




File: message, Node: Header Commands, Next: Movement, Prev: Buffer Entry, Up: Commands

Header Commands
===============


Commands for moving to headers
------------------------------

These following commands move to the header in question.  If it
doesn't exist, it will be inserted.


`C-c ?'
     Describe the message mode.

`C-c C-f C-t'
     Go to the `To' header (`message-goto-to').

`C-c C-f C-o'
     Go to the `From' header (`message-goto-from').  (The "o" in the
     key binding is for Originator.)

`C-c C-f C-b'
     Go to the `Bcc' header (`message-goto-bcc').

`C-c C-f C-f'
     Go to the `Fcc' header (`message-goto-fcc').

`C-c C-f C-c'
     Go to the `Cc' header (`message-goto-cc').

`C-c C-f C-s'
     Go to the `Subject' header (`message-goto-subject').

`C-c C-f C-r'
     Go to the `Reply-To' header (`message-goto-reply-to').

`C-c C-f C-n'
     Go to the `Newsgroups' header (`message-goto-newsgroups').

`C-c C-f C-d'
     Go to the `Distribution' header (`message-goto-distribution').

`C-c C-f C-o'
     Go to the `Followup-To' header (`message-goto-followup-to').

`C-c C-f C-k'
     Go to the `Keywords' header (`message-goto-keywords').

`C-c C-f C-u'
     Go to the `Summary' header (`message-goto-summary').

`C-c C-f C-i'
     This inserts the `Importance:' header with a value of `high'.
     This header is used to signal the importance of the message to
     the receiver.  If the header is already present in the buffer, it
     cycles between the three valid values according to RFC 1376:
     `low', `normal' and `high'.

`C-c C-f C-a'
     Insert a reasonable `Mail-Followup-To:' header (*Note Mailing
     Lists::) in a post to an unsubscribed list.  When making original
     posts to a mailing list you are not subscribed to, you have to
     type in a `Mail-Followup-To:' header by hand.  The contents,
     usually, are the addresses of the list and your own address.
     This function inserts such a header automatically.  It fetches
     the contents of the `To:' header in the current mail buffer, and
     appends the current `user-mail-address'.

     If the optional argument `include-cc' is non-`nil', the
     addresses in the `Cc:' header are also put into the
     `Mail-Followup-To:' header.



Commands to change headers
--------------------------


`C-c C-o'
     Sort headers according to `message-header-format-alist'
     (`message-sort-headers').

`C-c C-t'
     Insert a `To' header that contains the `Reply-To' or `From'
     header of the message you're following up (`message-insert-to').

`C-c C-n'
     Insert a `Newsgroups' header that reflects the `Followup-To' or
     `Newsgroups' header of the article you're replying to
     (`message-insert-newsgroups').

`C-c C-l'
     Send a message to the list only.  Remove all addresses but the
     list address from `To:' and `Cc:' headers.

`C-c M-n'
     Insert a request for a disposition notification.
     (`message-insert-disposition-notification-to').  This means that
     if the recipient support RFC 2298 she might send you a
     notification that she received the message.

`M-x message-insert-importance-high'
     Insert an `Importance' header with a value of `high', deleting
     headers if necessary.

`M-x message-insert-importance-low'
     Insert an `Importance' header with a value of `low', deleting
     headers if necessary.

`C-c C-f s'
     Change the current `Subject' header.  Ask for new `Subject'
     header and append `(was: <Old Subject>)'.  The old subject can be
     stripped on replying, see `message-subject-trailing-was-query'
     (*Note Message Headers::).

`C-c C-f x'
     Set up the `FollowUp-To' header with a target newsgroup for a
     cross-post, add that target newsgroup to the `Newsgroups' header
     if it is not a member of `Newsgroups', and insert a note in the
     body.  If `message-cross-post-default' is `nil' or if this
     command is called with a prefix-argument, only the `FollowUp-To'
     header will be set but the target newsgroup will not be added to
     the `Newsgroups' header.  The function to insert a note is
     controlled by the `message-cross-post-note-function' variable.

`C-c C-f t'
     Replace contents of `To' header with contents of `Cc' or `Bcc'
     header.  (Iff `Cc' header is not present, `Bcc' header will be
     used instead.)

`C-c C-f w'
     Insert `To' and `Cc' headers as if you were doing a wide reply
     even if the message was not made for a wide reply first.

`C-c C-f a'
     Insert `X-No-Archive: Yes' in the header and a note in the body.
     The header and the note can be customized using
     `message-archive-header' and `message-archive-note'.  When
     called with a prefix argument, ask for a text to insert.  If you don't
     want the note in the body, set `message-archive-note' to
     `nil'.





File: message, Node: Movement, Next: Insertion, Prev: Header Commands, Up: Commands

Movement
========

`C-c C-b'
     Move to the beginning of the body of the message
     (`message-goto-body').

`C-c C-i'
     Move to the signature of the message (`message-goto-signature').

`C-a'
     If at beginning of header value, go to beginning of line, else go
     to beginning of header value.  (The header value comes after the
     header name and the colon.)  This behavior can be disabled by
     toggling the variable `message-beginning-of-line'.





File: message, Node: Insertion, Next: MIME, Prev: Movement, Up: Commands

Insertion
=========


`C-c C-y'
     Yank the message that's being replied to into the message buffer
     (`message-yank-original').

`C-c C-M-y'
     Prompt for a buffer name and yank the contents of that buffer
     into the message buffer (`message-yank-buffer').

`C-c C-q'
     Fill the yanked message (`message-fill-yanked-message').
     Warning: Can severely mess up the yanked text if its quoting
     conventions are strange.  You'll quickly get a feel for when it's
     safe, though.  Anyway, just remember that `C-x u' (`undo') is
     available and you'll be all right.

`C-c C-w'
     Insert a signature at the end of the buffer
     (`message-insert-signature').

`C-c M-h'
     Insert the message headers (`message-insert-headers').

`C-c M-m'
     Mark some region in the current article with enclosing tags.  See
     `message-mark-insert-begin' and `message-mark-insert-end'.  When
     called with a prefix argument, use slrn style verbatim marks
     (`#v+' and `#v-').

`C-c M-f'
     Insert a file in the current article with enclosing tags.  See
     `message-mark-insert-begin' and `message-mark-insert-end'.  When
     called with a prefix argument, use slrn style verbatim marks
     (`#v+' and `#v-').





File: message, Node: MIME, Next: IDNA, Prev: Insertion, Up: Commands

MIME
====

Message is a MIME-compliant posting agent.  The user generally
doesn't have to do anything to make the MIME happen--Message will
automatically add the `Content-Type' and
`Content-Transfer-Encoding' headers.

The most typical thing users want to use the multipart things in MIME
for is to add "attachments" to mail they send out.  This can be done
with the `C-c C-a' command (`M-x mml-attach-file'), which will prompt
for a file name and a MIME type.

If your Emacs supports drag and drop, you can also drop the file in
the Message buffer.  The variable `mml-dnd-protocol-alist' specifies
what kind of action is done when you drop a file into the Message
buffer.  The variable `mml-dnd-attach-options' controls which MIME
options you want to specify when dropping a file.  If it is a list,
valid members are `type', `description' and `disposition'.
`disposition' implies `type'.  If it is `nil', don't ask for options.
If it is `t', ask the user whether or not to specify options.

You can also create arbitrarily complex multiparts using the MML
language (*Note Composing: (emacs-mime)Composing.).



File: message, Node: IDNA, Next: Security, Prev: MIME, Up: Commands

IDNA
====

Message is a IDNA-compliant posting agent.  The user
generally doesn't have to do anything to make the IDNA
happen--Message will encode non-ASCII domain names in `From',
`To', and `Cc' headers automatically.

Until IDNA becomes more well known, Message queries you whether IDNA
encoding of the domain name really should occur.  Some users might not
be aware that domain names can contain non-ASCII now, so this gives
them a safety net if they accidently typed a non-ASCII domain name.

The `message-use-idna' variable control whether IDNA is used.  If the
variable is `nil' no IDNA encoding will ever happen, if it is set to
the symbol `ask' the user will be queried, and if set to `t' (which is
the default if IDNA is fully available) IDNA encoding happens
automatically.

If you want to experiment with the IDNA encoding, you can invoke `M-x
message-idna-to-ascii-rhs RET' in the message buffer to have the
non-ASCII domain names encoded while you edit the message.

Note that you must have GNU Libidn
(http://www.gnu.org/software/libidn/) installed in order to use this
functionality.



File: message, Node: Security, Next: Various Commands, Prev: IDNA, Up: Commands

Security
========

Using the MML language, Message is able to create digitally
signed and digitally encrypted messages.  Message (or rather
MML) currently support PGP (RFC 1991),
PGP/MIME (RFC 2015/3156) and S/MIME.

* Menu:

* Signing and encryption::      Signing and encrypting commands.
* Using S/MIME::                Using S/MIME
* Using PGP/MIME::              Using PGP/MIME
* PGP Compatibility::           Compatibility with older implementations



File: message, Node: Signing and encryption, Next: Using S/MIME, Prev: Security, Up: Security

Signing and encrypting commands
-------------------------------

Instructing MML to perform security operations on a MIME part is done
using the `C-c C-m s' key map for signing and the `C-c C-m c' key map
for encryption, as follows.

`C-c C-m s s'

     Digitally sign current message using S/MIME.

`C-c C-m s o'

     Digitally sign current message using PGP.

`C-c C-m s p'

     Digitally sign current message using PGP/MIME.

`C-c C-m c s'

     Digitally encrypt current message using S/MIME.

`C-c C-m c o'

     Digitally encrypt current message using PGP.

`C-c C-m c p'

     Digitally encrypt current message using PGP/MIME.

`C-c C-m C-n'
     Remove security related MML tags from message.


These commands do not immediately sign or encrypt the message, they
merely insert the proper MML secure tag to instruct the MML engine to
perform that operation when the message is actually sent.  They may
perform other operations too, such as locating and retrieving a S/MIME
certificate of the person you wish to send encrypted mail to.  When
the mml parsing engine converts your MML into a properly encoded MIME
message, the secure tag will be replaced with either a part or a
multipart tag.  If your message contains other mml parts, a multipart
tag will be used; if no other parts are present in your message a
single part tag will be used.  This way, message mode will do the
Right Thing (TM) with signed/encrypted multipart messages.

Since signing and especially encryption often is used when sensitive
information is sent, you may want to have some way to ensure that your
mail is actually signed or encrypted.  After invoking the above
sign/encrypt commands, it is possible to preview the raw article by
using `C-u C-c RET P' (`mml-preview').  Then you can verify that your
long rant about what your ex-significant other or whomever actually
did with that funny looking person at that strange party the other
night, actually will be sent encrypted.

*Note!* Neither PGP/MIME nor S/MIME encrypt/signs RFC822 headers.
They only operate on the MIME object.  Keep this in mind before
sending mail with a sensitive Subject line.

By default, when encrypting a message, Gnus will use the "signencrypt"
mode, which means the message is both signed and encrypted.  If you
would like to disable this for a particular message, give the
`mml-secure-message-encrypt-*' command a prefix argument, e.g., `C-u
C-c C-m c p'.

Actually using the security commands above is not very difficult.  At
least not compared with making sure all involved programs talk with
each other properly.  Thus, we now describe what external libraries or
programs are required to make things work, and some small general
hints.



File: message, Node: Using S/MIME, Next: Using PGP/MIME, Prev: Signing and encryption, Up: Security

Using S/MIME
------------

*Note!* This section assume you have a basic familiarity with modern
cryptography, S/MIME, various PKCS standards, OpenSSL and so on.

The S/MIME support in Message (and MML) require OpenSSL.  OpenSSL
performs the actual S/MIME sign/encrypt operations.  OpenSSL can be
found at `http://www.openssl.org/'.  OpenSSL 0.9.6 and later should
work.  Version 0.9.5a cannot extract mail addresses from certificates,
and it insert a spurious CR character into MIME separators so you may
wish to avoid it if you would like to avoid being regarded as someone
who send strange mail.  (Although by sending S/MIME messages you've
probably already lost that contest.)

To be able to send encrypted mail, a personal certificate is not
required.  Message (MML) need a certificate for the person to whom you
wish to communicate with though.  You're asked for this when you type
`C-c C-m c s'.  Currently there are two ways to retrieve this
certificate, from a local file or from DNS.  If you chose a local
file, it need to contain a X.509 certificate in PEM format.  If you
chose DNS, you're asked for the domain name where the certificate is
stored, the default is a good guess.  To my belief, Message (MML) is
the first mail agent in the world to support retrieving S/MIME
certificates from DNS, so you're not likely to find very many
certificates out there.  At least there should be one, stored at the
domain `simon.josefsson.org'.  LDAP is a more popular method of
distributing certificates, support for it is planned.  (Meanwhile, you
can use `ldapsearch' from the command line to retrieve a certificate
into a file and use it.)

As for signing messages, OpenSSL can't perform signing operations
without some kind of configuration.  Especially, you need to tell it
where your private key and your certificate is stored.  MML
uses an Emacs interface to OpenSSL, aptly named `smime.el', and it
contain a `custom' group used for this configuration.  So, try
`M-x customize-group RET smime RET' and look around.

Currently there is no support for talking to a CA (or RA) to create
your own certificate.  None is planned either.  You need to do this
manually with OpenSSL or using some other program.  I used Netscape
and got a free S/MIME certificate from one of the big CA's on the net.
Netscape is able to export your private key and certificate in PKCS
#12 format.  Use OpenSSL to convert this into a plain X.509
certificate in PEM format as follows.

     $ openssl pkcs12 -in ns.p12 -clcerts -nodes > key+cert.pem

The `key+cert.pem' file should be pointed to from the
`smime-keys' variable.  You should now be able to send signed mail.

*Note!* Your private key is now stored unencrypted in the file, so
take care in handling it.  Storing encrypted keys on the disk are
supported, and Gnus will ask you for a passphrase before invoking
OpenSSL.  Read the OpenSSL documentation for how to achieve this.  If
you use unencrypted keys (e.g., if they are on a secure storage, or if
you are on a secure single user machine) simply press `RET' at the
passphrase prompt.



File: message, Node: Using PGP/MIME, Next: PGP Compatibility, Prev: Using S/MIME, Up: Security

Using PGP/MIME
--------------

PGP/MIME requires an external OpenPGP implementation, such
as GNU Privacy Guard (http://www.gnupg.org/).  Pre-OpenPGP
implementations such as PGP 2.x and PGP 5.x are also supported.  One
Emacs interface to the PGP implementations, PGG (*Note PGG: (pgg)Top.), is included, but Mailcrypt and Florian Weimer's
`gpg.el' are also supported.  *Note PGP Compatibility::.

Message internally calls GnuPG (the `gpg' command) to perform
data encryption, and in certain cases (decrypting or signing for
example), `gpg' requires user's passphrase.  Currently the
recommended way to supply your passphrase to `gpg' is to use the
`gpg-agent' program.

To use `gpg-agent' in Emacs, you need to run the following command
from the shell before starting Emacs.

     eval `gpg-agent --daemon`

This will invoke `gpg-agent' and set the environment variable
`GPG_AGENT_INFO' to allow `gpg' to communicate with it.  It might be
good idea to put this command in your `.xsession' or `.bash_profile'.
*Note Invoking GPG-AGENT: (gnupg)Invoking GPG-AGENT.

Once your `gpg-agent' is set up, it will ask you for a passphrase as
needed for `gpg'.  Under the X Window System, you will see a new
passphrase input dialog appear.  The dialog is provided by PIN Entry
(the `pinentry' command), and as of version 0.7.2, `pinentry' cannot
cooperate with Emacs on a single tty.  So, if you are using a text
console, you may need to put a passphrase into gpg-agent's cache
beforehand.  The following command does the trick.

     gpg --use-agent --sign < /dev/null > /dev/null

The Lisp variable `pgg-gpg-use-agent' controls whether to use
`gpg-agent'.  See also *Note Caching passphrase: (pgg)Caching
passphrase.




File: message, Node: PGP Compatibility, Prev: Using PGP/MIME, Up: Security

Compatibility with older implementations
----------------------------------------

Note, if you are using the `gpg.el' you must make sure that the
directory specified by `gpg-temp-directory' have permissions 0700.

Creating your own key is described in detail in the documentation of
your PGP implementation, so we refer to it.

If you have imported your old PGP 2.x key into GnuPG, and want to send
signed and encrypted messages to your fellow PGP 2.x users, you'll
discover that the receiver cannot understand what you send. One
solution is to use PGP 2.x instead (i.e., if you use `pgg', set
`pgg-default-scheme' to `pgp').  If you do want to use GnuPG, you can
use a compatibility script called `gpg-2comp' available from
`http://muppet.faveve.uni-stuttgart.de/~gero/gpg-2comp/'.  You could
also convince your fellow PGP 2.x users to convert to GnuPG.
As a final workaround, you can make the sign and encryption work in
two steps; separately sign, then encrypt a message.  If you would like
to change this behavior you can customize the
`mml-signencrypt-style-alist' variable.  For example:

     (setq mml-signencrypt-style-alist '(("smime" separate)
                                         ("pgp" separate)
                                         ("pgpauto" separate)
                                         ("pgpmime" separate)))

This causes to sign and encrypt in two passes, thus generating a
message that can be understood by PGP version 2.

(Refer to `http://www.gnupg.org/gph/en/pgp2x.html' for more
information about the problem.)



File: message, Node: Various Commands, Next: Sending, Prev: Security, Up: Commands

Various Commands
================


`C-c C-r'
     Caesar rotate (aka. rot13) the current message
     (`message-caesar-buffer-body').  If narrowing is in effect, just
     rotate the visible portion of the buffer.  A numerical prefix
     says how many places to rotate the text.  The default is 13.

`C-c C-e'
     Elide the text between point and mark (`message-elide-region').
     The text is killed and replaced with the contents of the variable
     `message-elide-ellipsis'.  The default value is to use an
     ellipsis (`[...]').

`C-c M-k'
     Kill the address under point.

`C-c C-z'
     Kill all the text up to the signature, or if that's missing, up
     to the end of the message (`message-kill-to-signature').

`C-c C-v'
     Delete all text in the body of the message that is outside the
     region (`message-delete-not-region').

`M-RET'
     Insert four newlines, and then reformat if inside quoted text.

     Here's an example:

          > This is some quoted text.  And here's more quoted text.

     If point is before `And' and you press `M-RET', you'll get:

          > This is some quoted text.

          *

          > And here's more quoted text.

     `*' says where point will be placed.

`C-c M-r'
     Rename the buffer (`message-rename-buffer').  If given a prefix,
     prompt for a new buffer name.

`TAB'
     If `message-tab-body-function' is non-`nil', execute the
     function it specifies.  Otherwise use the function bound to `TAB' in
     `text-mode-map' or `global-map'.





File: message, Node: Sending, Next: Mail Aliases, Prev: Various Commands, Up: Commands

Sending
=======

`C-c C-c'
     Send the message and bury the current buffer
     (`message-send-and-exit').

`C-c C-s'
     Send the message (`message-send').

`C-c C-d'
     Bury the message buffer and exit (`message-dont-send').

`C-c C-k'
     Kill the message buffer and exit (`message-kill-buffer').






File: message, Node: Mail Aliases, Next: Spelling, Prev: Sending, Up: Commands

Mail Aliases
============

The `message-mail-alias-type' variable controls what type of mail
alias expansion to use.  Currently two forms are supported:
`mailabbrev' and `ecomplete'.  If this variable is
`nil', no mail alias expansion will be performed.

`mailabbrev' works by parsing the `/etc/mailrc' and
`~/.mailrc' files.  These files look like:

     alias lmi "Lars Magne Ingebrigtsen <larsi@ifi.uio.no>"
     alias ding "ding@ifi.uio.no (ding mailing list)"

After adding lines like this to your `~/.mailrc' file, you should be
able to just write `lmi' in the `To' or `Cc' (and so on) headers and
press `SPC' to expand the alias.

No expansion will be performed upon sending of the message--all
expansions have to be done explicitly.

If you're using `ecomplete', all addresses from `To' and `Cc' headers
will automatically be put into the `~/.ecompleterc' file.  When you
enter text in the `To' and `Cc' headers, `ecomplete' will check out
the values stored there and "electrically" say what completions are
possible.  To choose one of these completions, use the `M-n' command
to move down to the list.  Use `M-n' and `M-p' to move down and up the
list, and `RET' to choose a completion.



File: message, Node: Spelling, Prev: Mail Aliases, Up: Commands

Spelling
========

There are two popular ways to have Emacs spell-check your messages:
`ispell' and `flyspell'.  `ispell' is the older and probably more
popular package.  You typically first write the message, and then run
the entire thing through `ispell' and fix all the typos.  To have this
happen automatically when you send a message, put something like the
following in your `.emacs' file:

     (add-hook 'message-send-hook 'ispell-message)

If you're in the habit of writing in different languages, this can be
controlled by the `ispell-message-dictionary-alist' variable:

     (setq ispell-message-dictionary-alist
           '(("^Newsgroups:.*\\bde\\." . "deutsch8")
             (".*" . "default")))

`ispell' depends on having the external `ispell' command installed.

The other popular method is using `flyspell'.  This package checks
your spelling while you're writing, and marks any mis-spelled words in
various ways.

To use `flyspell', put something like the following in your
`.emacs' file:

     (defun my-message-setup-routine ()
       (flyspell-mode 1))
     (add-hook 'message-setup-hook 'my-message-setup-routine)

`flyspell' depends on having the external `ispell' command installed.




File: message, Node: Variables, Next: Compatibility, Prev: Commands, Up: Top

Variables
*********

* Menu:

* Message Headers::             General message header stuff.
* Mail Headers::                Customizing mail headers.
* Mail Variables::              Other mail variables.
* News Headers::                Customizing news headers.
* News Variables::              Other news variables.
* Insertion Variables::         Customizing how things are inserted.
* Various Message Variables::   Other message variables.
* Sending Variables::           Variables for sending.
* Message Buffers::             How Message names its buffers.
* Message Actions::             Actions to be performed when exiting.




File: message, Node: Message Headers, Next: Mail Headers, Prev: Variables, Up: Variables

Message Headers
===============

Message is quite aggressive on the message generation front.  It has
to be--it's a combined news and mail agent.  To be able to send
combined messages, it has to generate all headers itself (instead of
letting the mail/news system do it) to ensure that mail and news
copies of messages look sufficiently similar.


`message-generate-headers-first'
     If `t', generate all required headers before starting to compose
     the message.  This can also be a list of headers to generate:

          (setq message-generate-headers-first
                '(References))

     The variables `message-required-headers',
     `message-required-mail-headers' and
     `message-required-news-headers' specify which headers are
     required.

     Note that some headers will be removed and re-generated before
     posting, because of the variable `message-deletable-headers' (see
     below).

`message-draft-headers'
     When running Message from Gnus, the message buffers are
     associated with a draft group.  `message-draft-headers' says
     which headers should be generated when a draft is written to the
     draft group.

`message-from-style'
     Specifies how `From' headers should look.  There are four valid
     values:

     `nil'
          Just the address---`king@grassland.com'.

     `parens'
          `king@grassland.com (Elvis Parsley)'.

     `angles'
          `Elvis Parsley <king@grassland.com>'.

     `default'
          Look like `angles' if that doesn't require quoting, and
          `parens' if it does.  If even `parens' requires quoting, use
          `angles' anyway.


`message-deletable-headers'
     Headers in this list that were previously generated by Message
     will be deleted before posting.  Let's say you post an article.
     Then you decide to post it again to some other group, you naughty
     boy, so you jump back to the `*post-buf*' buffer, edit the
     `Newsgroups' line, and ship it off again.  By default, this
     variable makes sure that the old generated `Message-ID' is
     deleted, and a new one generated.  If this isn't done, the entire
     empire would probably crumble, anarchy would prevail, and cats
     would start walking on two legs and rule the world.  Allegedly.

`message-default-headers'
     This string is inserted at the end of the headers in all message
     buffers.

`message-subject-re-regexp'
     Responses to messages have subjects that start with `Re: '.  This
     is *not* an abbreviation of the English word "response", but is
     Latin, and means "in response to".  Some illiterate nincompoops
     have failed to grasp this fact, and have "internationalized"
     their software to use abominations like `Aw: ' ("antwort") or
     `Sv: ' ("svar") instead, which is meaningless and evil.  However,
     you may have to deal with users that use these evil tools, in
     which case you may set this variable to a regexp that matches
     these prefixes.  Myself, I just throw away non-compliant mail.

     Here's an example of a value to deal with these headers when
     responding to a message:

          (setq message-subject-re-regexp
                (concat
                 "^[ \t]*"
                   "\\("
                     "\\("
                       "[Aa][Nn][Tt][Ww]\\.?\\|"     ; antw
                       "[Aa][Ww]\\|"                 ; aw
                       "[Ff][Ww][Dd]?\\|"            ; fwd
                       "[Oo][Dd][Pp]\\|"             ; odp
                       "[Rr][Ee]\\|"                 ; re
                       "[Rr][\311\351][Ff]\\.?\\|"   ; ref
                       "[Ss][Vv]"                    ; sv
                     "\\)"
                     "\\(\\[[0-9]*\\]\\)"
                     "*:[ \t]*"
                   "\\)"
                 "*[ \t]*"
                 ))

`message-subject-trailing-was-query'
     Controls what to do with trailing `(was: <old subject>)' in subject
     lines.  If `nil', leave the subject unchanged.  If it is the symbol
     `ask', query the user what to do.  In this case, the subject is
     matched against `message-subject-trailing-was-ask-regexp'.  If
     `message-subject-trailing-was-query' is `t', always strip the
     trailing old subject.  In this case,
     `message-subject-trailing-was-regexp' is used.

`message-alternative-emails'
     Regexp matching alternative email addresses.  The first address
     in the To, Cc or From headers of the original article matching
     this variable is used as the From field of outgoing messages,
     replacing the default From value.

     For example, if you have two secondary email addresses
     john@home.net and john.doe@work.com and want to use them in the
     From field when composing a reply to a message addressed to one
     of them, you could set this variable like this:

          (setq message-alternative-emails
                (regexp-opt '("john@home.net" "john.doe@work.com")))

     This variable has precedence over posting styles and anything
     that runs off `message-setup-hook'.

`message-allow-no-recipients'
     Specifies what to do when there are no recipients other than
     `Gcc' or `Fcc'.  If it is `always', the posting is
     allowed.  If it is `never', the posting is not allowed.  If it is
     `ask' (the default), you are prompted.

`message-hidden-headers'
     A regexp, a list of regexps, or a list where the first element is
     `not' and the rest are regexps.  It says which headers to keep
     hidden when composing a message.

          (setq message-hidden-headers
                '(not "From" "Subject" "To" "Cc" "Newsgroups"))

     Headers are hidden using narrowing, you can use `M-x widen' to
     expose them in the buffer.

`message-header-synonyms'
     A list of lists of header synonyms.  E.g., if this list contains
     a member list with elements `Cc' and `To', then
     `message-carefully-insert-headers' will not insert a `To' header
     when the message is already `Cc'ed to the recipient.





File: message, Node: Mail Headers, Next: Mail Variables, Prev: Message Headers, Up: Variables

Mail Headers
============

`message-required-mail-headers'
     *Note News Headers::, for the syntax of this variable.  It is
     `(From Subject Date (optional . In-Reply-To) Message-ID
     (optional . User-Agent))' by default.

`message-ignored-mail-headers'
     Regexp of headers to be removed before mailing.  The default is
     `^[GF]cc:\\|^Resent-Fcc:\\|^Xref:\\|^X-Draft-From:\\|
     ^X-Gnus-Agent-Meta-Information:'.

`message-default-mail-headers'
     This string is inserted at the end of the headers in all message
     buffers that are initialized as mail.

`message-generate-hashcash'
     Variable that indicates whether `X-Hashcash' headers should be
     computed for the message.  *Note Hashcash: (gnus)Hashcash.  If
     `opportunistic', only generate the headers when it doesn't lead
     to the user having to wait.





File: message, Node: Mail Variables, Next: News Headers, Prev: Mail Headers, Up: Variables

Mail Variables
==============

`message-send-mail-function'
     Function used to send the current buffer as mail.  The default is
     `message-send-mail-with-sendmail', or `smtpmail-send-it'
     according to the system.  Other valid values include
     `message-send-mail-with-mailclient',
     `message-send-mail-with-mh', `message-send-mail-with-qmail',
     `message-smtpmail-send-it' and `feedmail-send-it'.

     The function `message-send-mail-with-sendmail' pipes your article
     to the `sendmail' binary for further queuing and sending.  When
     your local system is not configured for sending mail using
     `sendmail', and you have access to a remote SMTP server, you can
     set `message-send-mail-function' to `smtpmail-send-it' and make
     sure to setup the `smtpmail' package correctly.  An example:

          (setq message-send-mail-function 'smtpmail-send-it
                smtpmail-default-smtp-server "YOUR SMTP HOST")

     To the thing similar to this, there is
     `message-smtpmail-send-it'.  It is useful if your ISP
     requires the POP-before-SMTP authentication.
     *Note POP before SMTP: (gnus)POP before SMTP.

`message-mh-deletable-headers'
     Most versions of MH doesn't like being fed messages that contain
     the headers in this variable.  If this variable is non-`nil'
     (which is the default), these headers will be removed before
     mailing when sending messages via MH.  Set it to `nil' if your MH
     can handle these headers.

`message-qmail-inject-program'
     Location of the qmail-inject program.

`message-qmail-inject-args'
     Arguments passed to qmail-inject programs.  This should be a list
     of strings, one string for each argument.  It may also be a
     function.

     For e.g., if you wish to set the envelope sender address so that
     bounces go to the right place or to deal with listserv's usage of
     that address, you might set this variable to `'("-f"
     you@some.where")'.

`message-sendmail-f-is-evil'
     Non-`nil' means don't add `-f username' to the sendmail command
     line.  Doing so would be even more evil than leaving it out.

`message-sendmail-envelope-from'
     When `message-sendmail-f-is-evil' is `nil', this specifies
     the address to use in the SMTP envelope.  If it is
     `nil', use `user-mail-address'.  If it is the symbol
     `header', use the `From' header of the message.

`message-mailer-swallows-blank-line'
     Set this to non-`nil' if the system's mailer runs the header and
     body together.  (This problem exists on SunOS 4 when sendmail is
     run in remote mode.)  The value should be an expression to test
     whether the problem will actually occur.

`message-send-mail-partially-limit'
     The limitation of messages sent as message/partial.  The lower
     bound of message size in characters, beyond which the message
     should be sent in several parts.  If it is `nil', the size is
     unlimited.





