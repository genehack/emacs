Info file: gnus,    -*-Text-*-
produced by `texinfo-format-buffer'
from file `gnus.texi'
using `texinfmt.el' version 2.42 of  7 Jul 2006.

Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.2 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with the Front-Cover
     texts being "A GNU Manual", and with the Back-Cover Texts as in
     (a) below.  A copy of the license is included in the section
     entitled "GNU Free Documentation License" in the Emacs manual.

     (a) The FSF's Back-Cover Text is: "You have freedom to copy and
     modify this GNU Manual, like GNU software.  Copies published by
     the Free Software Foundation raise funds for GNU development."

     This document is part of a collection distributed under the GNU
     Free Documentation License.  If you want to distribute this
     document separately from the collection, you can do so by adding
     a copy of the license to the document, as described in section 6
     of the license.



INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Gnus: (gnus).         The newsreader Gnus.
END-INFO-DIR-ENTRY








File: gnus, Node: Oort Gnus, Next: No Gnus, Prev: Pterodactyl Gnus, Up: New Features

Oort Gnus
.........

New features in Gnus 5.10:


   * Installation changes

        * Upgrading from previous (stable) version if you have used
          Oort.

          If you have tried Oort (the unstable Gnus branch leading to
          this release) but went back to a stable version, be careful
          when upgrading to this version.  In particular, you will
          probably want to remove all `.marks' (nnml) and `.mrk'
          (nnfolder) files, so that flags are read from your
          `.newsrc.eld' instead of from the `.marks'/`.mrk' file where
          this release store flags.  See a later entry for more
          information about marks.  Note that downgrading isn't save
          in general.

        * Lisp files are now installed in `.../site-lisp/gnus/' by
          default.  It defaulted to `.../site-lisp/' formerly.  In
          addition to this, the new installer issues a warning if
          other Gnus installations which will shadow the latest one
          are detected.  You can then remove those shadows manually or
          remove them using `make remove-installed-shadows'.

        * New `make.bat' for compiling and installing Gnus under MS
          Windows

          Use `make.bat' if you want to install Gnus under MS Windows,
          the first argument to the batch-program should be the
          directory where `xemacs.exe' respectively `emacs.exe' is
          located, if you want to install Gnus after compiling it,
          give `make.bat' `/copy' as the second parameter.

          `make.bat' has been rewritten from scratch, it now features
          automatic recognition of XEmacs and GNU Emacs, generates
          `gnus-load.el', checks if errors occur while compilation and
          generation of info files and reports them at the end of the
          build process.  It now uses `makeinfo' if it is available
          and falls back to `infohack.el' otherwise.  `make.bat'
          should now install all files which are necessary to run Gnus
          and be generally a complete replacement for the `configure;
          make; make install' cycle used under Unix systems.

          The new `make.bat' makes `make-x.bat' and `xemacs.mak'
          superfluous, so they have been removed.

        * `~/News/overview/' not used.

          As a result of the following change, the `~/News/overview/'
          directory is not used any more.  You can safely delete the
          entire hierarchy.

        * `(require 'gnus-load)'

          If you use a stand-alone Gnus distribution, you'd better add
          `(require 'gnus-load)' into your `~/.emacs' after adding the
          Gnus lisp directory into load-path.

          File `gnus-load.el' contains autoload commands, functions
          and variables, some of which may not be included in
          distributions of Emacsen.


   * New packages and libraries within Gnus


        * The revised Gnus FAQ is included in the manual,
          *Note Frequently Asked Questions::.

        * TLS wrapper shipped with Gnus

          TLS/SSL is now supported in IMAP and
          NNTP via `tls.el' and GNUTLS.  The old
          TLS/SSL support via (external third party)
          `ssl.el' and OpenSSL still works.

        * Improved anti-spam features.

          Gnus is now able to take out spam from your mail and news
          streams using a wide variety of programs and filter rules.
          Among the supported methods are RBL blocklists, bogofilter
          and white/blacklists.  Hooks for easy use of external
          packages such as SpamAssassin and Hashcash are also new.
          *Note Thwarting Email Spam:: and *Note Spam Package::.

        * Gnus supports server-side mail filtering using Sieve.

          Sieve rules can be added as Group Parameters for groups, and
          the complete Sieve script is generated using `D g' from the
          Group buffer, and then uploaded to the server using `C-c
          C-l' in the generated Sieve buffer.  *Note Sieve Commands::,
          and the new Sieve manual *Note Top: (sieve)Top.


   * Changes in group mode


        * `gnus-group-read-ephemeral-group' can be called
          interactively, using `G M'.

        * Retrieval of charters and control messages

          There are new commands for fetching newsgroup charters (`H
          c') and control messages (`H C').

        * The new variable `gnus-parameters' can be used to set group
          parameters.

          Earlier this was done only via `G p' (or `G c'), which
          stored the parameters in `~/.newsrc.eld', but via this
          variable you can enjoy the powers of customize, and
          simplified backups since you set the variable in
          `~/.gnus.el' instead of `~/.newsrc.eld'.  The variable maps
          regular expressions matching group names to group
          parameters, a'la:
               (setq gnus-parameters
                     '(("mail\\..*"
                        (gnus-show-threads nil)
                        (gnus-use-scoring nil))
                       ("^nnimap:\\(foo.bar\\)$"
                        (to-group . "\\1"))))

        * Unread count correct in nnimap groups.

          The estimated number of unread articles in the group buffer
          should now be correct for nnimap groups.  This is achieved
          by calling `nnimap-fixup-unread-after-getting-new-news' from
          the `gnus-setup-news-hook' (called on startup) and
          `gnus-after-getting-new-news-hook'. (called after getting
          new mail).  If you have modified those variables from the
          default, you may want to add
          `nnimap-fixup-unread-after-getting-new-news' again.  If you
          were happy with the estimate and want to save some (minimal)
          time when getting new mail, remove the function.

        * Group names are treated as UTF-8 by default.

          This is supposedly what USEFOR wanted to migrate to.  See
          `gnus-group-name-charset-group-alist' and
          `gnus-group-name-charset-method-alist' for customization.

        * `gnus-group-charset-alist' and
          `gnus-group-ignored-charsets-alist'.

          The regexps in these variables are compared with full group
          names instead of real group names in 5.8.  Users who
          customize these variables should change those regexps
          accordingly.  For example:
               ("^han\\>" euc-kr) -> ("\\(^\\|:\\)han\\>" euc-kr)

        * Old intermediate incoming mail files (`Incoming*') are
          deleted after a couple of days, not immediately.  *Note Mail
          Source Customization::.  (New in Gnus 5.10.10 / Emacs 22.2)


   * Changes in summary and article mode


        * `F' (`gnus-article-followup-with-original') and `R'
          (`gnus-article-reply-with-original') only yank the text in
          the region if the region is active.

        * In draft groups, `e' is now bound to
          `gnus-draft-edit-message'.  Use `B w' for
          `gnus-summary-edit-article' instead.

        * Article Buttons

          More buttons for URLs, mail addresses, Message-IDs, Info
          links, man pages and Emacs or Gnus related references.
          *Note Article Buttons::.  The variables
          `gnus-button-*-level' can be used to control the appearance
          of all article buttons.  *Note Article Button Levels::.

        * Single-part yenc encoded attachments can be decoded.

        * Picons

          The picons code has been reimplemented to work in GNU
          Emacs--some of the previous options have been removed or
          renamed.

          Picons are small "personal icons" representing users, domain and
          newsgroups, which can be displayed in the Article buffer.
          *Note Picons::.

        * If the new option `gnus-treat-body-boundary' is non-`nil', a
          boundary line is drawn at the end of the headers.

        * Signed article headers (X-PGP-Sig) can be verified with `W
          p'.

        * The Summary Buffer uses an arrow in the fringe to indicate
          the current article.  Use `(setq gnus-summary-display-arrow
          nil)' to disable it.

        * Warn about email replies to news

          Do you often find yourself replying to news by email by
          mistake?  Then the new option
          `gnus-confirm-mail-reply-to-news' is just the thing for you.

        * If the new option `gnus-summary-display-while-building' is
          non-`nil', the summary buffer is shown and updated as it's
          being built.

        * The new `recent' mark `.' indicates newly arrived messages
          (as opposed to old but unread messages).

        * Gnus supports RFC 2369 mailing list headers, and adds a
          number of related commands in mailing list groups.  *Note
          Mailing List::.

        * The Date header can be displayed in a format that can be
          read aloud in English.  *Note Article Date::.

        * diffs are automatically highlighted in groups matching
          `mm-uu-diff-groups-regexp'

        * Better handling of Microsoft citation styles

          Gnus now tries to recognize the mangled header block that
          some Microsoft mailers use to indicate that the rest of the
          message is a citation, even though it is not quoted in any
          way.  The variable `gnus-cite-unsightly-citation-regexp'
          matches the start of these citations.

          The new command `W Y f'
          (`gnus-article-outlook-deuglify-article') allows deuglifying
          broken Outlook (Express) articles.

        * `gnus-article-skip-boring'

          If you set `gnus-article-skip-boring' to `t', then Gnus will
          not scroll down to show you a page that contains only boring
          text, which by default means cited text and signature.  You
          can customize what is skippable using
          `gnus-article-boring-faces'.

          This feature is especially useful if you read many articles
          that consist of a little new content at the top with a long,
          untrimmed message cited below.

        * Smileys (`:-)', `;-)' etc) are now displayed graphically in
          Emacs too.

          Put `(setq gnus-treat-display-smileys nil)' in `~/.gnus.el'
          to disable it.

        * Face headers handling.  *Note Face::.

        * In the summary buffer, the new command `/ N' inserts new
          messages and `/ o' inserts old messages.

        * Gnus decodes morse encoded messages if you press `W m'.

        * `gnus-summary-line-format'

          The default value changed to `%U%R%z%I%(%[%4L: %-23,23f%]%)
          %s\n'.  Moreover `gnus-extra-headers',
          `nnmail-extra-headers' and `gnus-ignored-from-addresses'
          changed their default so that the users name will be
          replaced by the recipient's name or the group name posting
          to for NNTP groups.

        * Deleting of attachments.

          The command `gnus-mime-save-part-and-strip' (bound to `C-o'
          on MIME buttons) saves a part and replaces the part with an
          external one.  `gnus-mime-delete-part' (bound to `d' on MIME
          buttons) removes a part.  It works only on back ends that
          support editing.

        * `gnus-default-charset'

          The default value is determined from the
          `current-language-environment' variable, instead of
          `iso-8859-1'.  Also the `.*' item in
          `gnus-group-charset-alist' is removed.

        * Printing capabilities are enhanced.

          Gnus supports Muttprint natively with `O P' from the Summary
          and Article buffers.  Also, each individual MIME part can be
          printed using `p' on the MIME button.

        * Extended format specs.

          Format spec `%&user-date;' is added into
          `gnus-summary-line-format-alist'.  Also, user defined
          extended format specs are supported.  The extended format
          specs look like `%u&foo;', which invokes function
          `gnus-user-format-function-FOO'.  Because `&' is used as the
          escape character, old user defined format `%u&' is no longer
          supported.

        * `/ *' (`gnus-summary-limit-include-cached') is rewritten.

          It was aliased to `Y c'
          (`gnus-summary-insert-cached-articles').  The new function
          filters out other articles.

        * Some limiting commands accept a `C-u' prefix to negate the
          match.

          If `C-u' is used on subject, author or extra headers, i.e.,
          `/ s', `/ a', and `/ x'
          (`gnus-summary-limit-to-{subject,author,extra}')
          respectively, the result will be to display all articles
          that do not match the expression.

        * Gnus inlines external parts (message/external).


   * Changes in Message mode and related Gnus features


        * Delayed articles

          You can delay the sending of a message with `C-c C-j' in the
          Message buffer.  The messages are delivered at specified
          time.  This is useful for sending yourself reminders.  *Note
          Delayed Articles::.

        * If the new option `nnml-use-compressed-files' is non-`nil',
          the nnml back end allows compressed message files.

        * The new option `gnus-gcc-mark-as-read' automatically marks
          Gcc articles as read.

        * Externalizing of attachments

          If `gnus-gcc-externalize-attachments' or
          `message-fcc-externalize-attachments' is non-`nil', attach
          local files as external parts.

        * The envelope sender address can be customized when using Sendmail.
          *Note Mail Variables: (message)Mail Variables.

        * Gnus no longer generate the Sender: header automatically.

          Earlier it was generated when the user configurable email address was
          different from the Gnus guessed default user address.  As the guessing
          algorithm is rarely correct these days, and (more controversially) the
          only use of the Sender: header was to check if you are entitled to
          cancel/supersede news (which is now solved by Cancel Locks instead,
          see another entry), generation of the header has been disabled by
          default.  See the variables `message-required-headers',
          `message-required-news-headers', and
          `message-required-mail-headers'.

        * Features from third party `message-utils.el' added to
          `message.el'.

          Message now asks if you wish to remove `(was: <old
          subject>)' from subject lines (see
          `message-subject-trailing-was-query').  `C-c M-m' and `C-c
          M-f' inserts markers indicating included text.  `C-c C-f a'
          adds a X-No-Archive: header.  `C-c C-f x' inserts
          appropriate headers and a note in the body for
          cross-postings and followups (see the variables
          `message-cross-post-*').

        * References and X-Draft-From headers are no longer generated when you
          start composing messages and `message-generate-headers-first' is
          `nil'.

        * Easy inclusion of X-Faces headers.  *Note X-Face::.

        * Group Carbon Copy (GCC) quoting

          To support groups that contains SPC and other weird
          characters, groups are quoted before they are placed in the
          Gcc: header.  This means variables such as
          `gnus-message-archive-group' should no longer contain quote
          characters to make groups containing SPC work.  Also, if you
          are using the string `nnml:foo, nnml:bar' (indicating Gcc
          into two groups) you must change it to return the list
          `("nnml:foo" "nnml:bar")', otherwise the Gcc: line will be
          quoted incorrectly.  Note that returning the string
          `nnml:foo, nnml:bar' was incorrect earlier, it just didn't
          generate any problems since it was inserted directly.

        * `message-insinuate-rmail'

          Adding `(message-insinuate-rmail)' and `(setq
          mail-user-agent 'gnus-user-agent)' in `.emacs' convinces
          Rmail to compose, reply and forward messages in
          message-mode, where you can enjoy the power of MML.

        * `message-minibuffer-local-map'

          The line below enables BBDB in resending a message:
               (define-key message-minibuffer-local-map [(tab)]
                 'bbdb-complete-name)

        * `gnus-posting-styles'

          Add a new format of match like ((header "to" "larsi.*org")
          (Organization "Somewhere, Inc."))  The old format like the
          lines below is obsolete, but still accepted.
               (header "to" "larsi.*org"
                       (Organization "Somewhere, Inc."))

        * `message-ignored-news-headers' and `message-ignored-mail-headers'

          `X-Draft-From' and `X-Gnus-Agent-Meta-Information' have been
          added into these two variables.  If you customized those,
          perhaps you need add those two headers too.

        * Gnus supports the "format=flowed" (RFC 2646) parameter.  On
          composing messages, it is enabled by `use-hard-newlines'.
          Decoding format=flowed was present but not documented in
          earlier versions.

        * The option `mm-fill-flowed' can be used to disable treatment
          of "format=flowed" messages.  Also, flowed text is disabled
          when sending inline PGP signed messages.  *Note Flowed text:
          (emacs-mime)Flowed text.  (New in Gnus 5.10.7)

        * Gnus supports the generation of RFC 2298 Disposition
          Notification requests.

          This is invoked with the `C-c M-n' key binding from message
          mode.

        * Message supports the Importance: (RFC 2156) header.

          In the message buffer, `C-c C-f C-i' or `C-c C-u' cycles
          through the valid values.

        * Gnus supports Cancel Locks in News.

          This means a header `Cancel-Lock' is inserted in news
          posting.  It is used to determine if you wrote an article or
          not (for canceling and superseding).  Gnus generates a
          random password string the first time you post a message,
          and saves it in your `~/.emacs' using the Custom system.
          While the variable is called `canlock-password', it is not
          security sensitive data.  Publishing your canlock string on
          the web will not allow anyone to be able to anything she
          could not already do.  The behavior can be changed by
          customizing `message-insert-canlock'.

        * Gnus supports PGP (RFC 1991/2440), PGP/MIME (RFC 2015/3156)
          and S/MIME (RFC 2630-2633).

          It needs an external S/MIME and OpenPGP implementation, but
          no additional Lisp libraries.  This add several menu items
          to the Attachments menu, and `C-c RET' key bindings, when
          composing messages.  This also obsoletes
          `gnus-article-hide-pgp-hook'.

        * MML (Mime compose) prefix changed from `M-m' to `C-c C-m'.

          This change was made to avoid conflict with the standard binding of
          `back-to-indentation', which is also useful in message mode.

        * The default for `message-forward-show-mml' changed to the symbol
          `best'.

          The behavior for the `best' value is to show MML (i.e.,
          convert to MIME) when appropriate.  MML will not be used
          when forwarding signed or encrypted messages, as the
          conversion invalidate the digital signature.

        * If `auto-compression-mode' is enabled, attachments are
          automatically decompressed when activated.

        * Support for non-ASCII domain names

          Message supports non-ASCII domain names in From:, To: and
          Cc: and will query you whether to perform encoding when you
          try to send a message.  The variable `message-use-idna'
          controls this.  Gnus will also decode non-ASCII domain names
          in From:, To: and Cc: when you view a message.  The variable
          `gnus-use-idna' controls this.

        * You can now drag and drop attachments to the Message buffer.
          See `mml-dnd-protocol-alist' and `mml-dnd-attach-options'.
          *Note MIME: (message)MIME.

        * `auto-fill-mode' is enabled by default in Message mode.  See
          `message-fill-column'.  *Note Message Headers:
          (message)Various Message Variables.


   * Changes in back ends

        * Gnus can display RSS newsfeeds as a newsgroup.  *Note RSS::.

        * The nndoc back end now supports mailman digests and exim
          bounces.

        * Gnus supports Maildir groups.

          Gnus includes a new back end `nnmaildir.el'.  *Note
          Maildir::.

        * The nnml and nnfolder back ends store marks for each groups.

          This makes it possible to take backup of nnml/nnfolder servers/groups
          separately of `~/.newsrc.eld', while preserving marks.  It also
          makes it possible to share articles and marks between users (without
          sharing the `~/.newsrc.eld' file) within e.g. a department.  It
          works by storing the marks stored in `~/.newsrc.eld' in a per-group
          file `.marks' (for nnml) and `GROUPNAME.mrk' (for
          nnfolder, named GROUPNAME).  If the nnml/nnfolder is moved to
          another machine, Gnus will automatically use the `.marks' or
          `.mrk' file instead of the information in `~/.newsrc.eld'.
          The new server variables `nnml-marks-is-evil' and
          `nnfolder-marks-is-evil' can be used to disable this feature.


   * Appearance


        * The menu bar item (in Group and Summary buffer) named "Misc"
          has been renamed to "Gnus".

        * The menu bar item (in Message mode) named "MML" has been
          renamed to "Attachments".  Note that this menu also contains
          security related stuff, like signing and encryption (*Note
          Security: (message)Security.).

        * The tool bars have been updated to use GNOME icons in Group,
          Summary and Message mode.  You can also customize the tool
          bars: `M-x customize-apropos RET -tool-bar$' should get you
          started.  This is a new feature in Gnus 5.10.10.  (Only for
          Emacs, not in XEmacs.)

        * The tool bar icons are now (de)activated correctly in the
          group buffer, see the variable `gnus-group-update-tool-bar'.
          Its default value depends on your Emacs version.  This is a
          new feature in Gnus 5.10.9.


   * Miscellaneous changes


        * `gnus-agent'

          The Gnus Agent has seen a major updated and is now enabled
          by default, and all nntp and nnimap servers from
          `gnus-select-method' and `gnus-secondary-select-method' are
          agentized by default.  Earlier only the server in
          `gnus-select-method' was agentized by the default, and the
          agent was disabled by default.  When the agent is enabled,
          headers are now also retrieved from the Agent cache instead
          of the back ends when possible.  Earlier this only happened
          in the unplugged state.  You can enroll or remove servers
          with `J a' and `J r' in the server buffer.  Gnus will not
          download articles into the Agent cache, unless you instruct
          it to do so, though, by using `J u' or `J s' from the Group
          buffer.  You revert to the old behavior of having the Agent
          disabled with `(setq gnus-agent nil)'.  Note that putting
          `(gnus-agentize)' in `~/.gnus.el' is not needed any more.

        * Gnus reads the NOV and articles in the Agent if plugged.

          If one reads an article while plugged, and the article
          already exists in the Agent, it won't get downloaded once
          more.  `(setq gnus-agent-cache nil)' reverts to the old
          behavior.

        * Dired integration

          `gnus-dired-minor-mode' (see *Note Other modes::) installs
          key bindings in dired buffers to send a file as an
          attachment, open a file using the appropriate mailcap entry,
          and print a file using the mailcap entry.

        * The format spec `%C' for positioning point has changed to
          `%*'.

        * `gnus-slave-unplugged'

          A new command which starts Gnus offline in slave mode.





File: gnus, Node: No Gnus, Prev: Oort Gnus, Up: New Features

No Gnus
.......

New features in No Gnus:







   * Installation changes

        * Upgrading from previous (stable) version if you have used No Gnus.

          If you have tried No Gnus (the unstable Gnus branch leading
          to this release) but went back to a stable version, be
          careful when upgrading to this version.  In particular, you
          will probably want to remove the `~/News/marks' directory
          (perhaps selectively), so that flags are read from your
          `~/.newsrc.eld' instead of from the stale marks file, where
          this release will store flags for nntp.  See a later entry
          for more information about nntp marks.  Note that
          downgrading isn't safe in general.

        * Incompatibility when switching from Emacs 23 to Emacs 22 In
          Emacs 23, Gnus uses Emacs' new internal coding system
          `utf-8-emacs' for saving articles drafts and
          `~/.newsrc.eld'.  These files may not be read correctly in
          Emacs 22 and below.  If you want to use Gnus across
          different Emacs versions, you may set
          `mm-auto-save-coding-system' to `emacs-mule'.

        * Lisp files are now installed in `.../site-lisp/gnus/' by
          default.  It defaulted to `.../site-lisp/' formerly.  In
          addition to this, the new installer issues a warning if
          other Gnus installations which will shadow the latest one
          are detected.  You can then remove those shadows manually or
          remove them using `make remove-installed-shadows'.

        * The installation directory name is allowed to have spaces and/or tabs.

   * New packages and libraries within Gnus


        * Gnus includes the Emacs Lisp SASL library.

          This provides a clean API to SASL mechanisms from
          within Emacs.  The user visible aspects of this, compared to the earlier
          situation, include support for DIGEST-MD5 and
          NTLM.   *Note Emacs SASL: (sasl)Top.

        * ManageSieve connections uses the SASL library by default.

          The primary change this brings is support for DIGEST-MD5 and
          NTLM, when the server supports it.

        * Gnus includes a password cache mechanism in password.el.

          It is enabled by default (see `password-cache'), with a
          short timeout of 16 seconds (see `password-cache-expiry').
          If PGG is used as the PGP back end, the PGP passphrase is
          managed by this mechanism.  Passwords for ManageSieve
          connections are managed by this mechanism, after querying
          the user about whether to do so.

        * Using EasyPG with Gnus When EasyPG, is available, Gnus will
          use it instead of PGG.  EasyPG is an Emacs user interface to
          GNU Privacy Guard.  *Note EasyPG Assistant user's manual:
          (epa)Top.  EasyPG is included in Emacs 23 and available
          separately as well.

   * Changes in group mode

        * Old intermediate incoming mail files (`Incoming*') are
          deleted after a couple of days, not immediately.  *Note Mail
          Source Customization::.


   * Changes in summary and article mode


        * Gnus now supports sticky article buffers.  Those are article
          buffers that are not reused when you select another article.
          *Note Sticky Articles::.


        * Gnus can selectively display `text/html' articles with a WWW
          browser with `K H'.  *Note MIME Commands::.


        * International host names (IDNA) can now be decoded inside
          article bodies using `W i' (`gnus-summary-idna-message').
          This requires that GNU Libidn
          (`http://www.gnu.org/software/libidn/') has been installed.

        * The non-ASCII group names handling has been much
          improved.  The back ends that fully support non-ASCII group
          names are now `nntp', `nnml', and `nnrss'.  Also the
          agent, the cache, and the marks features work with those back ends.
          *Note Non-ASCII Group Names::.

        * Gnus now displays DNS master files sent as text/dns using
          dns-mode.

        * Gnus supports new limiting commands in the Summary buffer:
          `/ r' (`gnus-summary-limit-to-replied') and `/ R'
          (`gnus-summary-limit-to-recipient').  *Note Limiting::.

        * You can now fetch all ticked articles from the server using
          `Y t' (`gnus-summary-insert-ticked-articles').  *Note
          Summary Generation Commands::.

        * Gnus supports a new sort command in the Summary buffer: `C-c
          C-s C-t' (`gnus-summary-sort-by-recipient').  *Note Summary
          Sorting::.

        * S/MIME now features LDAP user certificate searches.  You
          need to configure the server in `smime-ldap-host-list'.

        * URLs inside OpenPGP headers are retrieved and imported to
          your PGP key ring when you click on them.

        * Picons can be displayed right from the textual address, see
          `gnus-picon-style'.  *Note Picons::.

        * ANSI SGR control sequences can be transformed using `W A'.

          ANSI sequences are used in some Chinese hierarchies for
          highlighting articles (`gnus-article-treat-ansi-sequences').

        * Gnus now MIME decodes articles even when they lack
          MIME-Version" header.  This changes the default of
          `gnus-article-loose-mime'.

        * `gnus-decay-scores' can be a regexp matching score files.
          For example, set it to `\\.ADAPT\\'' and only adaptive score
          files will be decayed.  *Note Score Decays::.

        * Strings prefixing to the `To' and `Newsgroup' headers in
          summary lines when using `gnus-ignored-from-addresses' can be
          customized with `gnus-summary-to-prefix' and
          `gnus-summary-newsgroup-prefix'.  *Note To From Newsgroups::.

        * You can replace MIME parts with external bodies.
          See `gnus-mime-replace-part' and `gnus-article-replace-part'.
          *Note MIME Commands::, *Note Using MIME::.

        * The option `mm-fill-flowed' can be used to disable treatment
          of format=flowed messages.  Also, flowed text is disabled
          when sending inline PGP signed messages.  *Note Flowed text:
          (emacs-mime)Flowed text.  (New in Gnus 5.10.7)

        * Now the new command `S W'
          (`gnus-article-wide-reply-with-original') for a wide reply in the
          article buffer yanks a text that is in the active region, if it is set,
          as well as the `R' (`gnus-article-reply-with-original') command.
          Note that the `R' command in the article buffer no longer accepts a
          prefix argument, which was used to make it do a wide reply.
          *Note Article Keymap::.

        * The new command `C-h b' (`gnus-article-describe-bindings')
          used in the article buffer now shows not only the article
          commands but also the real summary commands that are
          accessible from the article buffer.


   * Changes in Message mode

        * Gnus now supports the "hashcash" client puzzle anti-spam mechanism.
          Use `(setq message-generate-hashcash t)' to enable.
          *Note Hashcash::.

        * You can now drag and drop attachments to the Message buffer.
          See `mml-dnd-protocol-alist' and `mml-dnd-attach-options'.
          *Note MIME: (message)MIME.

        * The option `message-yank-empty-prefix' now controls how
          empty lines are prefixed in cited text.  *Note Insertion
          Variables: (message)Insertion Variables.

        * Gnus uses narrowing to hide headers in Message buffers.
          The `References' header is hidden by default.  To make all
          headers visible, use `(setq message-hidden-headers nil)'.
          *Note Message Headers: (message)Message Headers.

        * You can highlight different levels of citations like in the
          article buffer.  See `gnus-message-highlight-citation'.

        * `auto-fill-mode' is enabled by default in Message mode.  See
          `message-fill-column'.  *Note Message Headers:
          (message)Various Message Variables.

        * You can now store signature files in a special directory
          named `message-signature-directory'.

        * The option `message-citation-line-format' controls the format
          of the "Whomever writes:" line.  You need to set
          `message-citation-line-function' to
          `message-insert-formatted-citation-line' as well.

   * Changes in back ends

        * The nntp back end stores article marks in `~/News/marks'.

          The directory can be changed using the (customizable)
          variable `nntp-marks-directory', and marks can be disabled
          using the (back end) variable `nntp-marks-is-evil'.  The
          advantage of this is that you can copy `~/News/marks' (using
          rsync, scp or whatever) to another Gnus installation, and it
          will realize what articles you have read and marked.  The
          data in `~/News/marks' has priority over the same data in
          `~/.newsrc.eld'.

        * You can import and export your RSS subscriptions from
          OPML files.  *Note RSS::.

        * IMAP identity (RFC 2971) is supported.

          By default, Gnus does not send any information about itself,
          but you can customize it using the variable `nnimap-id'.

        * The `nnrss' back end now supports multilingual text.
          Non-ASCII group names for the `nnrss' groups are also
          supported.  *Note RSS::.

        * Retrieving mail with POP3 is supported over SSL/TLS and with StartTLS.

        * The nnml back end allows other compression programs beside
          `gzip' for compressed message files.  *Note Mail Spool::.

        * The nnml back end supports group compaction.

          This feature, accessible via the functions
          `gnus-group-compact-group' (`G z' in the group buffer) and
          `gnus-server-compact-server' (`z' in the server buffer)
          renumbers all articles in a group, starting from 1 and
          removing gaps.  As a consequence, you get a correct total
          article count (until messages are deleted again).




   * Appearance


        * The tool bar has been updated to use GNOME icons.
          You can also customize the tool bars: `M-x customize-apropos RET
          -tool-bar$' should get you started.  (Only for Emacs, not in XEmacs.)

        * The tool bar icons are now (de)activated correctly in the
          group buffer, see the variable `gnus-group-update-tool-bar'.
          Its default value depends on your Emacs version.

        * You can change the location of XEmacs' toolbars in Gnus
          buffers.  See `gnus-use-toolbar' and `message-use-toolbar'.


   * Miscellaneous changes

        * Having edited the select-method for the foreign server in
          the server buffer is immediately reflected to the
          subscription of the groups which use the server in question.
          For instance, if you change `nntp-via-address' into
          `bar.example.com' from `foo.example.com', Gnus will connect
          to the news host by way of the intermediate host
          `bar.example.com' from next time.

        * The `all.SCORE' file can be edited from the group buffer
          using `W e'.









File: gnus, Node: On Writing Manuals, Next: Terminology, Prev: The Manual, Up: Appendices

On Writing Manuals
==================

I guess most manuals are written after-the-fact; documenting a program
that's already there.  This is not how this manual is written.  When
implementing something, I write the manual entry for that something
straight away.  I then see that it's difficult to explain the
functionality, so I write how it's supposed to be, and then I change
the implementation.  Writing the documentation and writing the code go
hand in hand.

This, of course, means that this manual has no, or little, flow.  It
documents absolutely everything in Gnus, but often not where you're
looking for it.  It is a reference manual, and not a guide to how to
get started with Gnus.

That would be a totally different book, that should be written using
the reference manual as source material.  It would look quite
different.




File: gnus, Node: Terminology, Next: Customization, Prev: On Writing Manuals, Up: Appendices

Terminology
===========


"news"
     This is what you are supposed to use this thing for--reading
     news.  News is generally fetched from a nearby NNTP server, and
     is generally publicly available to everybody.  If you post news,
     the entire world is likely to read just what you have written,
     and they'll all snigger mischievously.  Behind your back.

"mail"
     Everything that's delivered to you personally is mail.  Some
     news/mail readers (like Gnus) blur the distinction between mail
     and news, but there is a difference.  Mail is private.  News is
     public.  Mailing is not posting, and replying is not following
     up.

"reply"
     Send a mail to the person who has written what you are reading.

"follow up"
     Post an article to the current newsgroup responding to the
     article you are reading.

"back end"
     Gnus considers mail and news to be mostly the same, really.  The
     only difference is how to access the actual articles.  News
     articles are commonly fetched via the protocol NNTP, whereas mail
     messages could be read from a file on the local disk.  The
     internal architecture of Gnus thus comprises a "front end" and a
     number of "back ends".  Internally, when you enter a group (by
     hitting RET, say), you thereby invoke a function in the front end
     in Gnus.  The front end then "talks" to a back end and says
     things like "Give me the list of articles in the foo group" or
     Show me article number 4711".

     So a back end mainly defines either a protocol (the `nntp' back
     end accesses news via NNTP, the `nnimap' back end accesses mail
     via IMAP) or a file format and directory layout (the `nnspool'
     back end accesses news via the common "spool directory" format,
     the `nnml' back end access mail via a file format and directory
     layout that's quite similar).

     Gnus does not handle the underlying media, so to speak--this is
     all done by the back ends.  A back end is a collection of
     functions to access the articles.

     However, sometimes the term "back end" is also used where
     server" would have been more appropriate.  And then there is the
     term "select method" which can mean either.  The Gnus terminology
     can be quite confusing.

"native"
     Gnus will always use one method (and back end) as the "native",
     or default, way of getting news.

"foreign"
     You can also have any number of foreign groups active at the same
     time.  These are groups that use non-native non-secondary back
     ends for getting news.

"secondary"
     Secondary back ends are somewhere half-way between being native
     and being foreign, but they mostly act like they are native.

"article"
     A message that has been posted as news.

"mail message"
     A message that has been mailed.

"message"
     A mail message or news article

"head"
     The top part of a message, where administrative information
     (etc.) is put.

"body"
     The rest of an article.  Everything not in the head is in the
     body.

"header"
     A line from the head of an article.

"headers"
     A collection of such lines, or a collection of heads.  Or even a
     collection of NOV lines.

"NOV"
     NOV stands for News OverView, which is a type of news server
     header which provide datas containing the condensed header
     information of articles.  They are produced by the server itself;
     in the `nntp' back end Gnus uses the ones that the NNTP server
     makes, but Gnus makes them by itself for some backends (in
     particular, `nnml').

     When Gnus enters a group, it asks the back end for the headers of
     all unread articles in the group.  Most servers support the News
     OverView format, which is more compact and much faster to read
     and parse than the normal HEAD format.

     The NOV data consist of one or more text lines (*Note Motion by
     Text Lines: (elisp)Text Lines.)  where each line has the header
     information of one article.  The header information is a
     tab-separated series of the header's contents including an
     article number, a subject, an author, a date, a message-id,
     references, etc.

     Those data enable Gnus to generate summary lines quickly.
     However, if the server does not support NOV or you disable it
     purposely or for some reason, Gnus will try to generate the
     header information by parsing each article's headers one by one.
     It will take time.  Therefore, it is not usually a good idea to
     set nn*-nov-is-evil (*Note Slow/Expensive Connection::) to a
     non-`nil' value unless you know that the server makes wrong NOV
     data.

"level"
     Each group is subscribed at some "level" or other (1-9).  The
     ones that have a lower level are "more" subscribed than the
     groups with a higher level.  In fact, groups on levels 1-5 are
     considered "subscribed"; 6-7 are "unsubscribed"; 8 are "zombies";
     and 9 are "killed".  Commands for listing groups and scanning for
     new articles will all use the numeric prefix as "working level".

"killed groups"
     No information on killed groups is stored or updated, which makes
     killed groups much easier to handle than subscribed groups.

"zombie groups"
     Just like killed groups, only slightly less dead.

"active file"
     The news server has to keep track of what articles it carries,
     and what groups exist.  All this information in stored in the
     active file, which is rather large, as you might surmise.

"bogus groups"
     A group that exists in the `.newsrc' file, but isn't known to the
     server (i.e., it isn't in the active file), is a *bogus group*.
     This means that the group probably doesn't exist (any more).

"activating"
     The act of asking the server for info on a group and computing
     the number of unread articles is called "activating the group".
     Un-activated groups are listed with `*' in the group buffer.

"spool"
     News servers store their articles locally in one fashion or
     other.  One old-fashioned storage method is to have just one file
     per article.  That's called a "traditional spool".

"server"
     A machine one can connect to and get news (or mail) from.

"select method"
     A structure that specifies the back end, the server and the
     virtual server settings.

"virtual server"
     A named select method.  Since a select method defines all there
     is to know about connecting to a (physical) server, taking the
     thing as a whole is a virtual server.

"washing"
     Taking a buffer and running it through a filter of some sort.
     The result will (more often than not) be cleaner and more
     pleasing than the original.

"ephemeral groups"
     Most groups store data on what articles you have read.
     Ephemeral" groups are groups that will have no data stored--when
     you exit the group, it'll disappear into the aether.

"solid groups"
     This is the opposite of ephemeral groups.  All groups listed in
     the group buffer are solid groups.

"sparse articles"
     These are article placeholders shown in the summary buffer when
     `gnus-build-sparse-threads' has been switched on.

"threading"
     To put responses to articles directly after the articles they
     respond to--in a hierarchical fashion.

"root"
     The first article in a thread is the root.  It is the ancestor of
     all articles in the thread.

"parent"
     An article that has responses.

"child"
     An article that responds to a different article--its parent.

"digest"
     A collection of messages in one file.  The most common digest
     format is specified by RFC 1153.

"splitting"
     The action of sorting your emails according to certain
     rules. Sometimes incorrectly called mail filtering.





File: gnus, Node: Customization, Next: Troubleshooting, Prev: Terminology, Up: Appendices

Customization
=============

All variables are properly documented elsewhere in this manual.  This
section is designed to give general pointers on how to customize Gnus
for some quite common situations.

* Menu:

* Slow/Expensive Connection::   You run a local Emacs and get the news elsewhere.
* Slow Terminal Connection::    You run a remote Emacs.
* Little Disk Space::           You feel that having large setup files is icky.
* Slow Machine::                You feel like buying a faster machine.




File: gnus, Node: Slow/Expensive Connection, Next: Slow Terminal Connection, Prev: Customization, Up: Customization

Slow/Expensive Connection
-------------------------

If you run Emacs on a machine locally, and get your news from a
machine over some very thin strings, you want to cut down on the
amount of data Gnus has to get from the server.


`gnus-read-active-file'
     Set this to `nil', which will inhibit Gnus from requesting the
     entire active file from the server.  This file is often very
     large.  You also have to set `gnus-check-new-newsgroups' and
     `gnus-check-bogus-newsgroups' to `nil' to make sure that Gnus
     doesn't suddenly decide to fetch the active file anyway.

`gnus-nov-is-evil'
     Usually this one must *always* be `nil' (which is the default).
     If, for example, you wish to not use NOV (*Note Terminology::)
     with the `nntp' back end (*Note Crosspost Handling::), set
     `nntp-nov-is-evil' to a non-`nil' value instead of setting this.
     But you normally do not need to set `nntp-nov-is-evil' since Gnus
     by itself will detect whether the NNTP server supports NOV.
     Anyway, grabbing article headers from the NNTP server will not be
     very fast if you tell Gnus not to use NOV.

     As the variables for the other back ends, there are
     `nndiary-nov-is-evil', `nndir-nov-is-evil',
     `nnfolder-nov-is-evil', `nnimap-nov-is-evil', `nnml-nov-is-evil',
     `nnspool-nov-is-evil', and `nnwarchive-nov-is-evil'.  Note that a
     non-`nil' value for `gnus-nov-is-evil' overrides all those
     variables. (1) (*Note Slow/Expensive Connection-Footnotes::)



File: gnus  Node: Slow/Expensive Connection-Footnotes, Up: Slow/Expensive Connection

(1) Although the back ends `nnkiboze', `nnslashdot',
`nnultimate', and `nnwfm' don't have their own
nn*-nov-is-evil.



File: gnus, Node: Slow Terminal Connection, Next: Little Disk Space, Prev: Slow/Expensive Connection, Up: Customization

Slow Terminal Connection
------------------------

Let's say you use your home computer for dialing up the system that
runs Emacs and Gnus.  If your modem is slow, you want to reduce (as
much as possible) the amount of data sent over the wires.


`gnus-auto-center-summary'
     Set this to `nil' to inhibit Gnus from re-centering the summary
     buffer all the time.  If it is `vertical', do only vertical
     re-centering.  If it is neither `nil' nor `vertical', do both
     horizontal and vertical recentering.

`gnus-visible-headers'
     Cut down on the headers included in the articles to the
     minimum.  You can, in fact, make do without them altogether--most of the
     useful data is in the summary buffer, anyway.  Set this variable to
     `^NEVVVVER' or `From:', or whatever you feel you need.

     Use the following to enable all the available hiding features:
          (setq gnus-treat-hide-headers 'head
                gnus-treat-hide-signature t
                gnus-treat-hide-citation t)

`gnus-use-full-window'
     By setting this to `nil', you can make all the windows smaller.
     While this doesn't really cut down much generally, it means that
     you have to see smaller portions of articles before deciding that
     you didn't want to read them anyway.

`gnus-thread-hide-subtree'
     If this is non-`nil', all threads in the summary buffer will be
     hidden initially.


`gnus-updated-mode-lines'
     If this is `nil', Gnus will not put information in the buffer
     mode lines, which might save some time.




File: gnus, Node: Little Disk Space, Next: Slow Machine, Prev: Slow Terminal Connection, Up: Customization

Little Disk Space
-----------------

The startup files can get rather large, so you may want to cut their
sizes a bit if you are running out of space.


`gnus-save-newsrc-file'
     If this is `nil', Gnus will never save `.newsrc'---it will only
     save `.newsrc.eld'.  This means that you will not be able to use
     any other newsreaders than Gnus.  This variable is `t' by
     default.

`gnus-read-newsrc-file'
     If this is `nil', Gnus will never read `.newsrc'---it will only
     read `.newsrc.eld'.  This means that you will not be able to use
     any other newsreaders than Gnus.  This variable is `t' by
     default.

`gnus-save-killed-list'
     If this is `nil', Gnus will not save the list of dead groups.
     You should also set `gnus-check-new-newsgroups' to `ask-server'
     and `gnus-check-bogus-newsgroups' to `nil' if you set this
     variable to `nil'.  This variable is `t' by default.





File: gnus, Node: Slow Machine, Prev: Little Disk Space, Up: Customization

Slow Machine
------------

If you have a slow machine, or are just really impatient, there are a
few things you can do to make Gnus run faster.

Set `gnus-check-new-newsgroups' and
`gnus-check-bogus-newsgroups' to `nil' to make startup faster.

Set `gnus-show-threads', `gnus-use-cross-reference' and
`gnus-nov-is-evil' to `nil' to make entering and exiting the summary
buffer faster.  Also *Note Slow/Expensive Connection::.




