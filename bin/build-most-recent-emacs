#! /opt/perl/bin/perl

use strict;
use warnings;
use 5.010;

$|++;

use File::Fetch;
use File::Temp      qw /tempdir/;
use FindBin;
use LWP::UserAgent;
use Sort::Versions;

my $EMACS_DIR      = '/opt';
my $EMACS_FTP_URLS = [ 'ftp://alpha.gnu.org/gnu/emacs/pretest' ,
                       'ftp://ftp.gnu.org/gnu/emacs/' ];
my $VERBOSE        = 1;


my( $tarball ) = find_most_recent_emacs_version();
my( $version ) = $tarball =~ /emacs-(.*).tar.gz$/;
say "MOST RECENT EMACS IS: $version" if $VERBOSE;

if ( -e "$EMACS_DIR/emacs-$version" ) {
  say "already up-to-date. bye!";
  exit(0);
}

say "BUILDING $version. (go get some coffe, this'll take a bit.)";

my $tarball_file = "/tmp/emacs-${version}.tar.gz";
if ( -e $tarball_file ) {
  say "* FOUND EXISTING $tarball_file..." if $VERBOSE;
}
else {
  print "* FETCHING $tarball_file..." if $VERBOSE;
  fetch_emacs_tarball( "$tarball" );
  say "done!" if $VERBOSE;
}

say '';

build_emacs( $tarball_file , $version );

say '';

build_mac_emacs( $tarball_file , $version ) if $^O eq 'darwin';

say "\n* CLEANING UP..." if $VERBOSE;
unlink( $tarball_file );

say "done.";

sub build_emacs {
  my( $tarball , $version ) = @_;

  print "[BUILD EMACS] " if $VERBOSE;

  _extract_tarball_and_get_ready_to_build( $tarball , $version );

  print "CONFIGURE..." if $VERBOSE;
  system("./configure --prefix=/opt/emacs-$version --without-x >/dev/null") == 0
    or die "Configure failed : $!\n";

  print "MAKE BOOSTRAP..." if $VERBOSE;
  system("make bootstrap >/dev/null") == 0
    or die "Make bookstrap failed : $!\n";

  print "MAKE..." if $VERBOSE;
  system("make >/dev/null 2>/dev/null") == 0
    or die "Make failed : $!\n";

  print "MAKE INSTALL..." if $VERBOSE;
  system("make install >/dev/null 2>/dev/null" ) == 0
    or die "Make install failed : $!\n";

  print "UPDATING SYMLINK..." if $VERBOSE;
  unlink( '/opt/emacs' ) if -e '/opt/emacs';
  symlink( "/opt/emacs-$version" , '/opt/emacs' )
    or die "Failed to create symlink : $!";

  say "done." if $VERBOSE;

  return 1;
}

sub build_mac_emacs {
  my( $tarball , $version ) = @_;

  _extract_tarball_and_get_ready_to_build( $tarball , $version );

  ### FIXME
  # print "CONFIGURE..." if $VERBOSE;
  # system("./configure --prefix=/opt/emacs-$version --without-x >/dev/null") == 0
  #   or die "Configure failed : $!\n";

  # print "MAKE BOOSTRAP..." if $VERBOSE;
  # system("make bootstrap >/dev/null") == 0
  #   or die "Make bookstrap failed : $!\n";

  # print "MAKE..." if $VERBOSE;
  # system("make >/dev/null") == 0
  #   or die "Make failed : $!\n";

  # print "MAKE INSTALL..." if $VERBOSE;
  # system("make install >/dev/null" ) == 0
  #   or die "Make install failed : $!\n";

  # print "UPDATING SYMLINK..." if $VERBOSE;
  # unlink( '/opt/emacs' ) if -e '/opt/emacs';
  # symlink( "/opt/emacs-$version" , '/opt/emacs' )
  #   or die "Failed to create symlink : $!";

  say "done." if $VERBOSE;

  return 1;
}

sub fetch_emacs_tarball {
  my $uri = shift;

  my $ff = File::Fetch->new( uri => $uri )
    or die $!;

  my $fetch = $ff->fetch( to => '/tmp' )
    or die "Couldn't fetch: ". $ff->error . "\n";
}

sub find_most_recent_emacs_version {
  my %versions;

  foreach my $url ( @$EMACS_FTP_URLS ) {
    my $ua = LWP::UserAgent->new;

    my $response = $ua->get($url);

    die "Couldn't list FTP directory"
      unless $response->is_success;

    foreach ( split /\n/ , $response->content ) {
      next unless /emacs-([0123456789rca.-]+).tar\.gz$/;
      my @parts = split / / , $_;
      $versions{$parts[-1]} = "$url/$parts[-1]";
    }

  }

  my @versions = ( sort { versioncmp $a , $b } keys %versions );

  return $versions{$versions[-1]};
}

sub _extract_tarball_and_get_ready_to_build {
  my( $tarball , $version ) = @_;

  my $dir = tempdir( CLEANUP => 1 );
  say "TEMPDIR: $dir\n";

  chdir $dir or die "Can't chdir($dir) : $!\n";

  say "EXTRACT..." if $VERBOSE;
  system("tar xvf $tarball 2>/dev/null") == 0
    or die "Tar extract failed?! : $!";

  my $dir_version = $version;
  $dir_version =~ s/(-rc(.*))|(a)$//;

  chdir "$dir/emacs-$dir_version"
    or die "Can't chdir ($dir/emacs-$dir_version) : $!\n";

  foreach my $patch ( <$FindBin::Bin/../patches/*.diff> ) {
    print "APPLYING PATCH $patch ..." if $VERBOSE;
    system("patch -p0 < $patch") == 0
      or die "Failed to apply $patch";
    say "DONE";
  }
}
