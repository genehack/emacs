#! /usr/bin/env perl

use strict;
use warnings;
use 5.010;

$|++;

use File::Fetch;
use File::Path      qw/ make_path remove_tree /;
use File::Temp      qw /tempdir/;
use FindBin;
use LWP::UserAgent;
use Sort::Versions;

my $EMACS_DIR      = '/opt';
my $EMACS_FTP_URLS = [ 'ftp://alpha.gnu.org/gnu/emacs/pretest' ,
                       'ftp://ftp.gnu.org/gnu/emacs/' ];
my $VERBOSE        = 1;


my( $version , $ext , $tarball );
if ( my $selected_version = shift ) {
  my %versions = find_available_emacs_versions();

  if ( $tarball = $versions{$selected_version} ) {
    ( $version , $ext ) = $tarball =~ /emacs-(.*).tar.([gx]z)$/;

    say "BUILDING REQUESTED VERSION: $version" if $VERBOSE;
  }
  else {
    warn "UNABLE TO LOCATE VERSION $selected_version\n";
    exit(1);
  }
}
else {
  $tarball = find_most_recent_emacs_version();

  ( $version , $ext ) = $tarball =~ /emacs-(.*).tar.([gx]z)$/;

  say "MOST RECENT EMACS IS: $version" if $VERBOSE;
}


my $emacs_version_dir  = "$EMACS_DIR/emacs-$version";

if ( -e $emacs_version_dir ) {
  say "already exists. bye!";
  exit(0);
}

say "BUILDING $version. (go get some coffe, this'll take a bit.)";

my $tarball_file = "/tmp/emacs-${version}.tar.${ext}";
if ( -e $tarball_file ) {
  say "* FOUND EXISTING $tarball_file..." if $VERBOSE;
}
else {
  print "* FETCHING $tarball_file..." if $VERBOSE;
  fetch_emacs_tarball( "$tarball" );
  say "done!" if $VERBOSE;
}

say '';

$^O eq 'darwin'
  ? build_mac_emacs( $tarball_file , $version )
  : build_emacs( $tarball_file , $version );

say "\n* CLEANING UP..." if $VERBOSE;
unlink( $tarball_file );

chdir('/');                     # so File::Temp can clean up on exit

say "done.";

sub build_emacs {
  my( $tarball , $version ) = @_;

  print "[BUILD EMACS] " if $VERBOSE;

  _extract_tarball_and_get_ready_to_build( $tarball , $version );

  print "CONFIGURE..." if $VERBOSE;
  system("./configure --prefix=$emacs_version_dir --without-x >/dev/null") == 0
    or die "Configure failed : $!\n";

  _make_bootstrap_make_make_install();

  _update_symlink($version);
}

sub build_mac_emacs {
  my( $tarball , $version ) = @_;

  my $old_emacs_app_path = '/Applications/Emacs_OLD.app';
  my $new_emacs_app_path = '/Applications/Emacs.app';
  my $emacs_app_bin_dir  = "$new_emacs_app_path/Contents/MacOS/bin";
  my $emacs_opt_bin_dir  = "$emacs_version_dir/bin";

  print "[BUILD MAC EMACS] " if $VERBOSE;

  _extract_tarball_and_get_ready_to_build( $tarball , $version );

  print "CONFIGURE..." if $VERBOSE;
  # FIXME the '--without-makeinfo' bit is a kludge for the moment to avoid
  # having to build a new copy of textutils to meet the new version
  # requirement for makeinfo (as of 25.1.91.1). it should probably be removed
  # at some point.

  # in order to build newer Emacs on MacOS, I need libxml2 crap from homebrew...
  $ENV{CPPFLAGS}="-I/usr/local/opt/libxml2/include/libxml2";
  $ENV{PATH}="/usr/local/bin:$ENV{PATH}";
  $ENV{PKG_CONFIG_PATH}="/usr/local/lib/pkgconfig";

  system("./configure --with-gnutls=yes --without-makeinfo --with-ns >/dev/null") == 0
    or die "Configure failed : $!\n";

  _make_bootstrap_make_make_install();

  if ( -e $old_emacs_app_path ) {
    remove_tree( $old_emacs_app_path )
      or die "Failed to remove old backup Emacs : $!\n";
  }

  if ( -e $new_emacs_app_path ) {
    rename $new_emacs_app_path , $old_emacs_app_path
      or die "Failed to move Emacs.app to backup location : $!\n";
  }

  rename './nextstep/Emacs.app' , $new_emacs_app_path
    or die "Failed to move Emacs.app to /Applications : $!\n";

  print "SYMLINKS..." if $VERBOSE;
  make_path $emacs_opt_bin_dir;

  opendir( my $DIR ,  $emacs_app_bin_dir );
  while ( readdir $DIR ) {
    my $file = "$emacs_app_bin_dir/$_";
    next unless -f -x $file;
    symlink $file , "$emacs_opt_bin_dir/$_" or die $!;
  }
  closedir $DIR;

  _update_symlink($version);

  say "done." if $VERBOSE;

  return 1;
}

sub fetch_emacs_tarball {
  my $uri = shift;

  my $ff = File::Fetch->new( uri => $uri )
    or die $!;

  my $fetch = $ff->fetch( to => '/tmp' )
    or die "Couldn't fetch: ". $ff->error . "\n";
}

sub find_available_emacs_versions {
  my %versions;

  foreach my $url ( @$EMACS_FTP_URLS ) {
    my $ua = LWP::UserAgent->new;

    my $response = $ua->get($url);

    die "Couldn't list FTP directory:\nStatus: " . $response->code . "\nMessage: " . $response->message
      unless $response->is_success;

    foreach ( split /\n/ , $response->content ) {
      next unless /emacs-([0123456789rca.-]+)\.tar\.[gx]z$/;
      my $version = $1;
      my @parts = split / / , $_;
      $versions{$version} = "$url/$parts[-1]";
    }
  }

  return %versions;
}

sub find_most_recent_emacs_version {
  my %versions = find_available_emacs_versions();

  my @versions = ( sort { versioncmp $a , $b } keys %versions );

  my $most_recent = $versions{$versions[-1]};

  # Sort::Versions will count RC releases as newer than the final release. So
  # if the most recent is an RC, check to see if there's also a non-RC with
  # that same version number and use that instead
  if ( $most_recent =~ /-rc[0-9]+\.tar/) {

    my( $non_rc_version ) = $most_recent =~ /emacs-([\d\.]+)-rc/;

    $most_recent = $versions{$non_rc_version} if $versions{$non_rc_version};
  }

  return $most_recent;
}

sub _extract_tarball_and_get_ready_to_build {
  my( $tarball , $version ) = @_;

  my $dir = tempdir( CLEANUP => 1 );
  say "TEMPDIR: $dir\n";

  chdir $dir or die "Can't chdir($dir) : $!\n";

  say "EXTRACT..." if $VERBOSE;
  system("tar xvf $tarball 2>/dev/null") == 0
    or die "Tar extract failed?! : $!";

  my $dir_version = $version;
  $dir_version =~ s/(-rc(.*))|(a)$//;

  chdir "$dir/emacs-$dir_version"
    or die "Can't chdir ($dir/emacs-$dir_version) : $!\n";

  foreach my $patch ( glob("$FindBin::Bin/../patches/*.diff)")) {
    print "APPLYING PATCH $patch ..." if $VERBOSE;
    system("patch -p0 < $patch") == 0
      or die "Failed to apply $patch";
    say "DONE";
  }
}

sub _make_bootstrap_make_make_install {
  print "MAKE BOOSTRAP..." if $VERBOSE;
  system("make bootstrap >/dev/null ") == 0
    or die "Make bookstrap failed : $?\n";

  print "MAKE..." if $VERBOSE;
  system("make >/dev/null 2>/dev/null") == 0
    or die "Make failed : $?\n";

  print "MAKE INSTALL..." if $VERBOSE;
  system("make install >/dev/null 2>/dev/null" ) == 0
    or die "Make install failed : $?\n";

  say "done." if $VERBOSE;

}

sub _update_symlink {
  my $version = shift;

  my $emacs_symlink = "$EMACS_DIR/emacs";

  print "UPDATING SYMLINK..." if $VERBOSE;
  unlink( $emacs_symlink ) if -e $emacs_symlink;
  symlink( $emacs_version_dir , $emacs_symlink )
    or die "Failed to create symlink : $!";
}
